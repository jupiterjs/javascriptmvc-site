c({"name": "can.Object.same", "params": {"a": {"description": "<p>an object to compare</p>", "type": "Object", "optional": false, "order": 0, "name": "a"}, "b": {"description": "<p>an object to compare</p>", "type": "Object", "optional": false, "order": 1, "name": "b"}, "compares": {"description": "<p>an object that indicates how to \ncompare specific properties. \nTypically this is a name / value pair</p>\n\n<pre><code>can.Object.same({name: \"Justin\"},{name: \"JUSTIN\"},{name: \"i\"})\n</code></pre>\n\n<p>There are two compare functions that you can specify with a string:</p>\n\n<ul>\n<li>'i' - ignores case</li>\n<li>null - ignores this property</li>\n</ul>", "type": "Object", "optional": true, "order": 2, "name": "compares"}, "aParent": {"description": "", "type": "", "optional": false, "order": 3, "name": "aParent"}, "bParent": {"description": "", "type": "", "optional": false, "order": 4, "name": "bParent"}, "deep": {"description": "<p>used internally</p>", "type": "Object", "optional": true, "order": 5, "name": "deep"}}, "ret": {"type": "undefined", "description": ""}, "type": "function", "parents": ["can.Object"], "comment": "<p>Returns if two objects are the same.  It takes an optional compares object that\ncan be used to make comparisons.</p>\n\n<p>This function does not work with objects that create circular references.</p>\n\n<h2>Examples</h2>\n\n<pre><code>can.Object.same({name: \"Justin\"},\n              {name: \"JUSTIN\"}) //-&gt; false\n\n// ignore the name property\ncan.Object.same({name: \"Brian\"},\n              {name: \"JUSTIN\"},\n              {name: null})      //-&gt; true\n\n// ignore case\ncan.Object.same({name: \"Justin\"},\n              {name: \"JUSTIN\"},\n              {name: \"i\"})      //-&gt; true\n\n// deep rule\ncan.Object.same({ person : { name: \"Justin\" } },\n              { person : { name: \"JUSTIN\" } },\n              { person : { name: \"i\"      } }) //-&gt; true\n\n// supplied compare function\ncan.Object.same({age: \"Thirty\"},\n              {age: 30},\n              {age: function( a, b ){\n                      if( a == \"Thirty\" ) { \n                        a = 30\n                      }\n                      if( b == \"Thirty\" ) {\n                        b = 30\n                      }\n                      return a === b;\n                    }})      //-&gt; true\n</code></pre>", "src": {"query": "", "fragment": "", "path": "can/util/object/object.js", "dir": {"prototype": {}}, "filename": {"prototype": {}}, "ext": {"prototype": {}}, "domain": {"prototype": {}}, "isCrossDomain": {"prototype": {}}, "isRelativeToDomain": {"prototype": {}}, "hash": {"prototype": {}}, "search": {"prototype": {}}, "add": {"prototype": {}}, "join": {"prototype": {}}, "normalize": {"prototype": {}}, "isRelative": {"prototype": {}}, "pathTo": {"prototype": {}}, "mapJoin": {"prototype": {}}, "addJS": {"prototype": {}}, "toString": {"prototype": {}}, "insertMapping": {"prototype": {}}}, "line": 56, "children": []})