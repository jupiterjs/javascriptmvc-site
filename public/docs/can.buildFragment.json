c({"name": "can.buildFragment", "type": "function", "comment": "<p><code>can.buildFragment(html, node)</code> returns a document fragment for the HTML passed.</p>", "parents": ["can.util"], "params": {"html": {"order": 0, "description": "<p>HTML strings</p>", "name": "html", "type": "String", "optional": false}, "node": {"order": 1, "description": "<p>element used for accessing the ownerDocument</p>", "name": "node", "type": "Array", "optional": false}}, "ret": {"description": "", "type": "DocumentFragment"}, "src": {"query": "", "fragment": "", "path": "can/util/can.js", "dir": {"prototype": {}}, "filename": {"prototype": {}}, "ext": {"prototype": {}}, "domain": {"prototype": {}}, "isCrossDomain": {"prototype": {}}, "isRelativeToDomain": {"prototype": {}}, "hash": {"prototype": {}}, "search": {"prototype": {}}, "add": {"prototype": {}}, "join": {"prototype": {}}, "normalize": {"prototype": {}}, "isRelative": {"prototype": {}}, "pathTo": {"prototype": {}}, "mapJoin": {"prototype": {}}, "addJS": {"prototype": {}}, "toString": {"prototype": {}}, "insertMapping": {"prototype": {}}}, "line": 343, "children": []})