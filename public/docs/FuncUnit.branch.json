c({"name": "FuncUnit.branch", "params": {"check1": {"description": "", "type": "", "optional": false, "order": 0, "name": "check1"}, "success1": {"description": "", "type": "", "optional": false, "order": 1, "name": "success1"}, "check2": {"description": "", "type": "", "optional": false, "order": 2, "name": "check2"}, "success2": {"description": "", "type": "", "optional": false, "order": 3, "name": "success2"}, "timeout": {"description": "", "type": "", "optional": false, "order": 4, "name": "timeout"}, "a": {"order": 5, "description": "<p>function that runs when check2 returns true </p>", "name": "a", "type": "success2 {Function", "optional": false}, "if": {"order": 6, "description": "<p>neither checker returns true before this timeout, the test fails</p>", "name": "if", "type": "timeout {Number", "optional": false}}, "ret": {"type": "undefined", "description": ""}, "type": "function", "parents": ["FuncUnit"], "comment": "<p>Uses 2 checker methods to see which success function to call.  This is a way to conditionally \nrun one method if you're unsure about the conditions of your page, without causing a test \nfailure.  For example, this is useful for login steps, if you're not sure whether the app \nis logged in.</p>\n\n<pre><code>S.branch(function(){\n    return (S(\"#exists\").size() &gt; 0);\n}, function(){\n    ok(true, \"found exists\")\n}, function(){\n    return (S(\"#notexists\").size() &gt; 0);\n}, function(){\n    ok(false, \"found notexists\")\n});\n</code></pre>", "src": {"query": "", "fragment": "", "path": "funcunit/browser/waits.js", "dir": {"prototype": {}}, "filename": {"prototype": {}}, "ext": {"prototype": {}}, "domain": {"prototype": {}}, "isCrossDomain": {"prototype": {}}, "isRelativeToDomain": {"prototype": {}}, "hash": {"prototype": {}}, "search": {"prototype": {}}, "add": {"prototype": {}}, "join": {"prototype": {}}, "normalize": {"prototype": {}}, "isRelative": {"prototype": {}}, "pathTo": {"prototype": {}}, "mapJoin": {"prototype": {}}, "addJS": {"prototype": {}}, "toString": {"prototype": {}}, "insertMapping": {"prototype": {}}}, "line": 37, "children": []})