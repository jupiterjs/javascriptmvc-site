c({"name": "can.Observe.List.prototype.attr", "params": {"items": {"description": "", "type": "Array|Number", "optional": false, "order": 0, "name": "items"}, "remove": {"description": "", "type": "", "optional": false, "order": 1, "name": "remove"}, "{optional:remove}": {"order": 2, "description": "", "name": "{optional:remove}", "type": "Boolean|Object", "optional": false}}, "ret": {"description": "<p>returns the props on a read or the observe\nlist on a write.</p>", "type": "list|Array"}, "type": "function", "parents": ["can.Observe.List.prototype"], "comment": "<p>Gets or sets an item or items in the observe list.  Examples:</p>\n\n<pre><code>list = new can.Observe.List([\"a\",\"b\",\"c\"]);\n\n// sets an array item\nlist.attr(3,'d')\n\n// read an array's item\nlist.attr(3) //-&gt; 'd'\n\n// merge array's properties\nlist.attr( [\"b\",\"BOO\"] )\n\n// get properties\no.attr()           //-&gt; [\"b\",\"BOO\",\"c\",\"d\"]\n\n// set array\no.attr([\"item\"])\no.attr() //-&gt; [\"item\"]\n</code></pre>\n\n<h2>Setting Properties</h2>\n\n<p><code>attr( array , true )</code> updates the list to look like array.  For example:</p>\n\n<pre><code>list = new can.Observe.List([\"a\",\"b\",\"c\"])\nlist.attr([\"foo\"], true)\n\nlist.attr() //-&gt; [\"foo\"]\n</code></pre>\n\n<p>When the array is changed, it produces events that detail the changes\nin the list. They are listed in the\norder they are produced for the above example:</p>\n\n<ol>\n<li><p><code>.bind( \"change\", handler(ev, attr, how, newVal, oldVal) )</code> where:</p>\n\n<ul><li>ev = {type: \"change\"}</li>\n<li>attr = \"0\"</li>\n<li>how = \"set\"</li>\n<li>newVal = \"foo\"</li>\n<li>oldVal = \"a\"</li></ul></li>\n<li><p><code>.bind( \"set\", handler(ev, newVal, index) )</code> where:</p>\n\n<ul><li>ev = {type: \"set\"}</li>\n<li>newVal = \"foo\"</li>\n<li>index = 0</li></ul></li>\n<li><p><code>.bind( \"change\", handler(ev, attr, how, newVal, oldVal) )</code> where:</p>\n\n<ul><li>ev = {type: \"change\"}</li>\n<li>attr = \"1\"</li>\n<li>how = \"remove\"</li>\n<li>newVal = undefined</li>\n<li>oldVal = [\"b\",\"c\"]</li></ul></li>\n<li><p><code>.bind( \"remove\", handler(ev, newVal, index) )</code> where:</p>\n\n<ul><li>ev = {type: \"remove\"}</li>\n<li>newVal = undefined</li>\n<li>index = 1</li></ul></li>\n<li><p><code>.bind( \"length\", handler(ev, length) )</code> where:</p>\n\n<ul><li>ev = {type: \"length\"}</li>\n<li>length = 1</li></ul></li>\n</ol>\n\n<p>In general, it is possible to listen to events and reproduce the\nchanges in a facsimile of the list.  This is useful for implementing \nhigh-performance widgets that need to reflect the contents of the list without\nredrawing the entire list.  Here's an example of how that would look:</p>\n\n<pre><code>list.bind(\"set\", function(ev, newVal, index){\n     // update the item at index with newVal\n}).bind(\"remove\", function(ev, oldVals, index){\n     // remove oldVals.length items at index\n}).bind(\"add\", function(ev, newVals, index){\n  // insert newVals at index\n})\n</code></pre>\n\n<p><code>attr( array )</code> merges items into the beginning of the array.  For example:</p>\n\n<pre><code>list = new can.Observe.List([\"a\",\"b\"])\nlist.attr([\"foo\"])\n\nlist.attr() //-&gt; [\"foo\",\"b\"]\n</code></pre>\n\n<p><code>attr( INDEX, VALUE )</code> sets or updates an item at <code>INDEX</code>.  Example:</p>\n\n<pre><code>list.attr(0, \"ITEM\")\n</code></pre>\n\n<h2>Reading Properties</h2>\n\n<p><code>attr()</code> returns the lists content as an array.  For example:</p>\n\n<pre><code> list = new can.Observe.List([\"a\", {foo: \"bar\"}])\n list.attr()  //-&gt; [\"a\", {foo: \"bar\"}]\n</code></pre>\n\n<p><code>attr( INDEX )</code> reads a property at <code>INDEX</code> like:</p>\n\n<pre><code> list = new can.Observe.List([\"a\", {foo: \"bar\"}])\n list.attr(0)  //-&gt; \"a\",\n</code></pre>", "src": {"query": "", "fragment": "", "path": "can/observe/observe.js", "dir": {"prototype": {}}, "filename": {"prototype": {}}, "ext": {"prototype": {}}, "domain": {"prototype": {}}, "isCrossDomain": {"prototype": {}}, "isRelativeToDomain": {"prototype": {}}, "hash": {"prototype": {}}, "search": {"prototype": {}}, "add": {"prototype": {}}, "join": {"prototype": {}}, "normalize": {"prototype": {}}, "isRelative": {"prototype": {}}, "pathTo": {"prototype": {}}, "mapJoin": {"prototype": {}}, "addJS": {"prototype": {}}, "toString": {"prototype": {}}, "insertMapping": {"prototype": {}}}, "line": 1168, "children": []})