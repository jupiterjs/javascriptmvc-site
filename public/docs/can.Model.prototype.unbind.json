c({"name": "can.Model.prototype.unbind", "params": {"eventName": {"description": "<p>The type of event.  </p>", "type": "String", "optional": false, "order": 0, "name": "eventName"}, "handler(event,args...)": {"order": 1, "description": "<p>A callback function\nthat was passed to <code>bind</code>.</p>", "name": "handler(event,args...)", "type": "Function", "optional": false}}, "ret": {"description": "<p>the model instance.</p>", "type": "model"}, "type": "function", "parents": ["can.Model.prototype"], "comment": "<p><code>unbind(eventName, handler)</code> removes a listener\nattached with [can.Model::bind].</p>\n\n<pre><code>var handler = function(ev, createdTask){\n\n}\ntask.bind(\"created\", handler)\ntask.unbind(\"created\", handler)\n</code></pre>\n\n<p>You have to pass the same function to <code>unbind</code> that you\npassed to <code>bind</code>.</p>\n\n<p>Unbind will also remove the instance from the store\nif there are no other listeners.</p>", "src": {"query": "", "fragment": "", "path": "can/model/model.js", "dir": {"prototype": {}}, "filename": {"prototype": {}}, "ext": {"prototype": {}}, "domain": {"prototype": {}}, "isCrossDomain": {"prototype": {}}, "isRelativeToDomain": {"prototype": {}}, "hash": {"prototype": {}}, "search": {"prototype": {}}, "add": {"prototype": {}}, "join": {"prototype": {}}, "normalize": {"prototype": {}}, "isRelative": {"prototype": {}}, "pathTo": {"prototype": {}}, "mapJoin": {"prototype": {}}, "addJS": {"prototype": {}}, "toString": {"prototype": {}}, "insertMapping": {"prototype": {}}}, "line": 1021, "children": []})