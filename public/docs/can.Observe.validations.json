c({"name": "can.Observe.validations", "children": ["can.Observe.static.validate", "can.Observe.static.validationMessages", "can.Observe.static.validateFormatOf", "can.Observe.static.validateInclusionOf", "can.Observe.static.validateLengthOf", "can.Observe.static.validatePresenceOf", "can.Observe.static.validateRangeOf", "can.Observe.prototype.errors"], "type": "page", "comment": "<p>The <code>can/observe/validations</code> plugin provides validations on observes. Validations\nare s on [can.Observe]'s <strong>static</strong> <code>init</code> function.</p>\n\n<p>The following validates the <code>birthday</code> attribute in Contacts:</p>\n\n<pre><code>Contact = can.Observe({\n    init : function(){\n        // validates that birthday is in the future\n        this.validate(\"birthday\",function(birthday){\n            if(birthday &gt; new Date){\n                return \"your birthday needs to be in the past\"\n            }\n        })\n    }\n},{});\n\nvar contact = new Contact({birthday: new Date(2012,0) })\n</code></pre>\n\n<p>Use [can.Observe::errors errors] <code>( [attrs...], newVal )</code> to read errors\nor to test if setting a value would create an error:</p>\n\n<pre><code>// Check if there are errors on the instance\ncontact.errors() //-&gt; null - there are no errors\n\n// Test if setting birthday to new Date(3013,0) would error\ncontact.errros(\"birthday\", \n               new Date(3013,0) ) \n               //-&gt; [\"your birthday needs to be in the past\"] \n\n// Set birthday anyway\ncontact.attr(\"birthday\", new Date(3013,0) )\n\n// Get all errors\ncontact.errors() \n    //-&gt; {\n    //     birthday: [\"your birthday needs to be in the past\"]\n    //   }\n\n// Get errors for birthday\ncontact.errors(\"birthday\") \n    //-&gt; [\"your birthday needs to be in the past\"]\n</code></pre>\n\n<h2>Validation Methods</h2>\n\n<p>The most basic validate method is [can.Observe.validate validate]<code>()</code>.  </p>\n\n<p>There are several built-in validation methods so you don't have to define your own in all cases like in the birthday example above.</p>\n\n<ul>\n<li>[can.Observe.validate]<code>(attrNames, options, proc)</code> Attributes validated with function.</li>\n<li>[can.Observe.validateFormatOf]<code>(attrNames, regexp, options)</code> Attributes match the regular expression.    </li>\n<li>[can.Observe.validateInclusionOf]<code>( attrNames, inArray, [options] )</code> Attributes are available in a particular array.    </li>\n<li>[can.Observe.validateLengthOf validateLengthOf]<code>(attrNames, min, max, [options])</code> Attributes' lengths are in the given range.    </li>\n<li>[can.Observe.validatePresenceOf validatePresenceOf]<code>( attrNames, [options] )</code> Attributes are not blank.    </li>\n<li>[can.Observe.validateRangeOf validateRangeOf]<code>(attrNames, low, hi, [options])</code> Attributes are in the given numeric range.</li>\n</ul>\n\n<h2>Error Method</h2>\n\n<p><a href=\"\">can.Observe::errors</a> runs the validations on this model. You can also pass it an array \nof attributes to run only those attributes. It returns \nnothing if there are no errors, or an object of errors by attribute.</p>\n\n<p>To use validations, it's required you use the <em>observe/validations</em> plugin.</p>\n\n<pre><code>can.Observe(\"Task\",{\n    init : function(){\n        this.validatePresenceOf(\"dueDate\")\n    }\n},{});\n\nvar task = new Task(),\n    errors = task.errors()\n\nerrors.dueDate[0] //-&gt; \"can't be empty\"\n</code></pre>\n\n<h2>Listening to events</h2>\n\n<p>Use [can.Observe::bind bind] to listen to error messages:</p>\n\n<pre><code>contact.bind(\"error\", function(ev, attr, errors){\n    // attr = \"birthday\"\n    // errors = { birthday: \n    //      [\"your birthday needs to be in the past\"] }\n})\n</code></pre>\n\n<h2>Demo</h2>\n\n<p>Click a person's name to update their birthday.  If you put the date\nin the future, say the year 2525, it will report back an error.</p>\n\n<div class='demo_wrapper' data-demo-src='can/observe/validations/validations.html'></div>", "parents": ["can.Observe"], "plugin": "can/observe/validations", "download": "http://donejs.com/can/dist/can.observe.validations.js", "test": "can/observe/validations/qunit.html", "src": "can/observe/validations/validations.md"})