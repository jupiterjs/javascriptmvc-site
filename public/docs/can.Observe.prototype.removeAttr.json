c({"name": "can.Observe.prototype.removeAttr", "params": {"attr": {"description": "<p>the attribute name to remove.</p>", "type": "String", "optional": false, "order": 0, "name": "attr"}}, "ret": {"description": "<p>the value that was removed.</p>", "type": "Object"}, "type": "function", "parents": ["can.Observe.prototype"], "comment": "<p>Removes a property by name from an observe.</p>\n\n<pre><code>o =  new can.Observe({ foo: 'bar' });\no.removeAttr('foo'); //-&gt; 'bar'\n</code></pre>\n\n<p>This creates a <code>'remove'</code> change event. Learn more about events\nin [can.Observe.prototype.bind bind] and [can.Observe.prototype.delegate delegate].</p>", "src": {"query": "", "fragment": "", "path": "can/observe/observe.js", "dir": {"prototype": {}}, "filename": {"prototype": {}}, "ext": {"prototype": {}}, "domain": {"prototype": {}}, "isCrossDomain": {"prototype": {}}, "isRelativeToDomain": {"prototype": {}}, "hash": {"prototype": {}}, "search": {"prototype": {}}, "add": {"prototype": {}}, "join": {"prototype": {}}, "normalize": {"prototype": {}}, "isRelative": {"prototype": {}}, "pathTo": {"prototype": {}}, "mapJoin": {"prototype": {}}, "addJS": {"prototype": {}}, "toString": {"prototype": {}}, "insertMapping": {"prototype": {}}}, "line": 547, "children": []})