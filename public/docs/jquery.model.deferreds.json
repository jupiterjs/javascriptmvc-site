c({"name": "jquery.model.deferreds", "type": "page", "comment": "<p>Models (and views) work \nwith [http://api.jquery.com/category/deferred-object/ jQuery.Deferred]. If\nyou properly fill out a model's [jquery.model.services service API], asynchronous\nrequests done via the model will return a jQuery.Deferred.</p>\n\n<h2>findAll example</h2>\n\n<p>The following example, requests tasks and people and waits for both requests\nto be complete before alerting the user:</p>\n\n<pre><code>var tasksDef = Task.findAll(),\n    peopleDef = People.findAll();\n\n$.when(tasksDef,peopleDef).done(function(taskResponse, peopleResponse){\n  alert(\"There are \"+taskRespone[0].length+\" tasks and \"+\n        peopleResponse[0].length+\" people.\");\n});\n</code></pre>\n\n<p><strong>Note</strong> taskResponse[0] is an Array of tasks.  </p>\n\n<h2>save and destroy example</h2>\n\n<p>Calls to [jQuery.Model.prototype.save save] and [jQuery.Model.prototype.destroy] also\nreturn a deferred.  The deferred is resolved to the newly created, destroyed, or updated\nmodel instance.</p>\n\n<p>The following creates a task, updates it, and destroys it:</p>\n\n<pre><code>var taskD = new Task({name: \"dishes\"}).save();\n\ntaskD.done(function(task){\n\n  var taskD2 = task.update({name: \"all the dishes\"})\n\n  taskD2.done(function(task){\n\n     var taskD3 = task.destroy();\n\n     taskD3.done(function(){\n       console.log(\"task destroyed\");\n     })\n\n  })\n\n});\n</code></pre>\n\n<p>Models (and views) work \nwith [http://api.jquery.com/category/deferred-object/ jQuery.Deferred]. If\nyou properly fill out a model's [jquery.model.services service API], asynchronous\nrequests done via the model will return a jQuery.Deferred.</p>\n\n<h2>findAll example</h2>\n\n<p>The following example, requests tasks and people and waits for both requests\nto be complete before alerting the user:</p>\n\n<pre><code>var tasksDef = Task.findAll(),\n    peopleDef = People.findAll();\n\n$.when(tasksDef,peopleDef).done(function(taskResponse, peopleResponse){\n  alert(\"There are \"+taskRespone[0].length+\" tasks and \"+\n        peopleResponse[0].length+\" people.\");\n});\n</code></pre>\n\n<p><strong>Note</strong> taskResponse[0] is an Array of tasks.  </p>\n\n<h2>save and destroy example</h2>\n\n<p>Calls to [jQuery.Model.prototype.save save] and [jQuery.Model.prototype.destroy] also\nreturn a deferred.  The deferred is resolved to the newly created, destroyed, or updated\nmodel instance.</p>\n\n<p>The following creates a task, updates it, and destroys it:</p>\n\n<pre><code>var taskD = new Task({name: \"dishes\"}).save();\n\ntaskD.done(function(task){\n\n  var taskD2 = task.update({name: \"all the dishes\"})\n\n  taskD2.done(function(task){\n\n     var taskD3 = task.destroy();\n\n     taskD3.done(function(){\n       console.log(\"task destroyed\");\n     })\n\n  })\n\n});\n</code></pre>", "title": "Deferreds", "parents": ["jQuery.Model", "jQuery.Model"], "src": "can/model/pages/deferreds.md", "children": []})