c({"name": "can.extend", "type": "function", "comment": "<p><code>can.extend(target, objectN)</code> merges the contents of two or more objects together into the first object\nsimilarly to [http://api.jquery.com/jQuery.extend/ jQuery.extend].</p>\n\n<pre><code>var first = {},\n    second = {a: \"b\"},\n    thrid = {c: \"d\"};\n\ncan.extend(first, second, third); //-&gt; first\n\nfirst  //-&gt; {a: \"b\",c : \"d\"}\nsecond //-&gt; {a: \"b\"}\nthrid  //-&gt; {c: \"d\"}\n</code></pre>", "parents": ["can.util"], "params": {"target": {"order": 0, "description": "<p>The target object to extend</p>", "name": "target", "type": "Object", "optional": false}, "object1": {"order": 1, "description": "<p>An object containing properties to merge</p>", "name": "object1", "type": "Object", "optional": true}, "objectN": {"order": 2, "description": "<p>Additional objects containing properties to merge</p>", "name": "objectN", "type": "Object", "optional": true}}, "ret": {"description": "<p>The target object</p>", "type": "Object"}, "src": {"query": "", "fragment": "", "path": "can/util/can.js", "dir": {"prototype": {}}, "filename": {"prototype": {}}, "ext": {"prototype": {}}, "domain": {"prototype": {}}, "isCrossDomain": {"prototype": {}}, "isRelativeToDomain": {"prototype": {}}, "hash": {"prototype": {}}, "search": {"prototype": {}}, "add": {"prototype": {}}, "join": {"prototype": {}}, "normalize": {"prototype": {}}, "isRelative": {"prototype": {}}, "pathTo": {"prototype": {}}, "mapJoin": {"prototype": {}}, "addJS": {"prototype": {}}, "toString": {"prototype": {}}, "insertMapping": {"prototype": {}}}, "line": 76, "children": []})