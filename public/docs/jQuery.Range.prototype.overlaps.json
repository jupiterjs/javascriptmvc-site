c({"name": "jQuery.Range.prototype.overlaps", "type": "attribute", "parents": ["jQuery.Range.prototype"], "comment": "<p><code>range.overlaps([elRange])</code> returns <code>true</code> if any portion of these two ranges overlap.</p>\n\n<pre><code>var foo = document.getElementById('foo');\n\n$.Range(foo.childNodes[0]).overlaps(foo.childNodes[1]) //-&gt; false\n</code></pre>", "params": {"elRange": {"order": 0, "description": "<p>The range to compare</p>", "name": "elRange", "type": "jQuery.Range", "optional": false}}, "ret": {"description": "<p>true if part of the ranges overlap, false if otherwise.</p>", "type": "Boolean"}, "src": {"query": "", "fragment": "", "path": "jquery/dom/range/range.js", "dir": {"prototype": {}}, "filename": {"prototype": {}}, "ext": {"prototype": {}}, "domain": {"prototype": {}}, "isCrossDomain": {"prototype": {}}, "isRelativeToDomain": {"prototype": {}}, "hash": {"prototype": {}}, "search": {"prototype": {}}, "add": {"prototype": {}}, "join": {"prototype": {}}, "normalize": {"prototype": {}}, "isRelative": {"prototype": {}}, "pathTo": {"prototype": {}}, "mapJoin": {"prototype": {}}, "addJS": {"prototype": {}}, "toString": {"prototype": {}}, "insertMapping": {"prototype": {}}}, "line": 209, "children": []})