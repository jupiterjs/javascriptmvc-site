c({"name": "can.view.register", "params": {"info": {"description": "<p>a object of method and properties </p>\n\n<p>that enable template integration:</p>\n\n<ul>\n  <li>plugin - the location of the plugin.  EX: 'jquery/view/ejs'</li>\n  <li>suffix - the view extension.  EX: 'ejs'</li>\n  <li>script(id, src) - a function that returns a string that when evaluated returns a function that can be \n   used as the render (i.e. have func.call(data, data, helpers) called on it).</li>\n  <li>renderer(id, text) - a function that takes the id of the template and the text of the template and\n   returns a render function.</li>\n</ul>", "type": "Object", "optional": false, "order": 0, "name": "info"}}, "ret": {"type": "undefined", "description": ""}, "type": "function", "parents": ["can.view"], "comment": "<p>Registers a template engine to be used with \nview helpers and compression.  </p>\n\n<h2>Example</h2>\n\n<p><pre><code class='javascript'>can.View.register({\n    suffix : \"tmpl\",\n plugin : \"jquery/view/tmpl\",\n    renderer: function( id, text ) {\n        return function(data){\n            return jQuery.render( text, data );\n        }\n    },\n    script: function( id, text ) {\n        var tmpl = can.tmpl(text).toString();\n        return \"function(data){return (\"+\n            tmpl+\n            \").call(jQuery, jQuery, data); }\";\n    }\n})</code></pre>Here's what each property does:</p>\n\n<ul>\n<li>plugin - the location of the plugin</li>\n<li>suffix - files that use this suffix will be processed by this template engine</li>\n<li>renderer - returns a function that will render the template provided by text</li>\n<li>script - returns a string form of the processed template function.</li>\n</ul>", "src": {"query": "", "fragment": "", "path": "can/view/view.js", "dir": {"prototype": {}}, "filename": {"prototype": {}}, "ext": {"prototype": {}}, "domain": {"prototype": {}}, "isCrossDomain": {"prototype": {}}, "isRelativeToDomain": {"prototype": {}}, "hash": {"prototype": {}}, "search": {"prototype": {}}, "add": {"prototype": {}}, "join": {"prototype": {}}, "normalize": {"prototype": {}}, "isRelative": {"prototype": {}}, "pathTo": {"prototype": {}}, "mapJoin": {"prototype": {}}, "addJS": {"prototype": {}}, "toString": {"prototype": {}}, "insertMapping": {"prototype": {}}}, "line": 207, "children": []})