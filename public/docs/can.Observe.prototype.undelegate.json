c({"name": "can.Observe.prototype.undelegate", "params": {"selector": {"description": "<p>the attribute name of the object you want to undelegate from.</p>", "type": "String", "optional": false, "order": 0, "name": "selector"}, "event": {"description": "<p>the event name</p>", "type": "String", "optional": false, "order": 1, "name": "event"}, "handler": {"description": "<p>the callback handler</p>", "type": "Function", "optional": false, "order": 2, "name": "handler"}}, "ret": {"description": "<p>the delegate for chaining</p>", "type": "jQuery.Delegate"}, "type": "function", "comment": "<p><code>undelegate( selector, event, handler )</code> removes a delegated event handler from an observe.</p>\n\n<pre><code>observe.undelegate(\"name\",\"set\", handler )\n</code></pre>", "parents": ["can.Observe.delegate"], "src": {"query": "", "fragment": "", "path": "can/observe/delegate/delegate.js", "dir": {"prototype": {}}, "filename": {"prototype": {}}, "ext": {"prototype": {}}, "domain": {"prototype": {}}, "isCrossDomain": {"prototype": {}}, "isRelativeToDomain": {"prototype": {}}, "hash": {"prototype": {}}, "search": {"prototype": {}}, "add": {"prototype": {}}, "join": {"prototype": {}}, "normalize": {"prototype": {}}, "isRelative": {"prototype": {}}, "pathTo": {"prototype": {}}, "mapJoin": {"prototype": {}}, "addJS": {"prototype": {}}, "toString": {"prototype": {}}, "insertMapping": {"prototype": {}}}, "line": 327, "children": []})