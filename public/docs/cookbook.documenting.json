c({"name": "cookbook.documenting", "type": "page", "comment": "<p>Documentation is a critical step in creating maintainable code. \nIt's often burdensome on developers and \nbecomes neglected. JavaScriptMVC's integrates [DocumentJS] to make\nit easy to document your code. </p>\n\n<h2>Generating Documentation</h2>\n\n<p>Create the docs by running:</p>\n\n<pre><code>&gt; ./js cookbook/scripts/docs.js\n</code></pre>\n\n<h2>Viewing Documentation</h2>\n\n<p>Open <strong>cookbook/docs.html</strong> and you'll find something like:</p>\n\n<p><img class='image_tag' src='tutorials/getstarted/Docs.png' /></p>\n\n<h2>Writing Documentation</h2>\n\n<p>The generated app comes with very minimal docs.  But, it \ngives you a great place to \nstart.  Open <strong>cookbook/cookbook.md</strong>. This is the top level\npage for the cookbook application.  Notice that it's markdown!</p>\n\n<p>The syntax for documentation is very similar to JavaDoc.  However, there are some \nimportant differences.  Consult the [DocumentJS DocumentJS's documentation]\nfor more information.</p>\n\n<h2>Next steps</h2>\n\n<p>In the context of this trivial application, you've \nbeen exposed to major features of JavaScriptMVC: </p>\n\n<ul>\n<li>code separation</li>\n<li>testing</li>\n<li>building</li>\n<li>documentation</li>\n</ul>\n\n<p>This is pretty cool! Look at how simply you went from \nnothing to a compressed, tested, and documented application.</p>", "title": "Documenting Cookbook", "parents": ["getstarted"], "order": 3, "src": "tutorials/getstarted/documenting.md", "children": []})