c({"name": "can.Observe.List.prototype.push", "type": "function", "parents": ["can.Observe.List.prototype"], "comment": "<p>Add items to the end of the list.</p>\n\n<pre><code>var list = new can.Observe.List([]);\n\nlist.attr() // -&gt; []\n\nlist.bind('change', function( \n    ev,        // the change event\n    attr,      // the attr that was changed,\n               // for multiple items, \"*\" is used \n    how,       // \"add\"\n    newVals,   // an array of new values pushed\n    oldVals,   // undefined\n    where      // the location where these items were added\n    ) {\n\n})\n\nlist.push('0','1','2'); \nlist.attr() // -&gt; ['0', '1', '2']\n</code></pre>", "ret": {"description": "<p>the number of items in the array</p>", "type": "Number"}, "src": {"query": "", "fragment": "", "path": "can/observe/observe.js", "dir": {"prototype": {}}, "filename": {"prototype": {}}, "ext": {"prototype": {}}, "domain": {"prototype": {}}, "isCrossDomain": {"prototype": {}}, "isRelativeToDomain": {"prototype": {}}, "hash": {"prototype": {}}, "search": {"prototype": {}}, "add": {"prototype": {}}, "join": {"prototype": {}}, "normalize": {"prototype": {}}, "isRelative": {"prototype": {}}, "pathTo": {"prototype": {}}, "mapJoin": {"prototype": {}}, "addJS": {"prototype": {}}, "toString": {"prototype": {}}, "insertMapping": {"prototype": {}}}, "line": 1324, "children": []})