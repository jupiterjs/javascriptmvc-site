c({"name": "can.Construct.static.newInstance", "params": {"args": {"order": 0, "description": "<p>arguments that get passed to [can.Construct::setup] and [can.Construct::init]. Note\nthat if [can.Construct::setup] returns an array, those arguments will be passed to [can.Construct::init]\ninstead.</p>", "name": "args", "type": "Object", "optional": true}}, "ret": {"description": "<p>instance of the class</p>", "type": "class"}, "type": "function", "parents": ["can.Construct.static"], "comment": "<p>Creates a new instance of the constructor function.  This method is useful for creating new instances\nwith arbitrary parameters.  Typically you want to simply use the <strong>new</strong> operator instead.</p>\n\n<h2>Example</h2>\n\n<p>The following creates a <code>Person</code> Construct and then creates a new instance of person, but\nby using <code>apply</code> on newInstance to pass arbitrary parameters.</p>\n\n<pre><code>var Person = can.Construct({\n  init : function(first, middle, last) {\n    this.first = first;\n    this.middle = middle;\n    this.last = last;\n  }\n});\n\nvar args = [\"Justin\",\"Barry\",\"Meyer\"],\n    justin = new Person.newInstance.apply(null, args);\n</code></pre>", "src": {"query": "", "fragment": "", "path": "can/construct/construct.js", "dir": {"prototype": {}}, "filename": {"prototype": {}}, "ext": {"prototype": {}}, "domain": {"prototype": {}}, "isCrossDomain": {"prototype": {}}, "isRelativeToDomain": {"prototype": {}}, "hash": {"prototype": {}}, "search": {"prototype": {}}, "add": {"prototype": {}}, "join": {"prototype": {}}, "normalize": {"prototype": {}}, "isRelative": {"prototype": {}}, "pathTo": {"prototype": {}}, "mapJoin": {"prototype": {}}, "addJS": {"prototype": {}}, "toString": {"prototype": {}}, "insertMapping": {"prototype": {}}}, "line": 26, "children": []})