c({"name": "jQuery.fn.formParams", "type": "function", "comment": "<p>Returns a JavaScript object for values in a form.\nIt creates nested objects by using bracket notation in the form element name.</p>", "parents": ["jQuery.formParams"], "plugin": "jquery/dom/form_params", "test": "jquery/dom/form_params/qunit.html", "params": {"params": {"order": 0, "description": "<p>If an object is passed, the form will be repopulated\nwith the values of the object based on the name of the inputs within\nthe form</p>", "name": "params", "type": "Object", "optional": true}, "convert": {"order": 1, "description": "<p>True if strings that look like numbers\nand booleans should be converted and if empty string should not be added\nto the result.</p>", "name": "convert", "type": "Boolean", "optional": true, "default": "false"}}, "ret": {"description": "<p>An object of name-value pairs.</p>", "type": "Object"}, "src": {"query": "", "fragment": "", "path": "jquery/dom/form_params/form_params.js", "dir": {"prototype": {}}, "filename": {"prototype": {}}, "ext": {"prototype": {}}, "domain": {"prototype": {}}, "isCrossDomain": {"prototype": {}}, "isRelativeToDomain": {"prototype": {}}, "hash": {"prototype": {}}, "search": {"prototype": {}}, "add": {"prototype": {}}, "join": {"prototype": {}}, "normalize": {"prototype": {}}, "isRelative": {"prototype": {}}, "pathTo": {"prototype": {}}, "mapJoin": {"prototype": {}}, "addJS": {"prototype": {}}, "toString": {"prototype": {}}, "insertMapping": {"prototype": {}}}, "line": 61, "children": []})