c({"name": "can.Model.static.unbind", "type": "function", "parents": ["can.Model.static"], "comment": "<p><code>unbind(eventType, handler)</code> removes a listener\nattached with [can.Model.bind].</p>\n\n<pre><code>var handler = function(ev, createdTask){\n\n}\nTask.bind(\"created\", handler)\nTask.unbind(\"created\", handler)\n</code></pre>\n\n<p>You have to pass the same function to <code>unbind</code> that you\npassed to <code>bind</code>.</p>", "params": {"eventType": {"order": 0, "description": "<p>The type of event.  It must be\n<code>\"created\"</code>, <code>\"udpated\"</code>, <code>\"destroyed\"</code>.</p>", "name": "eventType", "type": "String", "optional": false}, "handler(event,instance)": {"order": 1, "description": "<p>A callback function\nthat was passed to <code>bind</code>.</p>", "name": "handler(event,instance)", "type": "Function", "optional": false}}, "ret": {"description": "<p>the model constructor function.</p>", "type": "can.Model"}, "src": {"query": "", "fragment": "", "path": "can/model/model.js", "dir": {"prototype": {}}, "filename": {"prototype": {}}, "ext": {"prototype": {}}, "domain": {"prototype": {}}, "isCrossDomain": {"prototype": {}}, "isRelativeToDomain": {"prototype": {}}, "hash": {"prototype": {}}, "search": {"prototype": {}}, "add": {"prototype": {}}, "join": {"prototype": {}}, "normalize": {"prototype": {}}, "isRelative": {"prototype": {}}, "pathTo": {"prototype": {}}, "mapJoin": {"prototype": {}}, "addJS": {"prototype": {}}, "toString": {"prototype": {}}, "insertMapping": {"prototype": {}}}, "line": 135, "children": []})