c({"name": "jQuery.fn.control", "params": {"control": {"description": "<p>(optional) if exists the first control instance with that constructor function or type will be returned.</p>", "type": "Object", "optional": false, "order": 0, "name": "control"}}, "ret": {"description": "<p>the first control.</p>", "type": "can.Control"}, "type": "function", "comment": "<p>The <code>control</code> does the same as [jQuery.fn.controls controls] execept it only \nreturns the first instance found.</p>\n\n<pre><code>//- Init MyBox widget\n$('.widgets').my_box();\n\n&lt;div class=\"widgets my_box\" /&gt;\n\n$('.widgets').controls() //-&gt; MyBox\n</code></pre>", "parents": ["can.Control.plugin"], "src": {"query": "", "fragment": "", "path": "can/control/plugin/plugin.js", "dir": {"prototype": {}}, "filename": {"prototype": {}}, "ext": {"prototype": {}}, "domain": {"prototype": {}}, "isCrossDomain": {"prototype": {}}, "isRelativeToDomain": {"prototype": {}}, "hash": {"prototype": {}}, "search": {"prototype": {}}, "add": {"prototype": {}}, "join": {"prototype": {}}, "normalize": {"prototype": {}}, "isRelative": {"prototype": {}}, "pathTo": {"prototype": {}}, "mapJoin": {"prototype": {}}, "addJS": {"prototype": {}}, "toString": {"prototype": {}}, "insertMapping": {"prototype": {}}}, "line": 113, "children": []})