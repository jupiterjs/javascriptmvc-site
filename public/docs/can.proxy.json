c({"name": "can.proxy", "type": "function", "comment": "<p><code>can.proxy(function)</code> accepts a function and returns a \nnew one that will always the context from which it was \ncalled.  This works similar to [http://api.jquery.com/jQuery.proxy/ jQuery.proxy].</p>\n\n<pre><code> var func = can.proxy(function(one){\n   return this.a + one\n }, {a: \"b\"}); \n func(\"two\") //-&gt; \"btwo\" \n</code></pre>", "parents": ["can.util"], "params": {"function": {"order": 0, "description": "<p>to return in the same context</p>", "name": "function", "type": "Function", "optional": false}, "context": {"order": 1, "description": "<p>The context for the new function</p>", "name": "context", "type": "Object", "optional": false}}, "ret": {"description": "<p>The new function</p>", "type": "Function"}, "src": {"query": "", "fragment": "", "path": "can/util/can.js", "dir": {"prototype": {}}, "filename": {"prototype": {}}, "ext": {"prototype": {}}, "domain": {"prototype": {}}, "isCrossDomain": {"prototype": {}}, "isRelativeToDomain": {"prototype": {}}, "hash": {"prototype": {}}, "search": {"prototype": {}}, "add": {"prototype": {}}, "join": {"prototype": {}}, "normalize": {"prototype": {}}, "isRelative": {"prototype": {}}, "pathTo": {"prototype": {}}, "mapJoin": {"prototype": {}}, "addJS": {"prototype": {}}, "toString": {"prototype": {}}, "insertMapping": {"prototype": {}}}, "line": 124, "children": []})