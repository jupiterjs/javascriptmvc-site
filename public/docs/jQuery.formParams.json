c({"name": "jQuery.formParams", "children": ["jQuery.fn.formParams"], "type": "page", "comment": "<p><code>jQuery.formParams</code> adds <code>[jQuery.fn.formParams jQuery.fn.formParams(convert)]</code> which serializes a form into a JavaScript object. It creates nested objects by using bracket notation in the form element name. If <em>convert</em> is <code>true</code>, values that look like numbers or booleans will be converted and empty strings won't be added to the object. For a form like this:</p>\n\n<pre><code>&lt;form&gt;\n  &lt;input type=\"text\" name=\"first\" value=\"John\" /&gt;\n  &lt;input type=\"text\" name=\"last\" value=\"Doe\" /&gt;\n  &lt;input type=\"text\" name=\"phone[mobile]\" value=\"1234567890\" /&gt;\n  &lt;input type=\"text\" name=\"phone[home]\" value=\"0987654321\" /&gt;\n&lt;/form&gt;\n</code></pre>\n\n<p><code>jQuery.fn.formParams</code> returns:</p>\n\n<pre><code>$('form').formParams()\n// -&gt; {\n//   first : \"John\", last : \"Doe\",\n//   phone : { mobile : \"1234567890\", home : \"0987654321\" }\n// }\n</code></pre>\n\n<p>It is also possible to set form values by passing an object:</p>\n\n<pre><code>$('form').formParams({\n  first : 'Mike',\n  last : 'Smith'\n});\n</code></pre>\n\n<h2>Demo</h2>\n\n<div class='demo_wrapper' data-demo-src='jquery/dom/form_params/form_params.html'></div>", "parents": ["jquerypp"], "src": "jquery/dom/form_params/formparams.md"})