c({"name": "Partials", "type": "page", "comment": "<h1>Partials</h1>\n\n<p>Partials are templates embedded in other templates.  Partials begin with a greater than sign, like <code>{{&gt;my_partial}}</code>.  Partials inherit the calling context.  </p>\n\n<p>Partials render at runtime, so recursive partials are possible but make sure you avoid infinite loops.</p>\n\n<p>For example, this template and partial:</p>\n\n<p><strong>base.mustache</strong></p>\n\n<pre><code>&lt;h2&gt;Names&lt;/h2&gt;\n{{#names}}\n    {{&gt;user.mustache}}\n{{/names}}\n</code></pre>\n\n<p><strong>user.mustache</strong></p>\n\n<pre><code>&lt;strong&gt;{{name}}&lt;/strong&gt;\n</code></pre>\n\n<p>The resulting expanded template at render time would look like:</p>\n\n<pre><code>&lt;h2&gt;Names&lt;/h2&gt;\n{{#names}}\n    &lt;strong&gt;{{name}}&lt;/strong&gt;\n{{/names}}\n</code></pre>\n\n<h2>Acquiring Partials</h2>\n\n<p><strong>Referencing Files</strong></p>\n\n<p>Partials can reference a file path and file name in the template.</p>\n\n<p>The following template uses a relative path (relative to the current page):</p>\n\n<pre><code>&lt;script id=\"template\" type=\"text/mustache\"&gt;\n    {{&gt;views/test_template.mustache}}\n&lt;/script&gt;\n</code></pre>\n\n<p>The following template uses an absolute path (rooted to steal's root directory):</p>\n\n<pre><code>&lt;script id=\"template\" type=\"text/mustache\"&gt;\n    {{&gt;//myapp/accordion/views/test_template.mustache}}\n&lt;/script&gt;\n</code></pre>\n\n<p><strong>Referencing by ID</strong></p>\n\n<p>Partials can reference templates that exist in script tags on the page by \nreferencing the <code>id</code> of the partial in the template.  For example:</p>\n\n<pre><code>&lt;script id=\"mytemplate\" type=\"text/mustache\"&gt;\n    {{&gt;mypartial}}\n&lt;/script&gt;\n\n&lt;script id=\"mypartial\" type=\"text/mustache\"&gt;\n</code></pre>\n\n<p>       I am a partial.\n    </script></p>\n\n<pre><code>var template = can.view(\"#mytemplate\", {});\n</code></pre>\n\n<p><strong>Manually Registering</strong></p>\n\n<p>Partials can be manually registered by calling <code>can.view.registerView</code> \nand passing an identifier and content.  For example:</p>\n\n<pre><code>can.view.registerView('myTemplate', \"My body lies over {{.}}\")\n</code></pre>\n\n<p>in the template, you reference the template by the identifer you registered:</p>\n\n<pre><code>{{&gt;myTemplate}}\n</code></pre>\n\n<p>resulting in the template rendering with the current context applied to the partial.</p>\n\n<h2>Passing Partials in Options</h2>\n\n<p>Partials can resolve the context object that contain partial identifiers in them.\nFor example:</p>\n\n<pre><code>var template = can.view(\"#template\", { \n    items: []\n    itemsTemplate: \"test_template.mustache\" \n});\n\ncan.$(document.body).append(template);\n</code></pre>\n\n<p>then reference the partial in the template just like:</p>\n\n<pre><code>&lt;ul&gt;\n{{#items}}\n    &lt;li&gt;{{&gt;itemsTemplate}}&lt;/li&gt;\n{{/items}}\n&lt;/ul&gt;\n</code></pre>", "parents": ["can.Mustache"], "order": 2, "src": "can/view/mustache/doc/partials.md", "children": []})