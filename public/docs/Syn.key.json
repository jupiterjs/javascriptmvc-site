c({"name": "Syn.key", "params": {"options": {"description": "", "type": "String", "optional": false, "order": 0, "name": "options"}, "element": {"description": "", "type": "HTMLElement", "optional": true, "order": 1, "name": "element"}, "callback": {"description": "", "type": "Function", "optional": true, "order": 2, "name": "callback"}}, "ret": {"description": "<p>the element currently focused.</p>", "type": "HTMLElement"}, "type": "function", "parents": ["Syn"], "comment": "<p>Types a single key.  The key should be\na string that matches a \n[Syn.static.keycodes].</p>\n\n<p>The following sends a carridge return\nto the 'name' element.</p>\n\n<p><pre><code class='javascript'>Syn.key('\\r','name')</code></pre>For each character, a keydown, keypress, and keyup is triggered if\nappropriate.</p>", "src": {"query": "", "fragment": "", "path": "funcunit/syn/key.js", "dir": {"prototype": {}}, "filename": {"prototype": {}}, "ext": {"prototype": {}}, "domain": {"prototype": {}}, "isCrossDomain": {"prototype": {}}, "isRelativeToDomain": {"prototype": {}}, "hash": {"prototype": {}}, "search": {"prototype": {}}, "add": {"prototype": {}}, "join": {"prototype": {}}, "normalize": {"prototype": {}}, "isRelative": {"prototype": {}}, "pathTo": {"prototype": {}}, "mapJoin": {"prototype": {}}, "addJS": {"prototype": {}}, "toString": {"prototype": {}}, "insertMapping": {"prototype": {}}}, "line": 718, "children": []})