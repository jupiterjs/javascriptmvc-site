c({"name": "steal.build.js.makePackage", "params": {"moduleOptions": {"description": "<p>like:</p>\n\n<pre><code>[{id: \"jquery/jquery.js\", text: \"var a;\", baseType: \"js\"}]\n</code></pre>\n\n<p>Each moduleOption should have:</p>\n\n<ul>\n<li>id - the moduleId</li>\n<li>text - the JS or CSS text of the module</li>\n<li>baseType - either \"css\" or \"js\" </li>\n</ul>", "type": "Array", "optional": false, "order": 0, "name": "moduleOptions"}, "dependencies": {"description": "<p>An object of dependency moduleIds mapped\nto the moduleIds of the modules they contain:</p>\n\n<pre><code> {\"package/package.js\": ['jquery/jquery.js']}\n</code></pre>\n\n<p>The package being created will wait until all dependencies in this\nobject have been [steal.Module.states].</p>", "type": "Object", "optional": false, "order": 1, "name": "dependencies"}, "cssPackage": {"description": "<p>the css package name, added as dependency if\nthere is css in files.</p>", "type": "String", "optional": false, "order": 2, "name": "cssPackage"}, "buildOptions": {"description": "<p>An object that indicates certain behavior\npatterns.  For example:</p>\n\n<pre><code>{\n  exclude: [\"jquery/jquery.js\"],\n  stealOwnModules: true\n}\n</code></pre>\n\n<p>Supported options are:</p>\n\n<ul>\n<li>exclude - exclude these modules from any build</li>\n<li>stealOwnModules - if the package should steal the modules it contains.</li>\n</ul>", "type": "Array", "optional": false, "order": 3, "name": "buildOptions"}}, "ret": {"description": "<p>an object with the css and js \ncode that make up this package unminified</p>\n\n<pre><code>{\n  js: \"steal.has('plugin1','plugin2', ... )\"+\n      \"steal({src: 'package/package.js', has: ['jquery/jquery.js']})\"+\n      \"plugin1 content\"+\n      \"steal.executed('plugin1')\",\n  css : \"concated css content\"\n}\n</code></pre>", "type": "Object"}, "type": "function", "parents": ["steal.build.js"], "comment": "<p><code>steal.build.js.makePackage(moduleOptions, dependencies, cssPackage, buildOptions)</code>\ncreates JavaScript and CSS packages. For example:</p>\n\n<pre><code>steal.build.js.makePackage( [\n   { buildType : \"js\", id : \"a.js\", text: \"a\" },\n   { buildType : \"js\", id : \"b.js\", text: \"b\" },\n   { buildType : \"css\", id : \"c.css\", text: \"c\" }\n  ],\n  { \"package/1.js\" : [\"jquery/jquery.js\"] },\n  \"package/css.css\",\n  {stealOwnModules: true}\n)\n</code></pre>\n\n<p>... produces an object with minified js that looks like the following\nunminified source:</p>\n\n<pre><code>// indicates these modules are loading\nsteal.has(\"a.js\",\"b.js\");\n\n// steal any packages this package depends on\n// waits makes them wait until the prior steal has finished\nsteal({id:\"package/1.js\",waits:true,has:[\"jquery/jquery.js\"]});\nsteal({id:\"package/css.css\",waits:true,has:[\"c.css\"]});\n\n// steal the modules required by production.js\n// so that it can be marked completed\n// at the right time\nsteal(\"a.js\",\"b.js\");\n\n// temporarily saves and empties the pending\n// queue because the content's of other files\n// will add to it and steal.excuted will clear it.\nsteal.pushPending();\n// the files and executed contexts\na;\nsteal.executed(\"a.js\");\nb;\nsteal.executed(\"b.js\");\n\n// pop production.js's pending state back into\n// the pending queue.  \n// When production.js is done loading, steal\n// will use pending as production.js's dependencies.\nsteal.popPending();\n</code></pre>", "src": {"query": "", "fragment": "", "path": "steal/build/js/js.js", "dir": {"prototype": {}}, "filename": {"prototype": {}}, "ext": {"prototype": {}}, "domain": {"prototype": {}}, "isCrossDomain": {"prototype": {}}, "isRelativeToDomain": {"prototype": {}}, "hash": {"prototype": {}}, "search": {"prototype": {}}, "add": {"prototype": {}}, "join": {"prototype": {}}, "normalize": {"prototype": {}}, "isRelative": {"prototype": {}}, "pathTo": {"prototype": {}}, "mapJoin": {"prototype": {}}, "addJS": {"prototype": {}}, "toString": {"prototype": {}}, "insertMapping": {"prototype": {}}}, "line": 12, "children": []})