c({"name": "steal", "children": ["steal.URI", "steal.config", "steal.getScriptOptions", "steal.id", "steal.idToUri", "steal.st.amdIdToUri", "steal.window.define", "steal.window.require", "steal.makeOptions", "steal.then", "steal.bind", "steal.one", "steal.unbind", "steal.has", "steal.packages"], "hasChildren": true, "src": "steal/steal.md", "line": 2156, "type": "class", "comment": "<p><code>steal(moduleIds..., definition(modules...))</code> loads scripts, css, and other\nmodules into your application.  For example:</p>\n\n<pre><code>steal('jquery','can',function($, can){\n\n})\n</code></pre>\n\n<p>To use steal effectively, there's four things\nyou need to know how to do:</p>\n\n<ul>\n<li>add steal.js to your page</li>\n<li>configure steal's behavior</li>\n<li>load modules</li>\n<li>return module values</li>\n</ul>\n\n<p>We will go into each of these in detail, but first lets\ndo the \"hello world\" of steal:</p>\n\n<h2>Quick Overview</h2>\n\n<p>To get started, here's how to create\na JS and LESS module for use in <code>myapp</code>.  Assume a folder structure like:</p>\n\n<pre><code>ROOT/\n  steal/\n    steal.js\n    ...\n  myapp/\n    myapp.js\n    myapp.less\n    mymodule.js\n    index.html\n  stealconfig.js\n</code></pre>\n\n<p><strong>0.</strong> Create <code>myapp</code>, its contents, and <code>stealconfig.js</code>.</p>\n\n<p><strong>1.</strong> Add a script tag to <strong>index.html</strong>  that \nloads <code>steal/steal.js</code> and add\nthe path to the first file to load in the query string like:</p>\n\n<pre><code>&lt;script src='../steal/steal.js?myapp/myapp.js'&gt;\n&lt;/script&gt;\n</code></pre>\n\n<p><strong>2.</strong> In <strong>stealconfig.js</strong>, configure steal to load\nthe less engine for any modules ending in <code>.less</code> like:</p>\n\n<pre><code>steal.config({\n  ext: {\n    less: \"steal/less/less.js\"\n  }\n})\n</code></pre>\n\n<p><strong>3.</strong> Add the following to <strong>mymodule.js</strong>:</p>\n\n<pre><code>steal(function(){\n  return function(element){\n    element.innerHTML = \"Hello World\"\n    element.className = \"welcome\"\n  }\n})\n</code></pre>\n\n<p><code>myapp/mymodule.js</code>'s module value is a function that\nsets an element's contents and changes its class attribute to \"welcome\".</p>\n\n<p>Add the following to <strong>myapp.less</strong>:</p>\n\n<pre><code>@dark #222222;\n.welcome {\n  color: @dark;\n}\n</code></pre>\n\n<p><code>myapp/myapp.less</code> adds a <code>.welcome</code> style to the app.</p>\n\n<p><strong>4.</strong> Add the following to <strong>myapp/myapp.js</strong>:</p>\n\n<pre><code>steal(\"./mymodule.js\",\"./myapp.less\",function(mymodule){\n  mymodule(document.body)\n})\n</code></pre>\n\n<h2>Add steal.js to your page</h2>\n\n<p>The first step to using steal is to \nadd <code>steal/steal.js</code> to your page. </p>\n\n<pre><code>&lt;script src='../public/steal/steal.js'&gt;\n&lt;/script&gt;\n</code></pre>\n\n<div class='whisper'>PRO TIP: Bottom load your scripts. It\nwill increase your application's percieved response time.</div>\n\n<p>With that, you can start stealing modules. For example,\nyou could load jQuery from a CDN in a following\nscript tag like:</p>\n\n<pre><code>&lt;script&gt;\nsteal('http://cdn.com/jquery-1.8.3.js',function(){\n\n})\n&lt;/script&gt;\n</code></pre>\n\n<p>The folder that contains the <code>steal</code> folder is\nthe [rootfolder root folder]. By default, all modules are loaded \nfrom the root folder unless they start with:</p>\n\n<ul>\n<li>\"http://\" or \"https://\" like \"http://foo.com/bar.js\"</li>\n<li>\"/\" like <code>\"/bar.js\"</code></li>\n</ul>\n\n<p>So the following would load <code>public/component.js</code>:</p>\n\n<pre><code>&lt;script&gt;\nsteal('http://cdn.com/jquery-1.8.3.js',\n  'component.js',\n  function(){\n\n})\n&lt;/script&gt;\n</code></pre>\n\n<p>Although, your HTML pages that load steal can\nexist anywhere can be served up dynamically, it's \nbest to have all your JavaScript, CSS, and other static\nresources in the [rootfolder root folder]. </p>\n\n<p>But steal allows you to configure pretty much everything as we will see ...</p>\n\n<h2>Configure steal's behavior</h2>\n\n<p>[steal.config](configOptions) allows you to \nchange the behavior of how steal loads modules. <code>steal.config</code>\nallows you to set rules that:</p>\n\n<ul>\n<li>Apply for all modules. (<em>ex: changing the location of the root folder</em>)</li>\n<li>Apply for a single moduleId. (<em>ex: 'steal/dev/dev.js' should not be added to production</em>)</li>\n<li>Apply to startup. (_ex: load <code>myapp/myapp.js</code> as the first JS module)</li>\n</ul>\n\n<p>You can find a full list of options in [steal.config steal.config's docs],\nbut the most common configuration options are:</p>\n\n<ul>\n<li><strong>startFile</strong> - the first moduleId to load. Example: <code>\"myapp/myapp.js\"</code>.</li>\n<li><strong>env</strong> - the environment the page is \nrunning in: <code>\"development\"</code> or <code>\"production\"</code>. By default, env is development.</li>\n</ul>\n\n<p>For any application that you intend to [steal.build build], \n<code>startFile</code> and <strong>env</strong> need to be set.</p>\n\n<p>You can set configOptions in a variety ways:</p>\n\n<p><strong>Set startFile and env in the script tag</strong></p>\n\n<p>You can set startFile and env the queryparams of steal like:</p>\n\n<pre><code>&lt;script src='../steal/steal.js?STARTFILE,ENV'&gt;\n&lt;/script&gt;\n</code></pre>\n\n<p>For example:</p>\n\n<pre><code>&lt;script src='../steal/steal.js?cookbook,production'&gt;\n&lt;/script&gt;\n</code></pre>\n\n<p>If you load <code>steal/steal.production.js</code> the environment defaults\nto production:</p>\n\n<pre><code>&lt;script src='../steal/steal.production.js?cookbook'&gt;\n&lt;/script&gt;\n</code></pre>\n\n<p><strong>Call <code>steal.config(stealConfig)</code></strong></p>\n\n<p>After <code>steal.js</code> is loaded and run, you can call steal.config\nanywhere in the application.  However, after <code>steal.js</code> loads,\nit automatically loads <code>stealconfig.js</code> before it loads \nanything else. <code>stealconfig.js</code> is the best place to \nconfigure settings that should be applied to all \nprojects.</p>\n\n<p><strong>A <code>steal</code> object that exists before <code>steal.js</code> is loaded</strong></p>\n\n<p>If a <code>steal</code> object exists before <code>steal.js</code> is loaded,\nsteal will internally call <code>steal.config</code> with that \nobject.  For example:</p>\n\n<pre><code>&lt;script&gt;\nsteal = {\n  executed: \"myapp/production.css\"\n}\n&lt;/script&gt;\n&lt;script src='../steal/steal.production.js,myapp'&gt;\n&lt;/script&gt;\n</code></pre>\n\n<h2>Load modules</h2>\n\n<p>Use <code>steal(ids...)</code> to load dependent \nmodules. Ids might look like:</p>\n\n<pre><code>// in myapp/myapp.js\nsteal('components/item',\n      'person.js',\n      './view.ejs')\n</code></pre>\n\n<p>Steal uses [steal.id] to convert the id passed to steal\ninto a moduleId. It then uses [steal.idToUri] to\nconvert that moduleId into a URI to load the resource.</p>\n\n<p>The behavior of [steal.id] and [steal.idToUri] can\nbe configured by steal.config's [steal.config.map map] and \n[steal.config.paths paths] options. But the default behavior is \nas follows:</p>\n\n<ul>\n<li>\"components/item\" is found in <code>ROOT/components/item/item.js</code></li>\n<li>\"person.js\" is found in <code>ROOT/person.js</code></li>\n<li>\"./view.ejs\" is found in <code>ROOT/myapp/view.ejs</code></li>\n</ul>\n\n<p>It is possible to use:</p>\n\n<ul>\n<li>a url like: <code>\"http://cdn.com/foo.js\"</code></li>\n<li>a path relative to the domain like: <code>\"/foo.js\"</code></li>\n</ul>\n\n<p>But, we STRONGLY encourage you to use moduleId's and [steal.config]\nto adjust the lookup path for resources outside stealroot.</p>\n\n<h2>Return module values</h2>\n\n<p>After the optional list of moduleIds, you can pass steal\na \"definition\" function. For example:</p>\n\n<pre><code>// in myapp/myapp.js\nsteal('components/item',\n      'person.js',\n      './view.ejs', \n\n      function(item, Person, viewEJS){\n\n          return MODULEVALUE;\n\n      })\n</code></pre>\n\n<p>The \"definition\" function gets called with\neach dependent module's value \nand can optionally return a module value of its\nown. Your code goes in the definition function.</p>\n\n<p>If a module doesn't return a value, undefined\nis passed to the definition function.</p>", "parents": ["stealjs"], "params": {"moduleIds...": {"order": 0, "description": "<p>Each argument specifies a module. Modules can\nbe given as a:</p>\n\n<h3>Object</h3>\n\n<p>An object that specifies the loading and build\nbehavior of a resource.</p>\n\n<pre><code> steal({\n   id: \"myfile.cf\",\n   type: \"coffee\",\n   packaged: true,\n   unique: true,\n   ignore: false,\n   waits: false\n })\n</code></pre>\n\n<p>The available options are:</p>\n\n<ul>\n<li><p><strong>id</strong> {<em>String</em>} - the path to the resource.</p></li>\n<li><p><strong>waits</strong> {<em>Boolean default=false</em>} - true the resource should wait\nfor prior steals to load and run. False if the resource should load and run in\nparallel.  This defaults to true for functions.</p></li>\n<li><p><strong>unique</strong> {<em>Boolean default=true</em>} - true if this is a unique resource\nthat 'owns' this url.  This is true for files, false for functions.</p></li>\n<li><p><strong>ignore</strong> {<em>Boolean default=false</em>} - true if this resource should\nnot be built into a production file and not loaded in\nproduction.  This is great for script that should only be available\nin development mode.  This script is loaded during compression, but not\nadded to the bundled script.</p></li>\n<li><p><strong>packaged</strong> {<em>Boolean default=true</em>} - true if the script should be built\ninto the production file. false if the script should not be built\ninto the production file, but still loaded.  This is useful for\nloading 'packages'.  This script is loaded during compression, but not\nadded to the bundled script.  The difference with ignore is packaged still\nsteals this file while production mode, from an external script.</p></li>\n<li><p><strong>type</strong> {<em>String default=\"js\"</em>} - the type of the resource.  This\nis typically inferred from the src.</p></li>\n</ul>\n\n<h3><strong>String</strong></h3>\n\n<p>Specifies id of a module.  For example:</p>\n\n<pre><code>  steal('./file.js')\n</code></pre>\n\n<p>Is the same as calling:</p>\n\n<pre><code>  steal({id: './file.js'})\n</code></pre>", "name": "moduleIds...", "type": "String|Object", "optional": true}, "definition(moduleValues...)": {"order": 1, "description": "<p>A \"definition\" function that runs when all previous steals\nhave completed.</p>\n\n<pre><code>steal('jquery', 'foo',function($, foo){\n  // jquery and foo have finished loading\n  // and running\n})\n</code></pre>", "name": "definition(moduleValues...)", "type": "Function", "optional": true}}, "ret": {"description": "<p>the steal object for chaining</p>", "type": "steal"}})