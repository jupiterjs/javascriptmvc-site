c({"name": "jQuery.fn.jQuery.fn.after", "type": "function", "parents": ["can.view.modifiers", "jQuery.fn"], "comment": "<p>Extending the original [http://api.jquery.com/after/ jQuery().after()]\nto render [can.view] templates inserted after each element in the set of matched elements.</p>\n\n<pre><code>$('#test').after('path/to/template.ejs', { name : 'canjs' });\n</code></pre>", "params": {"content": {"order": 0, "description": "<p>A template filename or the id of a view script tag \nor a DOM element, array of elements, HTML string, or can object.</p>", "name": "content", "type": "String|Object|Function", "optional": false}, "data": {"order": 1, "description": "<p>The data to render the view with.\nIf rendering a view template this parameter always has to be present\n(use the empty object initializer {} for no data).</p>", "name": "data", "type": "Object", "optional": true}, "callback": {"order": 2, "description": "<p>A success callback to load the view asynchronously</p>", "name": "callback", "type": "Function", "optional": true}}, "ret": {"description": "<p>The jQuery object or a [can.Deferred] if a deferred has\nbeen passed in data.</p>", "type": "jQuery|can.Deferred"}, "src": {"query": "", "fragment": "", "path": "can/view/modifiers/modifiers.js", "dir": {"prototype": {}}, "filename": {"prototype": {}}, "ext": {"prototype": {}}, "domain": {"prototype": {}}, "isCrossDomain": {"prototype": {}}, "isRelativeToDomain": {"prototype": {}}, "hash": {"prototype": {}}, "search": {"prototype": {}}, "add": {"prototype": {}}, "join": {"prototype": {}}, "normalize": {"prototype": {}}, "isRelative": {"prototype": {}}, "pathTo": {"prototype": {}}, "mapJoin": {"prototype": {}}, "addJS": {"prototype": {}}, "toString": {"prototype": {}}, "insertMapping": {"prototype": {}}}, "line": 186, "children": []})