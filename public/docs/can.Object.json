c({"name": "can.Object", "type": "class", "comment": "<p>Object contains several helper methods that \nhelp compare objects.</p>\n\n<h2>same</h2>\n\n<p>Returns true if two objects are similar.</p>\n\n<pre><code>can.Object.same({foo: \"bar\"} , {bar: \"foo\"}) //-&gt; false\n</code></pre>\n\n<h2>subset</h2>\n\n<p>Returns true if an object is a set of another set.</p>\n\n<pre><code>can.Object.subset({}, {foo: \"bar\"} ) //-&gt; true\n</code></pre>\n\n<h2>subsets</h2>\n\n<p>Returns the subsets of an object</p>\n\n<pre><code>can.Object.subsets({userId: 20},\n                 [\n                  {userId: 20, limit: 30},\n                  {userId: 5},\n                  {}\n                 ]) \n         //-&gt;    [{userId: 20, limit: 30}]\n</code></pre>", "parents": ["can.util"], "src": {"query": "", "fragment": "", "path": "can/util/object/object.js", "dir": {"prototype": {}}, "filename": {"prototype": {}}, "ext": {"prototype": {}}, "domain": {"prototype": {}}, "isCrossDomain": {"prototype": {}}, "isRelativeToDomain": {"prototype": {}}, "hash": {"prototype": {}}, "search": {"prototype": {}}, "add": {"prototype": {}}, "join": {"prototype": {}}, "normalize": {"prototype": {}}, "isRelative": {"prototype": {}}, "pathTo": {"prototype": {}}, "mapJoin": {"prototype": {}}, "addJS": {"prototype": {}}, "toString": {"prototype": {}}, "insertMapping": {"prototype": {}}}, "line": 23, "children": ["can.Object.same", "can.Object.subsets", "can.Object.subset"]})