c({"name": "steal.build.open", "params": {"url": {"description": "<p>the html page to open</p>", "type": "String", "optional": false, "order": 0, "name": "url"}, "stealData": {"description": "<ul>\n<li>data to configure steal with</li>\n</ul>", "type": "Object", "optional": true, "order": 1, "name": "stealData"}, "includeFns": {"description": "<p>indicates that iteration should\nhappen</p>", "type": "Boolean", "optional": true, "order": 3, "name": "includeFns", "default": "true"}, "cb(opener)": {"order": 2, "description": "<ul>\n<li><p>an object with properties that makes extracting \nthe content for a certain tag slightly easier.</p>\n\n<ul><li><p>each(filter, depth, callback(options, stel)) - goes through steals loaded by this\napplication.  You can provide it a:</p>\n\n<ul><li>filter - a function to filter out some types of steal methods, \nit supports js and css.</li>\n<li>depth - if true, goes through with breadth first search, false is \nbreadth. Defaults to breadth (how steal loads scripts)</li>\n<li>callback - a method that is called with each steal option</li></ul>\n\n<p><p>opener.each(function(option){\n  console.log(option.text)\n})</p></li>\n<li><p>steal - the steal loaded by the app</p></li>\n<li>url - the html page opened</li>\n<li>rootSteal - the 'root' steal instance</li>\n<li>firstSteal - the first steal file</li></ul></p></li>\n</ul>", "name": "cb(opener)", "type": "Function", "optional": false}}, "ret": {"description": "<p>an object with properties that makes extracting \nthe content for a certain tag slightly easier.</p>", "type": "Object"}, "type": "function", "comment": "<p><code>steal.build.open(url, [stealData], cb(opener) )</code> <br />\nopens a page that typically uses steal.js. Once all\nscripts have been loaded, <code>cb</code> is called back with <code>opener</code>.\n<code>opener</code> is an object that helps walk through the modules \nloaded by steal.</p>\n\n<p>Opens a page by:</p>\n\n<ul>\n<li>temporarily deleting the rhino steal</li>\n<li>opening the page with Envjs</li>\n<li>setting back rhino steal, saving envjs's steal as steal._steal;</li>\n</ul>", "parents": ["steal.build"], "src": {"query": "", "fragment": "", "path": "steal/build/open/open.js", "dir": {"prototype": {}}, "filename": {"prototype": {}}, "ext": {"prototype": {}}, "domain": {"prototype": {}}, "isCrossDomain": {"prototype": {}}, "isRelativeToDomain": {"prototype": {}}, "hash": {"prototype": {}}, "search": {"prototype": {}}, "add": {"prototype": {}}, "join": {"prototype": {}}, "normalize": {"prototype": {}}, "isRelative": {"prototype": {}}, "pathTo": {"prototype": {}}, "mapJoin": {"prototype": {}}, "addJS": {"prototype": {}}, "toString": {"prototype": {}}, "insertMapping": {"prototype": {}}}, "line": 107, "children": []})