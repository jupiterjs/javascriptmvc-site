c({"name": "can.Observe.static.startBatch", "params": {"batchStopHandler": {"description": "<p>A callback that gets called\nafter all events have been triggered.</p>", "type": "Function", "optional": true, "order": 0, "name": "batchStopHandler"}}, "ret": {"type": "undefined", "description": ""}, "type": "function", "parents": ["can.Observe.batchEvents", "can.Observe.static"], "comment": "<p><code>can.Observe.startBatch([batchStopHandler])</code> starts a \nbatch transaction. All change events caused by\n[can.Observe::attr] will not be fired until [can.Observe.stopBatch]\nis called.  In the following example, the <code>\"first\"</code> and <code>\"change\"</code>\nevent handlers are not called until [can.Observe.stopBatch] is called:</p>\n\n<pre><code>var person = new can.Observe({\n     first: \"Alexis\",\n  last:  \"Abril\"\n});\n\nperson.bind(\"first\", function(){\n     console.log(\"first changed\")\n}).bind(\"change\", function(){\n     console.log(\"change\")\n});\n\ncan.Observe.startBatch();\nperson.attr(\"first\",\"Alex\");\n\nsetTimeout(function(){\n     can.Observe.stopBatch();\n},100);\n</code></pre>\n\n<p>Pass a callback to <code>can.Observe.startBatch</code> and it will\nbe called immediately after all events have been triggered. Example:</p>\n\n<pre><code>var date = can.compute(new Date);\ncan.Observe.startBatch(function(){\n     // after trigger\n});\n\ndate(newDate);\n\ncan.Observe.stopBatch()\n</code></pre>\n\n<p>Calling <code>can.Observe.startBatch()</code> increments a\ncounter that requires an equal number of <code>stopBatch</code>. Example:</p>\n\n<pre><code>var selectAll = function(){\n     can.Observe.startBatch();\n  items.each(function(){\n       item.attr('selected', true)\n  })\n  can.Observe.stopBatch();\n}\n\ncan.Observe.startBatch();\nselectAll();\nperson.attr('first','Justin')\ncan.Observe.endBatch();\n</code></pre>", "src": {"query": "", "fragment": "", "path": "can/observe/observe.js", "dir": {"prototype": {}}, "filename": {"prototype": {}}, "ext": {"prototype": {}}, "domain": {"prototype": {}}, "isCrossDomain": {"prototype": {}}, "isRelativeToDomain": {"prototype": {}}, "hash": {"prototype": {}}, "search": {"prototype": {}}, "add": {"prototype": {}}, "join": {"prototype": {}}, "normalize": {"prototype": {}}, "isRelative": {"prototype": {}}, "pathTo": {"prototype": {}}, "mapJoin": {"prototype": {}}, "addJS": {"prototype": {}}, "toString": {"prototype": {}}, "insertMapping": {"prototype": {}}}, "line": 128, "children": []})