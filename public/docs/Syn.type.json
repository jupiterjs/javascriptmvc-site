c({"name": "Syn.type", "params": {"options": {"description": "<p>the text to type</p>", "type": "String", "optional": false, "order": 0, "name": "options"}, "element": {"description": "<p>an element or an id of an element</p>", "type": "HTMLElement", "optional": true, "order": 1, "name": "element"}, "callback": {"description": "<p>a function to callback</p>", "type": "Function", "optional": true, "order": 2, "name": "callback"}}, "ret": {"type": "undefined", "description": ""}, "type": "function", "parents": ["Syn"], "comment": "<p>Types sequence of [Syn.key key actions].  Each\ncharacter is typed, one at a type.\nMulti-character keys like 'left' should be\nenclosed in square brackents.</p>\n\n<p>The following types 'JavaScript MVC' then deletes the space.</p>\n\n<pre><code class='javascript'>Syn.type('JavaScript MVC[left][left][left]\\b','name')</code></pre>\n\n<p>Type is able to handle (and move with) tabs (\\t). <br />\nThe following simulates tabing and entering values in a form and \neventually submitting the form.</p>\n\n<pre><code class='javascript'>Syn.type(\"Justin\\tMeyer\\t27\\tjustinbmeyer@gmail.com\\r\")</code></pre>", "src": {"query": "", "fragment": "", "path": "funcunit/syn/key.js", "dir": {"prototype": {}}, "filename": {"prototype": {}}, "ext": {"prototype": {}}, "domain": {"prototype": {}}, "isCrossDomain": {"prototype": {}}, "isRelativeToDomain": {"prototype": {}}, "hash": {"prototype": {}}, "search": {"prototype": {}}, "add": {"prototype": {}}, "join": {"prototype": {}}, "normalize": {"prototype": {}}, "isRelative": {"prototype": {}}, "pathTo": {"prototype": {}}, "mapJoin": {"prototype": {}}, "addJS": {"prototype": {}}, "toString": {"prototype": {}}, "insertMapping": {"prototype": {}}}, "line": 809, "children": []})