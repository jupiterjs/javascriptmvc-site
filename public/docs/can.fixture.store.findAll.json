c({"name": "can.fixture.store.findAll", "params": {"request": {"description": "<p>The ajax request object \nthat contains a data object like:</p>\n\n<pre><code>var response = store.findAll({\n  data: {\n    order: \"name ASC\"    \n  }\n});\n</code></pre>\n\n<p>The <code>data</code> object may include any of the following properties</p>\n\n<h4>order</h4>\n\n<h4>group</h4>\n\n<h4>limit</h4>\n\n<h4>offset</h4>\n\n<h4>id properties</h4>", "type": "AjaxRequest", "optional": false, "order": 0, "name": "request"}}, "ret": {"description": "<p>a response object like:</p>\n\n<pre><code>{\n  count: 1000,\n  limit: 20,\n  offset: 60,\n  data: [item1, item2, ...]\n}\n</code></pre>\n\n<p>where:</p>\n\n<ul>\n<li>count - the number of items that match any filtering \nbefore limit and offset is taken into account</li>\n<li>offset - the offset passed</li>\n<li>limit - the limit passed</li>\n<li>data - an array of JS objects with each item's properties</li>\n</ul>", "type": "Object"}, "type": "function", "comment": "<p><code>store.findAll(request)</code> simulates a request to \nget a list items from the server. It supports the\nfollowing params:</p>\n\n<ul>\n<li>order - <code>order=name ASC</code> </li>\n<li>group - <code>group=name</code></li>\n<li>limit - <code>limit=20</code></li>\n<li>offset - <code>offset=60</code></li>\n<li>id filtering - <code>ownerId=5</code></li>\n</ul>", "parents": ["can.fixture.store"], "src": {"query": "", "fragment": "", "path": "can/util/fixture/fixture.js", "dir": {"prototype": {}}, "filename": {"prototype": {}}, "ext": {"prototype": {}}, "domain": {"prototype": {}}, "isCrossDomain": {"prototype": {}}, "isRelativeToDomain": {"prototype": {}}, "hash": {"prototype": {}}, "search": {"prototype": {}}, "add": {"prototype": {}}, "join": {"prototype": {}}, "normalize": {"prototype": {}}, "isRelative": {"prototype": {}}, "pathTo": {"prototype": {}}, "mapJoin": {"prototype": {}}, "addJS": {"prototype": {}}, "toString": {"prototype": {}}, "insertMapping": {"prototype": {}}}, "line": 501, "children": []})