c({"name": "DocumentJS.types.class", "type": "class", "comment": "<p>Documents a 'Class'.</p>\n\n<p>A class is typically a collection of static and prototype functions.</p>\n\n<p>DocumentJS can automatically detect classes created with jQuery.Class.</p>\n\n<p>However, you can make anything a class with the <strong>@class</strong> <em>ClassName</em> directive.</p>\n\n<h3>Example:</h3>\n\n<pre><code class='javascript'>/**\n * @class \n * Person represents a human with a name.  Read about the \n * animal class [Animal | here]. \n */\nPerson = Animal.extend(\n/* @Static */\n{\n   /* Number of People */\n   count: 0\n},\n/* @Prototype */\n{\n   init : function(name){\n     this.name = name\n     this._super({warmblood: true})\n   },\n   /* Returns a formal name \n    * @return {String} the name with \"Mrs.\" added\n    */\n  fancyName : function(){\n     return \"Mrs. \"+this.name;\n  }\n})</code></pre> ", "tags": ["documentation"], "parents": ["DocumentJS.types"], "src": {"query": "", "fragment": "", "path": "documentjs/types/class.js", "dir": {"prototype": {}}, "filename": {"prototype": {}}, "ext": {"prototype": {}}, "domain": {"prototype": {}}, "isCrossDomain": {"prototype": {}}, "isRelativeToDomain": {"prototype": {}}, "hash": {"prototype": {}}, "search": {"prototype": {}}, "add": {"prototype": {}}, "join": {"prototype": {}}, "normalize": {"prototype": {}}, "isRelative": {"prototype": {}}, "pathTo": {"prototype": {}}, "mapJoin": {"prototype": {}}, "addJS": {"prototype": {}}, "toString": {"prototype": {}}, "insertMapping": {"prototype": {}}}, "line": 1, "children": ["DocumentJS.types.class.static"]})