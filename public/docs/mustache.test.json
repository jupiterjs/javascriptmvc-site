c({"name": "mustache.test", "type": "page", "comment": "<p>Testing your Mustache implementation against this specification should be\nrelatively simple.  If you have a readily available testing framework on your\nplatform, your task may be even simpler.</p>\n\n<p>In general, the process for each <code>.yml</code> file is as follows:</p>\n\n<ol>\n<li><p>Use a YAML parser to load the file.</p></li>\n<li><p>For each test in the 'tests' array:</p>\n\n<ol><li><p>Ensure that each element of the 'partials' hash (if it exists) is\nstored in a place where the interpreter will look for it.</p></li>\n<li><p>If your implementation will not support lambdas, feel free to skip over\nthe optional '~lambdas.yml' file.</p></li></ol>\n\n<p>2.1. If your implementation will support lambdas, ensure that each member of\n   'data' tagged with '!code' is properly processed into a language-\n   specific lambda reference.</p>\n\n<ul><li><p>e.g. Given this YAML data hash:</p>\n\n<p><code>{ x: !code { ruby: 'proc { \"x\" }', perl: 'sub { \"x\" }' } }</code></p>\n\n<p>a Ruby-based Mustache implementation would process it such that it\n  was equivalent to this Ruby hash:</p>\n\n<p><code>{ 'x' =&gt; proc { \"x\" } }</code></p></li>\n<li><p>If your implementation language does not currently have lambda\n  examples in the spec, feel free to implement them and send a pull\n  request.</p></li>\n<li><p>The JSON version of the spec represents these tagged values as a hash\n  with a '<code>__tag__</code>' key of 'code'.</p>\n\n<ol><li><p>Render the template (stored in the 'template' key) with the given 'data'\nhash.</p></li>\n<li><p>Compare the results of your rendering against the 'expected' value; any\ndifferences should be reported, along with any useful debugging\ninformation.</p></li>\n<li><p>Of note, the 'desc' key contains a rough one-line description of the\nbehavior being tested -- this is most useful in conjunction with the\nfile name and test 'name'.</p></li></ol></li></ul></li>\n</ol>", "src": "can/view/mustache/spec/TESTING.md", "children": []})