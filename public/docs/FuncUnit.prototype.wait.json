c({"name": "FuncUnit.prototype.wait", "params": {"checker": {"description": "<p>a checking function.  It runs repeatedly until the condition becomes true or the timeout period passes. <br />\nIf a number is provided, a time in milliseconds to wait before running the next queued method.</p>", "type": "Number|Function", "optional": true, "order": 0, "name": "checker"}, "timeout": {"description": "<p>overrides FuncUnit.timeout.  If provided, the wait will fail if not completed before this timeout.</p>", "type": "Number", "optional": true, "order": 1, "name": "timeout"}, "success": {"description": "<p>a callback that will run after this action completes.</p>", "type": "Function", "optional": true, "order": 2, "name": "success"}, "message": {"description": "<p>if provided, an assertion will be passed when this wait condition completes successfully</p>", "type": "String", "optional": true, "order": 3, "name": "message"}}, "ret": {"type": "undefined", "description": ""}, "type": "function", "parents": ["FuncUnit.prototype"], "comment": "<p>Waits until some condition is true before calling the next action.  Or if no checker function is provided, waits a \ntimeout before calling the next queued method.  This can be used as a flexible wait condition to check various things in the tested page:</p>\n\n<pre><code class='javascript'>\nS('#testData').wait(function(){\n     return S.win.$(this).data('idval') === 1000;\n}, \"Data value matched\");</code></pre>", "src": {"query": "", "fragment": "", "path": "funcunit/browser/waits.js", "dir": {"prototype": {}}, "filename": {"prototype": {}}, "ext": {"prototype": {}}, "domain": {"prototype": {}}, "isCrossDomain": {"prototype": {}}, "isRelativeToDomain": {"prototype": {}}, "hash": {"prototype": {}}, "search": {"prototype": {}}, "add": {"prototype": {}}, "join": {"prototype": {}}, "normalize": {"prototype": {}}, "isRelative": {"prototype": {}}, "pathTo": {"prototype": {}}, "mapJoin": {"prototype": {}}, "addJS": {"prototype": {}}, "toString": {"prototype": {}}, "insertMapping": {"prototype": {}}}, "line": 230, "children": []})