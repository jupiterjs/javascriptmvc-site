c({"name": "can.Mustache.prototype.Mustache.get", "params": {"ref": {"description": "<pre><code> The reference to check for on the obj/context.\n</code></pre>", "type": "String", "optional": false, "order": 0, "name": "ref"}, "contexts": {"description": "", "type": "", "optional": false, "order": 1, "name": "contexts"}, "isHelper": {"description": "<p>Whether the reference is a helper.</p>", "type": "Boolean", "optional": true, "order": 2, "name": "isHelper"}, "isArgument": {"description": "", "type": "", "optional": false, "order": 3, "name": "isArgument"}, "obj": {"order": 4, "description": "<pre><code>     The object to use for checking for a reference.\n</code></pre>", "name": "obj", "type": "Object", "optional": false}, "context": {"order": 5, "description": "<p>The context to use for checking for a reference if it doesn't exist in the object.</p>", "name": "context", "type": "Object", "optional": false}}, "ret": {"type": "undefined", "description": ""}, "type": "function", "parents": ["can.Mustache.prototype"], "comment": "<p>Resolves a reference for a given object (and then a context if that fails).\nobj = this\ncontext = { a: true }\nref = 'a.b.c'\n    => obj.a.b.c || context.a.b.c || ''</p>\n\n<p>This implements the following Mustache specs:\n    Deeply Nested Contexts\nAll elements on the context stack should be accessible.\n    {{#bool}}B {{#bool}}C{{/bool}} D{{/bool}}\n    { bool: true }\n    => \"B C D\"\n    Basic Context Miss Interpolation\n    Failed context lookups should default to empty strings.\n     {{cannot}}\n    => \"\"\n    Dotted Names - Broken Chains\n    Any falsey value prior to the last part of the name should yield ''.\n    {{a.b.c}}\n    { a: { d: 1 } }\n    => \"\"</p>", "hide": true, "src": {"query": "", "fragment": "", "path": "can/view/mustache/mustache.js", "dir": {"prototype": {}}, "filename": {"prototype": {}}, "ext": {"prototype": {}}, "domain": {"prototype": {}}, "isCrossDomain": {"prototype": {}}, "isRelativeToDomain": {"prototype": {}}, "hash": {"prototype": {}}, "search": {"prototype": {}}, "add": {"prototype": {}}, "join": {"prototype": {}}, "normalize": {"prototype": {}}, "isRelative": {"prototype": {}}, "pathTo": {"prototype": {}}, "mapJoin": {"prototype": {}}, "addJS": {"prototype": {}}, "toString": {"prototype": {}}, "insertMapping": {"prototype": {}}}, "line": 687, "children": []})