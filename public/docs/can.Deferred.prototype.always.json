c({"name": "can.Deferred.prototype.always", "type": "function", "parents": ["can.Deferred.prototype"], "comment": "<p><code>deferred.always( alwaysCallbacks )</code> adds handler(s) to be called when the Deferred object is either resolved or rejected.</p>\n\n<pre><code>var def = can.Deferred();\ndef.always( function(){\n    //- Called whether the handler fails or is success.\n});\n</code></pre>", "params": {"alwaysCallbacks": {"order": 0, "description": "<p>A function called when the Deferred is resolved or rejected.</p>", "name": "alwaysCallbacks", "type": "Object", "optional": false}}, "src": {"query": "", "fragment": "", "path": "can/util/can.js", "dir": {"prototype": {}}, "filename": {"prototype": {}}, "ext": {"prototype": {}}, "domain": {"prototype": {}}, "isCrossDomain": {"prototype": {}}, "isRelativeToDomain": {"prototype": {}}, "hash": {"prototype": {}}, "search": {"prototype": {}}, "add": {"prototype": {}}, "join": {"prototype": {}}, "normalize": {"prototype": {}}, "isRelative": {"prototype": {}}, "pathTo": {"prototype": {}}, "mapJoin": {"prototype": {}}, "addJS": {"prototype": {}}, "toString": {"prototype": {}}, "insertMapping": {"prototype": {}}}, "line": 542, "children": []})