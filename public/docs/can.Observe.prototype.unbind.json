c({"name": "can.Observe.prototype.unbind", "type": "function", "parents": ["can.Observe.prototype"], "comment": "<p>Unbinds an event listener.  This works similar to jQuery's unbind.  This means you can \nuse namespaces or unbind all event handlers for a given event:</p>\n\n<pre><code>// unbind a specific event handler\no.unbind( 'change', handler );\n\n// unbind all change event handlers bound with the\n// foo namespace\no.unbind( 'change.foo' );\n\n// unbind all change event handlers\no.unbind( 'change' );\n</code></pre>", "params": {"eventType": {"order": 0, "description": "<ul>\n<li>the type of event with\nany optional namespaces. </li>\n</ul>", "name": "eventType", "type": "String", "optional": false}, "handler": {"order": 1, "description": "<ul>\n<li>The original handler function passed\nto [can.Observe.prototype.bind bind].</li>\n</ul>", "name": "handler", "type": "Function", "optional": true}}, "ret": {"description": "<p>the original observe for chaining.</p>", "type": "can.Observe"}, "src": {"query": "", "fragment": "", "path": "can/observe/observe.js", "dir": {"prototype": {}}, "filename": {"prototype": {}}, "ext": {"prototype": {}}, "domain": {"prototype": {}}, "isCrossDomain": {"prototype": {}}, "isRelativeToDomain": {"prototype": {}}, "hash": {"prototype": {}}, "search": {"prototype": {}}, "add": {"prototype": {}}, "join": {"prototype": {}}, "normalize": {"prototype": {}}, "isRelative": {"prototype": {}}, "pathTo": {"prototype": {}}, "mapJoin": {"prototype": {}}, "addJS": {"prototype": {}}, "toString": {"prototype": {}}, "insertMapping": {"prototype": {}}}, "line": 761, "children": []})