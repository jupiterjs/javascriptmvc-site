c({"name": "can.delegate", "type": "function", "comment": "<p><code>can.delegate(selector, eventName, handler)</code> binds a delegate handler\non an object for a given event.  It works on:</p>\n\n<ul>\n<li>HTML elements and the window</li>\n</ul>\n\n<p>The idea is that delegate can be used on anything that produces delegate events\nand it will figure out the appropriate way to \nbind to it.  Typically, <code>can.delegate</code> is only used internally to\nCanJS; however, if you are making libraries or extensions, use\n<code>can.delegate</code> to listen to events independent of the underlying library.</p>\n\n<p><strong>Delegate binding to an HTMLElement</strong></p>\n\n<pre><code>var el = document.getElementById('foo')\ncan.delegate.call(el, \".selector\", \"click\", function(ev){\n  this // el\n})\n</code></pre>", "parents": ["can.util"], "params": {"selector": {"order": 0, "description": "<p>The selector to delegate</p>", "name": "selector", "type": "String", "optional": false}, "eventName": {"order": 1, "description": "<p>The type of event to bind to</p>", "name": "eventName", "type": "String", "optional": false}, "handler": {"order": 2, "description": "<p>The handler for the event</p>", "name": "handler", "type": "Function", "optional": false}}, "ret": {"description": "<p>this</p>", "type": "Object"}, "src": {"query": "", "fragment": "", "path": "can/util/can.js", "dir": {"prototype": {}}, "filename": {"prototype": {}}, "ext": {"prototype": {}}, "domain": {"prototype": {}}, "isCrossDomain": {"prototype": {}}, "isRelativeToDomain": {"prototype": {}}, "hash": {"prototype": {}}, "search": {"prototype": {}}, "add": {"prototype": {}}, "join": {"prototype": {}}, "normalize": {"prototype": {}}, "isRelative": {"prototype": {}}, "pathTo": {"prototype": {}}, "mapJoin": {"prototype": {}}, "addJS": {"prototype": {}}, "toString": {"prototype": {}}, "insertMapping": {"prototype": {}}}, "line": 236, "children": []})