c({"name": "Syn.move", "params": {"options": {"description": "<p>options to configure the drag</p>", "type": "Object", "optional": false, "order": 0, "name": "options"}, "from": {"description": "<p>the element to move</p>", "type": "HTMLElement", "optional": false, "order": 1, "name": "from"}, "callback": {"description": "<p>a callback that happens after the drag motion has completed</p>", "type": "Function", "optional": false, "order": 2, "name": "callback"}}, "ret": {"type": "undefined", "description": ""}, "type": "function", "parents": ["Syn"], "comment": "<p>Moves the cursor from one point to another.  </p>\n\n<h3>Quick Example</h3>\n\n<p>The following moves the cursor from (0,0) in\nthe window to (100,100) in 1 second.</p>\n\n<pre><code>Syn.move(\n     {\n       from: {clientX: 0, clientY: 0},\n       to: {clientX: 100, clientY: 100},\n       duration: 1000\n     },\n     document.document)\n</code></pre>\n\n<h2>Options</h2>\n\n<p>There are many ways to configure the endpoints of the move.</p>\n\n<h3>PageX and PageY</h3>\n\n<p>If you pass pageX or pageY, these will get converted\nto client coordinates.</p>\n\n<pre><code>Syn.move(\n     {\n       from: {pageX: 0, pageY: 0},\n       to: {pageX: 100, pageY: 100}\n     },\n     document.document)\n</code></pre>\n\n<h3>String Coordinates</h3>\n\n<p>You can set the pageX and pageY as strings like:</p>\n\n<pre><code>Syn.move(\n     {\n       from: \"0x0\",\n       to: \"100x100\"\n     },\n     document.document)\n</code></pre>\n\n<h3>Element Coordinates</h3>\n\n<p>If jQuery is present, you can pass an element as the from or to option\nand the coordinate will be set as the center of the element.\n    Syn.move(\n         {\n           from: $(\".recipe\")[0],\n           to: $(\"#trash\")[0]\n         },\n         document.document)</p>\n\n<h3>Query Strings</h3>\n\n<p>If jQuery is present, you can pass a query string as the from or to option.</p>\n\n<p>Syn.move(\n     {\n       from: \".recipe\",\n       to: \"#trash\"\n     },\n     document.document)</p>\n\n<h3>No From</h3>\n\n<p>If you don't provide a from, the element argument passed to Syn is used.</p>\n\n<pre><code>Syn.move(\n     { to: \"#trash\" },\n     'myrecipe')\n</code></pre>\n\n<h3>Relative</h3>\n\n<p>You can move the drag relative to the center of the from element.</p>\n\n<pre><code>Syn.move(\"+20 +30\", \"myrecipe\");\n</code></pre>", "src": {"query": "", "fragment": "", "path": "funcunit/syn/drag/drag.js", "dir": {"prototype": {}}, "filename": {"prototype": {}}, "ext": {"prototype": {}}, "domain": {"prototype": {}}, "isCrossDomain": {"prototype": {}}, "isRelativeToDomain": {"prototype": {}}, "hash": {"prototype": {}}, "search": {"prototype": {}}, "add": {"prototype": {}}, "join": {"prototype": {}}, "normalize": {"prototype": {}}, "isRelative": {"prototype": {}}, "pathTo": {"prototype": {}}, "mapJoin": {"prototype": {}}, "addJS": {"prototype": {}}, "toString": {"prototype": {}}, "insertMapping": {"prototype": {}}}, "line": 205, "children": []})