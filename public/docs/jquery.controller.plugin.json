c({"name": "jquery.controller.plugin", "type": "page", "comment": "<p>When you create a controller, it creates a jQuery plugin that can be\nused to:</p>\n\n<ul>\n<li>Create controllers on an element or elements</li>\n<li>Call controller methods</li>\n<li>Update a controller</li>\n</ul>\n\n<p>For example, the following controller:</p>\n\n<pre><code>$.Controller(\"My.Widget\",{\n  say : function(){\n     alert(this.options.message);\n  }\n})\n</code></pre>\n\n<p>creates a <code>jQuery.fn.my_widget</code> method that you can use like:</p>\n\n<pre><code>// create my_widget on each .thing\n$(\".thing\").my_widget({message : \"Hello\"}) \n\n// alerts \"Hello\"\n$(\".thing\").my_widget(\"say\");\n\n// updates the message option\n$(\".thing\").my_widget({message : \"World\"});\n\n// alerts \"World\"\n$(\".thing\").my_widget(\"say\");\n</code></pre>\n\n<p>Note that in every case, the my_widget plugin\nreturns the original jQuery collection for chaining (<code>$('.thing')</code>).  If you want to\nget a value from a controller, use the [jQuery.fn.controllers] or [jQuery.fn.controller].</p>\n\n<h2>Creating controllers</h2>\n\n<p>When a controller's jQuery plugin helper is used on a jQuery collection, it goes to each \nelement and tests if it has a controller instance on the element.  If it does not, it creates one.</p>\n\n<p>It calls <code>new YourController</code> with the element and any additional arguments you passed \nto the jQuery plugin helper.  So for example, say there are 2 elements in <code>$('.thing')</code>.</p>\n\n<p>This:</p>\n\n<pre><code>$(\".thing\").my_widget({message : \"Hello\"})\n</code></pre>\n\n<p>Does the exact same thing as:</p>\n\n<pre><code>var things = $('.thing'),\n    options = {message : \"Hello\"};\nnew My.Widget(things[0],options);\nnew My.Widget(things[1],options);\n</code></pre>\n\n<p>Note, when a <code>new Class</code> is created, it calls your \nclass's prototype setup and init methods. Read [jQuery.Controller.prototype.setup controller's setup] \nfor the details on what happens when a new controller is created.</p>\n\n<h2>Calling methods on controllers</h2>\n\n<p>Once a Controller is already on an element, you can call methods on it with the same jQuery\nhelper.  The first param to the helper is the name of the method, the following params are \npassed to the jQuery function.  For example:</p>\n\n<pre><code>$.Controller(\"Adder\",{\n  sum : function(first, second, third){\n     this.element.text(first+second+third);\n  }\n})\n\n// add an adder to the page\n$(\"#myadder\").adder()\n\n// show the sum of 1+2+3\n$(\"#myadder\").adder(\"sum\",1,2,3);\n</code></pre>\n\n<h2>Naming</h2>\n\n<p>By default, a controller's jQuery helper is the controller name:</p>\n\n<ul>\n<li>[jQuery.String.underscore underscored]</li>\n<li>\".\" replaced with \"_\"</li>\n<li>with Controllers removed.</li>\n</ul>\n\n<p>Here are some examples:</p>\n\n<pre><code>$.Controller(\"Foo\")                 // -&gt; .foo()\n$.Controller(\"Foo.Bar\")             // -&gt; .foo_bar()\n$.Controller(\"Foo.Controllers.Bar\") // -&gt; .foo_bar()\n</code></pre>\n\n<p>You can overwrite the Controller's default name by setting a static pluginName property:</p>\n\n<pre><code>$.Controller(\"My.Tabs\",\n{\n  pluginName: \"tabs\"\n},\n{ ... })\n\n$(\"#tabs\").tabs()\n</code></pre>", "title": "The generated jQuery plugin", "parents": ["jQuery.Controller"], "src": "jquery/controller/pages/plugin.md", "children": []})