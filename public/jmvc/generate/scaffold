if (_args.length < 1) {
	print("USAGE : steal/js steal/generate/scaffold FullName Type")
	print("TYPES : JsonRest\n")
	print("EX    : js steal/generate/scaffold Cashnet.Models.Customer");
	print("      > cashnet/models/customer.js ....")
	print();
	quit();
}

load('steal/rhino/rhino.js');

steal(	'steal/generate',
		'steal/generate/system.js',	
		'jmvc/generate/templates/model.js',
function(steal){
	var generate = steal.generate;
	//check capitalization
	generate.model(_args[0]);

	var parts = _args[0].split("/"), 
		last = parts[parts.length-1];
	
	parts.forEach(function(part){
		if( part !== generate.downcase(part) ){
			print("! Warning: "+part+" should probably be lowercased.  JavaScriptMVC likes capital namespaces and class names.")
		}
	});

	// check folders
	var folder = parts.slice(0, parts.length-1).join("/");
	
	
	if(!folder){
		print("! Error: Scaffolding needs to be part of an app");
		quit();
	}
	if(!steal.File(folder).exists()){
		print("! Error: folder "+folder+" does not exist!");
		quit();
	}
	//check pluralization of last part
	if(steal.Inflector.singularize(last) !== last){
		print("! Warning: Model names should be singular.  I don't think "+part+
		" is singular!")
	}

	var md = steal.generate.convert(_args[0]);

	md.type = _args[1]

  // generate /scaffold files
	steal.generate("jmvc/generate/templates/scaffold",md.appPath+"/"+md.underscore,md);

	try{
		
	steal.generate.insertSteal(
		md.appPath+"/"+ md.appName+"_test.js",
		md.appPath+"/"+md.underscore+"/create/create_test.js");

	steal.generate.insertSteal(
		md.appPath+"/"+ md.appName+"_test.js",
		md.appPath+"/"+md.underscore+"/list/list_test.js")

	steal.generate.insertSteal(
		md.appPath+"/"+md.appPath+".js",
		md.appPath+"/"+md.underscore+"/create", {newline: true, name: md.Alias+"Create"})
	steal.generate.insertSteal(
		md.appPath+"/"+md.appPath+".js",
		md.appPath+"/"+md.underscore+"/list", {newline: true, name: md.Alias+"List"})
	} catch(e) {
		//quit();
	}
  
	var text = readFile("jmvc/generate/templates/scaffoldHookup.ejs");
	var hookup = new steal.EJS({
		text: text
	}).render(md);
	steal.generate.insertCode(md.appPath+"/"+md.appName+".js", hookup );
	
	// insert the HTML into index
	var text = readFile("jmvc/generate/templates/scaffoldHTML.ejs");
	var hookupHTML = new steal.EJS({
		text: text
	}).render(md);
	
	var appFile = readFile( md.appPath+"/index.html" );
	
	if( appFile.indexOf(text) == -1  ){
		var scriptIndex = appFile.indexOf("<script");
		steal.File(md.appPath+"/index.html").save(
			appFile.substring(0, scriptIndex)+hookupHTML+appFile.substr(scriptIndex)
		);
		steal.print('      '+md.appPath+"/index.html"+" (html added)");
	}
	
	var text = readFile("jmvc/generate/templates/scaffoldTest.ejs"),
		testCode = new steal.EJS({
			text: text
		}).render(md);
		
	if( readFile(md.appPath+"/"+md.appName+"_test.js").indexOf(testCode) == -1  ) {
		steal.generate.insertCode(md.appPath+"/"+md.appName+"_test.js", testCode );
		
	}
	
	
	
	
});