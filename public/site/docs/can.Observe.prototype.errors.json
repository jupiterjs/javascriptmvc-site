c({"name": "can.Observe.prototype.errors", "params": {"attrs": {"description": "<p>An optional list of attributes to get errors for:</p>\n\n<pre><code>task.errors(['dueDate','name']);\n</code></pre>\n\n<p>Or it can take a single attr name like:</p>\n\n<pre><code>task.errors('dueDate')\n</code></pre>", "type": "Array|String", "optional": true, "order": 0, "name": "attrs"}, "newVal": {"description": "<p>An optional new value to test setting\non the observe.  If <code>newVal</code> is provided, \nit returns the errors on the observe if <code>newVal</code> was set.</p>", "type": "Object", "optional": true, "order": 1, "name": "newVal"}}, "ret": {"description": "<p>an object of attributeName : [errors] like:</p>\n\n<pre><code>task.errors() // -&gt; {dueDate: [\"cant' be empty\"]}\n</code></pre>\n\n<p>or <code>null</code> if there are no errors.</p>", "type": "Object"}, "type": "function", "comment": "<p>Runs the validations on this observe.  You can\nalso pass it an array of attributes to run only those attributes.\nIt returns nothing if there are no errors, or an object\nof errors by attribute.</p>\n\n<p>To use validations, it's suggested you use the \nobserve/validations plugin.</p>\n\n<pre><code>can.Observe(\"Task\",{\n  init : function(){\n    this.validatePresenceOf(\"dueDate\")\n  }\n},{});\n\nvar task = new Task(),\n    errors = task.errors()\n\nerrors.dueDate[0] //-&gt; \"can't be empty\"\n</code></pre>", "parents": ["can.Observe.validations"], "src": {"query": "", "fragment": "", "path": "can/observe/validations/validations.js", "dir": {"prototype": {}}, "filename": {"prototype": {}}, "ext": {"prototype": {}}, "domain": {"prototype": {}}, "isCrossDomain": {"prototype": {}}, "isRelativeToDomain": {"prototype": {}}, "hash": {"prototype": {}}, "search": {"prototype": {}}, "add": {"prototype": {}}, "join": {"prototype": {}}, "normalize": {"prototype": {}}, "isRelative": {"prototype": {}}, "pathTo": {"prototype": {}}, "mapJoin": {"prototype": {}}, "addJS": {"prototype": {}}, "toString": {"prototype": {}}, "insertMapping": {"prototype": {}}}, "line": 284, "children": []})