c({"name": "DocumentJS", "type": "page", "comment": "<p>There are several reasons why documentation is important:</p>\n\n<ul>\n<li>As apps grow, source code becomes complex and difficult to maintain.</li>\n<li>It's beneficial for customers because it helps to educate them on a product.</li>\n<li>Perhaps most importantly, it keeps a project going by bringing new developers up to speed - while also keeping the whole team on the same page.</li>\n</ul>\n\n<p>DocumentJS is a new documentation solution for JavaScript applications. It makes creating, viewing, and maintaining documentation easy and fun. Out of the box, it features:</p>\n\n<ul>\n<li>Fexible organization of your documentation</li>\n<li>An integrated documentation viewer where you can search your API</li>\n<li>Markdown support</li>\n<li>An extensible architecture</li>\n</ul>\n\n<p>DocumentJS provides powerful and easy to extend documentation functionality.\nIt's smart enough to guess \nat things like function names and parameters, but powerful enough to generate \n<span class='highlight'>JavaScriptMVC's entire website</span>!</p>\n\n<h3>Organizing your documentation</h3>\n\n<p>Let's use an hypothetical little CRM system as an example of how easy it is to organize your documentation with DocumentJS. </p>\n\n<p>First let's create our CRM documentation home page by creating a folder name <strong>crm</strong>. Paste this code into a file named <strong>crm.js</strong> inside <strong>crm</strong> folder.</p>\n\n<pre><code class='javascript'>/*\n * @page index CRM\n * @tag home\n *\n * ###Little CRM\n *  \n * Our little CRM only has two classes:\n *  \n * * Customer \n * * Order \n */</code></pre>\n\n<p>Run the documentjs script to generate the docs:</p>\n\n<pre><code class='javascript'>documentjs/doc.bat crm</code></pre>\n\n<p>This is what you should see when you open <strong>crm\\docs.html</strong>:</p>\n\n<p><img class='image_tag' src='jmvc/images/crm_doc_demo_1.png' /></p>\n\n<p>There are a few things to notice:</p>\n\n<ul>\n<li>The example closes comments with <em>*|</em>.  You should close them with / instead of |.</li>\n<li>We create a link to another class with <em>[Animal | here]</em>. </li>\n<li>We used the @page directive to create the crm documentation home page. Don't worry about the @tag directive for now, we'll get back to it later. </li>\n<li>In all the examples in this walkthrough we use markdown markup instead of html to make the documentation more maintainable and easier to read .</li>\n</ul>\n\n<p>Next we document the two classes that make our little crm system. Paste each snippet of code into two files with names <strong>customer.js</strong> and <strong>order.js</strong>:</p>\n\n<p><strong>customer.js</strong></p>\n\n<pre><code class='javascript'>/*\n * @class Customer\n * @parent index\n * @constructor\n * Creates a new customer.\n * @param {String} name\n */\n var Customer = function(name) {\n    this.name = name;\n }</code></pre>\n\n<p><strong>order.js</strong></p>\n\n<pre><code class='javascript'>/*\n * @class Order\n * @parent index\n * @constructor\n * Creates a new order.\n * @param {String} id\n */\n var Order = function(id) {\n    this.id = id;\n }</code></pre>\n\n<p>After runnig the documentjs script once again you should be able to see this:</p>\n\n<p><img class='image_tag' src='jmvc/images/crm_doc_demo_2.png' /></p>\n\n<p>We want to be able to both look for our customer's orders and dispatch them so let's add a <em>findById</em> method to our Order class\nand a <em>dispatch</em> method to our Order's prototype:</p>\n\n<p><strong>order.js</strong></p>\n\n<pre><code class='javascript'>/*  \n * @class Order \n * @parent index \n * @constructor\n * Creates a new order.\n * @param {String} id\n */\nvar Order = function(id) {\n    this.id = id;\n}\n\n$.extend(Order,\n/*\n* @static\n*/\n{\n   /*\n    * Finds an order by id.\n    * @param {String} id Order identification number.\n    * @param {Date} [date] Filter order search by this date.\n    */\n    findById: function(id, date) {\n\n    }\n });\n\n$.extend(Order.prototype,\n/*\n * @prototype\n */\n {\n    /*\n     * Dispatch an order.\n     * @return {Boolean} Returns true if order dispatched successfully.\n     */\n     dispatch: function() {\n\n     }\n});</code></pre>\n\n<p>Go ahead and produce the docs by running the documentjs script. You should see your Order methods organized by static and protoype categories.</p>\n\n<p>There's one last thing we need to cover - customizing the document viewer template. The default viewer template file name is <strong>summary.ejs</strong> and it's\nlocated in <strong>documentjs/jmvcdoc/summary.ejs</strong>. You can use a customized template by copying <strong>summary</strong>.ejs into the <strong>crm</strong> folder and changing it \naccording to your needs. Let's try changing the navigation menu <strong>core</strong> item to <strong>crm</strong>:</p>\n\n<pre><code class='javascript'>&lt;li class=\"ui-menu-item\"&gt;\n    &lt;a class=\"menuLink\" href=\"#&amp;search=crm\"&gt;&lt;span class=\"menuSpan\"&gt;CRM&lt;/span&gt;&lt;/a&gt;\n&lt;/li&gt;</code></pre>\n\n<p>Remember the @tag directive? We can now change it in our examples from <em>core</em> to <em>crm</em>. You will notice that our crm page will show up\nevery time you click the CRM menu item or type <em>crm</em> in the documentation viewer search box.</p>\n\n<p>If you need for DocumentJS not to document a particular script you can do that by adding the @document-ignore directive to the top of the file. </p>\n\n<p>As you see DocumentJS makes it super easy and fun to organize your documentation!</p>\n\n<h3>How DocumentJS works</h3>\n\n<p>DocumentJS architecture is organized around the concepts of [DocumentJS.types | types] and [DocumentJS.tags | tags]. Types are meant to represent every javascript construct \nyou might want to comment like classes, functions and attributes. Tags add aditional information to the comments of the type being processed.</p>\n\n<p>DocumentJS works by loading a set of javascript files, then by spliting each file into type/comments pairs \nand finally parsing each type's comments tag directives to produce a set of jsonp files (one per type) \nthat are used by the document viewer (jmvcdoc) to render the documentation.</p>\n\n<p>DocumentJS was written thinking of extensibility and it's very easy to add custom type/tag directives to handle your specific documentation needs.</p>\n\n<p>DocumentJS currently requires [stealjs Steal] to be included on the pages you are documenting.   </p>\n\n<h3>Type directives</h3>\n\n<ul>\n<li>[DocumentJS.types.page | @page] -  add a standalone page.</li>\n<li>[DocumentJS.types.attribute | @attribute] -  document values on an object.</li>\n<li>[DocumentJS.types.function | @function] - document functions.</li>\n<li>[DocumentJS.types.class| @class] - document a class. </li>\n<li>[DocumentJS.types.prototype | @prototype] - add to the previous class or constructor's prototype functions.</li>\n<li>[DocumentJS.types.static | @static] - add to the previous class or constructor's static functions.</li>\n<li>[DocumentJS.types.add |@add] - add docs to a class or construtor described in another file.</li>\n</ul>\n\n<h3>Tag directives</h3>\n\n<ul>\n<li>[DocumentJS.tags.alias|@alias] - another commonly used name for Class or Constructor.</li>\n<li>[DocumentJS.tags.author|@author] - author of class.</li>\n<li>[DocumentJS.tags.codestart|@codestart] -> [DocumentJS.tags.codeend|@codeend] - insert highlighted code block.</li>\n<li>[DocumentJS.tags.constructor | @constructor] - documents a contructor function and its parameters.</li>\n<li>[DocumentJS.tags.demo|@demo] - placeholder for an application demo.</li>\n<li>[DocumentJS.tags.download|@download] - adds a download link.</li>\n<li>[DocumentJS.tags.iframe|@iframe] - adds an iframe with example code.</li>\n<li>[DocumentJS.tags.hide|@hide] - hide in Class view.</li>\n<li>[DocumentJS.tags.inherits|@inherits] - what the Class or Constructor inherits.</li>\n<li>[DocumentJS.tags.parent|@parent] - says under which parent the current type should be located. </li>\n<li>[DocumentJS.tags.param|@param] - A function's parameter.</li>\n<li>[DocumentJS.tags.plugin|@plugin] - by which plugin this object gets steald.</li>\n<li>[DocumentJS.tags.return|@return] - what a function returns.</li>\n<li>[DocumentJS.tags.scope|@scope] - forces the current type to start scope.</li>\n<li>[DocumentJS.tags.tag|@tag] - tags for searching.</li>\n<li>[DocumentJS.tags.test|@test] - link for test cases.</li>\n<li>[DocumentJS.tags.type|@type] - sets the type for the current commented code.</li>\n<li>[DocumentJS.tags.image|@image] - adds an image.</li>\n<li>[DocumentJS.tags.release|@release] - specifies the release.</li>\n</ul>\n\n<h3>Inspiration</h3>\n\n<p>DocumentJS was inspired by the [http://api.jquery.com/ jQuery API Browser] by [http://remysharp.com/ Remy Sharp]</p>", "parents": ["index"], "order": 4, "description": "A documentation framework.", "params": {"scripts": {"order": 0, "description": "<p>an array of script objects that have src and text properties like:</p>\n\n<pre><code class='javascript'>[{src: \"path/to/file.js\", text: \"var a= 1;\"}, { ... }]</code></pre>", "name": "scripts", "type": "Array|String", "optional": false}, "options": {"order": 1, "description": "<p>an options hash including</p>\n\n<p>. name - the name of the application\n  . out - where to generate the documentation files</p>", "name": "options", "type": "Object", "optional": false}}, "src": {"query": "", "fragment": "", "path": "documentjs/documentjs.js", "dir": {"prototype": {}}, "filename": {"prototype": {}}, "ext": {"prototype": {}}, "domain": {"prototype": {}}, "isCrossDomain": {"prototype": {}}, "isRelativeToDomain": {"prototype": {}}, "hash": {"prototype": {}}, "search": {"prototype": {}}, "add": {"prototype": {}}, "join": {"prototype": {}}, "normalize": {"prototype": {}}, "isRelative": {"prototype": {}}, "pathTo": {"prototype": {}}, "mapJoin": {"prototype": {}}, "addJS": {"prototype": {}}, "toString": {"prototype": {}}, "insertMapping": {"prototype": {}}}, "line": 11, "children": ["DocumentJS.types", "DocumentJS.tags"]})