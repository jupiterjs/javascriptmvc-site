c({"name": "playermx", "type": "page", "comment": "<p>This article walks through a simple video player application utilizing Popcorn.js. We'll cover:</p>\n\n<ul>\n<li>Setting up the application</li>\n<li>Templated events with [can.Control]</li>\n<li>How PlayerMX is built</li>\n</ul>\n\n<h2>Setup</h2>\n\n<p>There's two options to install PlayerMX: getjs or using git.</p>\n\n<h3>Download with getjs</h3>\n\n<p>After downloading and [installing installing JavaScriptMVC], run the following command:</p>\n\n<p><code>./js steal/getjs player</code></p>\n\n<p><em>Note: When running the getjs command, be sure to navigate to your [rootfolder JavaScriptMVC root folder].</em></p>\n\n<h3>Github</h3>\n\n<p>From a directory of your choice:</p>\n\n<p><em>Clone files to your local drive</em> <br />\n<code>$ git clone https://github.com/jupiterjs/playermx.git</code>  </p>\n\n<p><em>Navigate to application directory and initialize submodules</em> <br />\n<code>$ cd playermx <br />\n$ git submodule update  --init</code></p>\n\n<h3>Running</h3>\n\n<p>Open player/player.html in your browser and see the application run:</p>\n\n<p><img class='image_tag' src='tutorials/images/playermx.png' />\n<em>Note: Safari and Chrome currently support the mp4 codec, however Firefox requires the h.264 Flash player to process mp4's.</em></p>\n\n<p>You can see our version running here: <a href=\"http://javascriptmvc.com/player/player.html\">http://javascriptmvc.com/player/player.html</a></p>\n\n<p>Repo: <a href=\"https://github.com/jupiterjs/playermx\">https://github.com/jupiterjs/playermx</a></p>\n\n<h2>PopcornJS Overview</h2>\n\n<p>Repo: <a href=\"https://github.com/cadecairos/popcorn-js\">https://github.com/cadecairos/popcorn-js</a></p>\n\n<blockquote>\n  <p><em>Popcorn.js is an event framework for HTML5 media. Popcorn.js utilizes the native HTMLMediaElement properties,\n  methods and events, normalizes them into an easy to learn API and provides a plugin system for community contributed interactions.</em></p>\n  \n  <p><em><a href=\"http://popcornjs.org/documentation\">Source: http://popcornjs.org/documentation</a></em></p>\n</blockquote>\n\n<p>Popcorn.js wraps up our mp4 file into a <code>video</code> object which we can pass to our widgets.\nOur widgets can then play and pause the video based on user interaction. The Popcorn.js API we'll be using is:</p>\n\n<ul>\n<li>Events:\n<ul><li>play - triggered when video plays</li>\n<li>pause - triggered when a video is paused</li>\n<li>timeupdate - triggered continuously during video playback</li></ul></li>\n<li>Properties:\n<ul><li>paused - boolean, true if the video is paused</li></ul></li>\n<li>Methods:\n<ul><li>play() - begins playing video, triggers \"play\" event</li>\n<li>pause() - pauses video, triggers \"pause\" event</li>\n<li>currentTime() - gets the current playback position in milliseconds</li>\n<li>duration() - gets length of the video in milliseconds</li></ul></li>\n</ul>\n\n<h2>Templated Events Overview</h2>\n\n<p>PlayerMX introduces the concept of binding events to JavaScript objects other than DOM elements.\nThis application uses the event syntax: <code>{myObject} click</code>, where <code>myObject</code> is the object and <code>click</code> is the event we're listening to.\nThis is what we call templated events.</p>\n\n<p>Templated events create a simple way to bind events without concern for cleanup.\nFor example, binding an event to a DOM element with $.bind(), will be removed when you call $.remove() on that element.\nHowever, if you want to listen to events on a model, templated events handle the unbinding for you.\nIn essence, memory concerns are reduced with templated events.</p>\n\n<p>Specifically with PlayerMX, our widgets listen to events produced by our Popcorn video element.\nIf that element is removed from our page, by using templated events, we don't need to worry about cleaning up bound methods.</p>\n\n<h2>PlayerMX Architecture</h2>\n\n<p>Once you've downloaded the application, you'll notice 3 folders within your <code>playermx</code> directory.\nA few notes on the directory structure of this application:</p>\n\n<ul>\n<li>The <code>can</code> folder refers to <a href=\"https://github.com/jupiterjs/canjs\">CanJS</a>.\nThis is the CanJS core and what we'll be building our application on.</li>\n<li>The <code>jquery</code> folder refers to <a href=\"https://github.com/jupiterjs/jquerypp\">jQuery++</a>.\nThis adds useful events like [resize jQuery.event.resize] and [jQuery.event.drag drag] which will be used in the player.</li>\n<li>The <a href=\"https://github.com/jupiterjs/steal\">steal</a> folder is our dependency management system.\nThis is how we include other resources such as scripts, stylesheets, templates or other JavaScriptMVC resources and apps altogether.</li>\n<li>The <code>player</code> folder is where we'll place our focus as this is the main directory for our application.  </li>\n</ul>\n\n<p>The application is broken up into one main application page, <code>player.html</code>, with a corresponding script,\n<code>player.js</code> and two corresponding widgets.</p>\n\n<p><img class='image_tag' src='tutorials/images/playermx_overview.png' /></p>\n\n<h3>player.js</h3>\n\n<p><code>Player.js</code> is our main application script. <code>Steal</code> loads the widgets we want, and then we initialize them.\nThis loosely couples our widgets from our application. The variable <code>video</code> is our reference to the Popcorn.js wrapped object.\n<code>play</code> and <code>player_position</code> accept this object as a parameter.</p>\n\n<pre><code>steal('./play.js',\n  './position.js',\n\n  function() {\n    var video = Popcorn(\"#trailer\");\n\n    new Play('#play', { video: video });\n    new PlayerPosition('#position', { video: video });\n});\n</code></pre>\n\n<p>The first line of <code>player.js</code> is our call to <code>steal</code>. This is going to load all our dependencies.\nIn this case, we load <code>play.js</code> and <code>position.js</code>, then execute a function.</p>\n\n<h3>play.js</h3>\n\n<p><img class='image_tag' src='tutorials/images/playermx_play.png' /></p>\n\n<pre><code>steal('player/popcorn',\n  'can/control',\n\n  function() {\n</code></pre>\n\n<p>The purpose of this widget is to control the video playback. Listening to the <code>play</code> and <code>pause</code> events on the Popcorn.js object,\nwe'll add a CSS class designating playback state.</p>\n\n<p>Our widget will be created using <code>$.Controller</code>. By naming our controller \"play\", we have now have a <code>jQuery.fn.play()</code> method.\n<code>init</code> is the constructor method for our controller. Any passed parameters are accessible via <code>options</code> on the controller.</p>\n\n<pre><code>    can.Control('Play', {\n      init : function(){\n        if( this.options.video.video.paused ) {\n          this.element.text(\"play\")\n        } else {\n          this.element.text(\"stop\")\n        }\n      },\n</code></pre>\n\n<p>Within player.js, we've passed a video object to our controller.\nUsing templated events, we can listen to the events directly on this object.\nTemplated events allow listening to events on any object, not just DOM events.\nIn the code below, \"{video}\" refers to our object and \"play\" is the event we'll listen for.</p>\n\n<pre><code>      \"{video} play\" : function() {\n        this.element.text(\"stop\").addClass('stop')\n      },\n\n      \"{video} pause\" : function() {\n        this.element.text(\"play\").removeClass('stop')\n      },\n</code></pre>\n\n<p>We'll listen to clicks within the parent element and call the play/pause methods, depending on current state.\nThe separation of the click handler and the play/pause handlers is for extensibility.\nWe may have multiple widgets that control the playback of our video and each widget should be able to respond accordingly.</p>\n\n<pre><code>      click : function() {\n        if( this.options.video.video.paused ) {\n          this.options.video.play()\n        } else {\n          this.options.video.pause()\n        }\n      }\n  });\n});\n</code></pre>\n\n<h3>position.js</h3>\n\n<p><img class='image_tag' src='tutorials/images/playermx_position.png' /></p>\n\n<pre><code>steal('player/popcorn',\n  'can/control',\n  'jquery/dom/dimensions',\n  'jquery/event/resize',\n  'jquery/event/drag/limit',\n</code></pre>\n\n<p>The PlayerPosition widget shows a progression bar for our video. This should not only display playback position, but be draggable as well\n<code>this</code> in the following context refers to our widget instance. Our progress indicator will be accessible via the <code>moving</code> property.\nA simple div will suffice for this example and we'll set some basic css properties such as position and dimensions.</p>\n\n<pre><code>  function() {\n    can.Control('PlayerPosition', {\n      init : function(){\n        this.moving = $(\"&lt;div&gt;\").css({\n          position: 'absolute',\n          left: \"0px\"\n        })\n\n        this.element.css(\"position\",\"relative\")\n          .append(this.moving);\n\n        this.moving.outerWidth( this.element.height() );\n        this.moving.outerHeight( this.element.height() );\n\n      },\n</code></pre>\n\n<p>The widget listens to the Popcorn.js <code>timeupdate</code> event on our video model to recalculate our indicator position.\nWe've separated the event listener from the resize method to allow for any other widgets that may be listening to <code>timeupdate</code>.</p>\n\n<pre><code>      \"{video} timeupdate\" : function(video){\n        this.resize()\n      },\n      resize : function(){\n        var video = this.options.video,\n          percent = video.currentTime() / video.duration(),\n          width = this.element.width() - this.moving.outerWidth();\n\n        this.moving.css(\"left\", percent*width+\"px\")\n      },\n</code></pre>\n\n<p><em>Note: <code>draginit</code> and <code>dragend</code> are a couple of events provided by [jQuery++ jquerypp]. [jQuery.Drag jQuery.Drag]</em></p>\n\n<p>The drag events are scoped to the indicator div element.\nWe can now call the Popcorn.js <code>play</code> and <code>pause</code> methods, trusting other widgets to respond as needed. In this app, these events will get picked up by our 'Play' widget to start/stop the playback.</p>\n\n<pre><code>      \"div draginit\" : function(el, ev, drag){\n        this.options.video.pause()\n        drag.limit(this.element)\n      },\n      \"div dragend\" : function(el, ev, drag){\n        var video = this.options.video,\n          width = this.element.width() - this.moving.outerWidth()\n          percent = parseInt(this.moving.css(\"left\"), 10) / width;\n\n        video.currentTime(  percent * video.duration()  );\n        video.play()\n      }\n    });\n});\n</code></pre>\n\n<h2>Conclusion</h2>\n\n<p>The secret to building large applications is to never build large applications.</p>\n\n<p>Applications can quickly become overwhelming, complex and difficult to maintain.\nThe takeaway from the PlayerMX architecture is to create isolated, dumb widgets that can be tied together with events.\nThis article is an example of how to loosely couple your widgets, use templated events and integrate with an API (Popcorn.js).</p>", "title": "PlayerMX", "parents": ["examples"], "order": 1, "src": "tutorials/examples/playermx.md", "children": []})