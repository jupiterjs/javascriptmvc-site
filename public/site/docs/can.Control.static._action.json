c({"name": "can.Control.static._action", "params": {"methodName": {"description": "<p>the method that will be bound</p>", "type": "Object", "optional": false, "order": 0, "name": "methodName"}, "options": {"description": "<p>first param merged with class default options</p>", "type": "Object", "optional": true, "order": 1, "name": "options"}}, "ret": {"description": "<p>null or the processor and pre-split parts. <br />\nThe processor is what does the binding/subscribing.</p>", "type": "Object"}, "type": "function", "parents": ["can.Control.static"], "comment": "<p>Takes a method name and the options passed to a control\nand tries to return the data necessary to pass to a processor\n(something that binds things).</p>\n\n<p>For performance reasons, this called twice.  First, it is called when \nthe Control class is created.  If the methodName is templated\nlike: \"{window} foo\", it returns null.  If it is not templated\nit returns event binding data.</p>\n\n<p>The resulting data is added to this.actions.</p>\n\n<p>When a control instance is created, _action is called again, but only\non templated actions.  </p>", "hide": true, "src": {"query": "", "fragment": "", "path": "can/control/control.js", "dir": {"prototype": {}}, "filename": {"prototype": {}}, "ext": {"prototype": {}}, "domain": {"prototype": {}}, "isCrossDomain": {"prototype": {}}, "isRelativeToDomain": {"prototype": {}}, "hash": {"prototype": {}}, "search": {"prototype": {}}, "add": {"prototype": {}}, "join": {"prototype": {}}, "normalize": {"prototype": {}}, "isRelative": {"prototype": {}}, "pathTo": {"prototype": {}}, "mapJoin": {"prototype": {}}, "addJS": {"prototype": {}}, "toString": {"prototype": {}}, "insertMapping": {"prototype": {}}}, "line": 111, "children": []})