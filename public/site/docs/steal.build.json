c({"name": "steal.build", "params": {"url": {"description": "<p>an html page to compress</p>", "type": "String", "optional": false, "order": 0, "name": "url"}, "options": {"description": "<p>An object literal with the following optional values:</p>\n\n<table class='options'>\n      <tr>\n          <th>Name</th><th>Description</th>\n      </tr>\n      <tr><td>to</td>\n          <td>The folder to put the production.js and production.css files.</td></tr>\n      <tr><td>minify</td>\n          <td>Defaults to true.</td></tr>\n      <tr><td>all</td>\n      <td>Concat and compress all scripts and styles.  By default, this is set to false, meaning\n          scripts and styles have to opt into being compress with the <code>compress='true'</code> attribute.</td></tr>\n    </table>", "type": "Object", "optional": false, "order": 1, "name": "options"}}, "ret": {"type": "undefined", "description": ""}, "type": "function", "comment": "<p>Builds an html page's JavaScript and CSS files by compressing and concatenating them into\na single or several files.\n</p>\n\n<p>Steal can also build multiple applications at the same time and separate\n    shared dependencies into standalone cache-able scripts.</p>\n<h2>How it works</h2>\n<p><code>Steal.build</code> opens a page in Envjs to extract all scripts and styles\nfrom the page.  It compresses the resources into production.js and production.css\nfiles.</p>\n<p>Steal.build works with or without using steal.js, so it could work with other script loaders.</p>\n\n\n<h2>Building with steal.js.</h2>\n<p>Building with steal is easy, just point the <code>steal/buildjs</code> script at your page and\ngive it the name of your application folder:</p>\n\n<pre><code class='no-highlight'>js steal/buildjs path/to/page.html -to myapp</code></pre><p>If you generated a steal app or plugin, there's a handy script already ready for you:</p>\n\n<pre><code class='no-highlight'>js myapp/scripts/build.js</code></pre><h2>Building without steal.js</h2>\nYou can compress and package any page's JavaScript by adding <code>compress=\"true\"</code>\nattributes to your script tag like the following:\n\n<pre><code class='html'>&lt;script src=\"file1.js\" type=\"text/javascript\" compress=\"true\">&lt;/script>\n&lt;script src=\"file2.js\" type=\"text/javascript\" compress=\"true\">&lt;/script></code></pre>and then running either:\n\n<pre><code class='no-highlight'>js steal/buildjs path/to/page.html -to [OUTPUT_FOLDER]</code></pre>or:\n\n<pre><code class='no-highlight'>js steal/buildjs http://hostname/path/page.html -to [OUTPUT_FOLDER]</code></pre>This will compress file1.js and file2.js into a file package named production.js an put it in OUTPUT_FOLDER.\n\n<h2>Common Problems</h2>\n<p>If you are getting errors building a production build, it's almost certainly because Envjs is\nclose, but not quite a fully featured browser.  So, you have to avoid doing things in your page that\nEnvjs doesn't like before onload.  The most common problems are:</p>\n<h5>Malformed HTML or unescaped characters</h5>\n<p>Steal does not have as tolerant of an HTML parser as Firefox.  Make sure your page's tags look good.\nAlso, make sure you escape characters like &amp; to &amp;amp;\n</p>\n\n<h5>DOM manipulations before onload</h5>\n\n<p>EnvJS supports most DOM manipulations.  But, it's not a graphical browser so it completely punts\non styles and dimensional DOM features.  It's easy to protect against this, just wait until\ndocument ready or onload to do these things.\n</p>\n\n<h5>Unending timeouts or intervals before onload</h5>\n\n<p>Envjs won't quit running until all timeouts or intervals have completed.  If you have a reoccuring\n'process', consider starting it on document ready or onload.</p>\n<h2>Building With Shared Dependencies</h2>\n<p>\nIf you are using steal in a setting with multiple pages loading similar\nfunctionality, it's typically a good idea to build the shared functionality in\nits own script.  This way when a user switches pages, they don't have to load\nthat functionality again.\n</p>\n\n<p>\nTo do this, use the buildjs script with the names of your apps:\n</p>\n\n<p><pre><code class='javascript'>./js steal/buildjs myco/search myco/searchresults music</code></pre><h2>steal.build function</h2>\nTakes a url, extracts</p>", "parents": ["stealjs"], "src": {"query": "", "fragment": "", "path": "steal/build/build.js", "dir": {"prototype": {}}, "filename": {"prototype": {}}, "ext": {"prototype": {}}, "domain": {"prototype": {}}, "isCrossDomain": {"prototype": {}}, "isRelativeToDomain": {"prototype": {}}, "hash": {"prototype": {}}, "search": {"prototype": {}}, "add": {"prototype": {}}, "join": {"prototype": {}}, "normalize": {"prototype": {}}, "isRelative": {"prototype": {}}, "pathTo": {"prototype": {}}, "mapJoin": {"prototype": {}}, "addJS": {"prototype": {}}, "toString": {"prototype": {}}, "insertMapping": {"prototype": {}}}, "line": 8, "children": ["steal.build.pluginify"]})