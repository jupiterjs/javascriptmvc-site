c({"name": "steal.generate", "params": {"path": {"description": "<p>the folder to get templates from</p>", "type": "String", "optional": false, "order": 0, "name": "path"}, "where": {"description": "<p>where to put the results of the rendered templates</p>", "type": "String", "optional": false, "order": 1, "name": "where"}, "data": {"description": "<p>data to render the templates with.  If force is true, it will overwrite everything</p>", "type": "Object", "optional": false, "order": 2, "name": "data"}}, "ret": {"type": "undefined", "description": ""}, "type": "function", "comment": "<p>The Generate plugin makes building code generators crazy easy.\nStealJS comes with its own app generator.  JavaScriptMVC has more complex generators.</p>\n\n<h2>Steal Generators</h2>\n\n<h3>app</h3>\n\n<p>Creates an application structure, build and clean scripts.</p>\n\n<pre><code class='text'>js steal/generate/app <i>path/to/app</i> [OPTIONS]</code></pre>\n\n<ul>\n<li>path/to/app - The lowercase path you want your application in. </li>\n</ul>\n\n<h2>JavaScriptMVC Generators</h2>\n\n<h3>app</h3>\n\n<p>Creates a JavaScriptMVC application structure.</p>\n\n<pre><code class='text'>js jquery/generate/app <i>path/to/app</i> [OPTIONS]</code></pre>\n\n<ul>\n<li>path/to/app - The lowercase path you want your application \nin. Keep application names short because they \nare used as namespaces.  The last part of the path \nwill be taken to be your application's name.</li>\n</ul>\n\n<h3>controller</h3>\n\n<p>Creates a [jQuery.Controller $.Controller] and test files.</p>\n\n<pre><code class='text'>js jquery/generate/controller <i>App.Videos</i> [OPTIONS]</code></pre>\n\n<ul>\n<li>App.Videos - The namespaced name of your controller.  For \nexample, if your controller is \nnamed <code>Cookbook.Recipes</code>, the generator will \ncreate  <code>cookbook/recipes.js</code>. </li>\n</ul>\n\n<h3>model</h3>\n\n<p>Creates a [jQuery.Model] and test files.</p>\n\n<pre><code class='text'>js jquery/generate/model <i>App.Models.Name</i> [TYPE] [OPTIONS]</code></pre>\n\n<ul>\n<li>App.Models.Name - The namespaced name of your \nmodel. For example, if your model is \nnamed <code>Cookbook.Models.Recipe</code>, the \ngenerator will \ncreate <code>cookbook/models/recipe.js</code>. </li>\n</ul>\n\n<h3>page</h3>\n\n<p>Creates a page that loads steal.js and an application.</p>\n\n<pre><code class='text'>js jquery/generate/model <i>path/to/app</i> <i>path/to/page.html</i></code></pre>\n\n<ul>\n<li>path/to/app - The path to your apps folder. </li>\n<li>path/to/page.html - The path to the page you want to create. </li>\n</ul>\n\n<h3>plugin</h3>\n\n<p>Use plugin to create a file and \nfolder structure for basic jQuery plugins.</p>\n\n<pre><code class='text'>js jquery/generate/plugin <i>path/to/plugin</i> [OPTIONS]</code></pre>\n\n<ul>\n<li>path/to/plugin - The path to where you want \nyour plugin. </li>\n</ul>\n\n<h3>scaffold</h3>\n\n<p>Creates the controllers, models, and fixtures used\nto provide basic CRUD functionality..</p>\n\n<pre><code class='text'>js jquery/generate/scaffold <i>App.Models.ModelName</i> [OPTIONS]</code></pre>\n\n<ul>\n<li>App.Models.ModelName - The model resource you want to add CRUD functionality to.</li>\n</ul>\n\n<h2>The Generator Function</h2>\n\n<p>Renders a folders contents with EJS and data and then copies it to another folder.</p>\n\n<pre><code class='javascript'>steal.generate(\n  \"path/to/my_template_folder\",\n  \"render/templates/here\", \n  {\n    data: \"to be used\"\n  })</code></pre>", "plugin": "steal/generate", "parents": ["stealjs"], "src": {"query": "", "fragment": "", "path": "steal/generate/generate.js", "dir": {"prototype": {}}, "filename": {"prototype": {}}, "ext": {"prototype": {}}, "domain": {"prototype": {}}, "isCrossDomain": {"prototype": {}}, "isRelativeToDomain": {"prototype": {}}, "hash": {"prototype": {}}, "search": {"prototype": {}}, "add": {"prototype": {}}, "join": {"prototype": {}}, "normalize": {"prototype": {}}, "isRelative": {"prototype": {}}, "pathTo": {"prototype": {}}, "mapJoin": {"prototype": {}}, "addJS": {"prototype": {}}, "toString": {"prototype": {}}, "insertMapping": {"prototype": {}}}, "line": 42, "children": []})