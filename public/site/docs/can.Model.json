c({"name": "can.Model", "src": "can/model/model.md", "line": 8, "children": ["can.Model.static", "can.Model.prototype"], "type": "class", "comment": "<p>Model adds service encapsulation to [can.Observe].  Model lets you:</p>\n\n<ul>\n<li>Get and modify data from the server</li>\n<li>Listen to changes by the server</li>\n<li>Unifying service data into the same objects</li>\n</ul>\n\n<h2>Get and modify data fron the server</h2>\n\n<p>can.Model makes connecting to a JSON REST service \nreally easy.  The following models <code>todos</code> by\ndescribing the services that can create, retrieve,\nupdate, and delete todos. </p>\n\n<pre><code>Todo = can.Model({\n  findAll: 'GET /todos.json',\n  findOne: 'GET /todos/{id}.json',\n  create:  'POST /todos.json',\n  update:  'PUT /todos/{id}.json',\n  destroy: 'DELETE /todos/{id}.json' \n},{});\n</code></pre>\n\n<p>This lets you create, retrieve, update, and delete\ntodos programatically:</p>\n\n<p><strong>Create</strong></p>\n\n<p>Create a todo instance and \ncall <code>[can.Model::save save](success, error)</code>\nto create the todo on the server.</p>\n\n<pre><code>// create a todo instance\nvar todo = new Todo({name: \"do the dishes\"})\n\n// save it on the server\ntodo.save();\n</code></pre>\n\n<p><strong>Retrieve</strong></p>\n\n<p>Retrieve a list of todos from the server with\n<code>[can.Model.findAll findAll](params, success(items), error)</code>: </p>\n\n<pre><code>Todo.findAll({}, function( todos ){\n\n  // print out the todo names\n  $.each(todos, function(i, todo){\n    console.log( todo.name );\n  });\n});\n</code></pre>\n\n<p>Retrieve a single todo from the server with\n<code>[can.Model.findOne findOne](params, success(item), error)</code>:</p>\n\n<pre><code>Todo.findOne({id: 5}, function( todo ){\n\n  // print out the todo name\n  console.log( todo.name );\n});\n</code></pre>\n\n<p><strong>Update</strong></p>\n\n<p>Once an item has been created on the server,\nyou can change its properties and call\n<code>save</code> to update it on the server.</p>\n\n<pre><code>// update the todos' name\ntodo.attr('name','Take out the trash')\n\n// update it on the server\ntodo.save()\n</code></pre>\n\n<p><strong>Destroy</strong></p>\n\n<p>Call <code>[can.Model.prototype.destroy destroy](success, error)</code>\nto delete an item on the server.</p>\n\n<pre><code>todo.destroy()\n</code></pre>\n\n<h2>Listen to changes in data</h2>\n\n<p>Listening to changes in data is a critical part of \nthe [http://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller Model-View-Controller]\narchitecture.  can.Model lets you listen to when an item is created, updated, destroyed\nor its properties are changed. Use \n<code>Model.[can.Model.bind bind](eventType, handler(event, model))</code>\nto listen to all events of type on a model and\n<code>model.[can.Model.prototype.bind bind](eventType, handler(event))</code>\nto listen to events on a specific instance.</p>\n\n<p><strong>Create</strong></p>\n\n<pre><code>// listen for when any todo is created\nTodo.bind('created', function( ev, todo ) {...})\n\n// listen for when a specific todo is created\nvar todo = new Todo({name: 'do dishes'})\ntodo.bind('created', function( ev ) {...})\n</code></pre>\n\n<p><strong>Update</strong></p>\n\n<pre><code>// listen for when any todo is updated\nTodo.bind('updated', function( ev, todo ) {...})\n\n// listen for when a specific todo is created\nTodo.findOne({id: 6}, function( todo ) {\n  todo.bind('updated', function( ev ) {...})\n})\n</code></pre>\n\n<p><strong>Destroy</strong></p>\n\n<pre><code>// listen for when any todo is destroyed\nTodo.bind('destroyed', function( ev, todo ) {...})\n\n// listen for when a specific todo is destroyed\ntodo.bind('destroyed', function( ev ) {...})\n</code></pre>\n\n<p><strong>Property Changes</strong></p>\n\n<pre><code>// listen for when the name property changes\ntodo.bind('name', function(ev){  })\n</code></pre>\n\n<p><strong>Listening with can.Control</strong></p>\n\n<p>You should be using can.Control to listen to model changes like:</p>\n\n<pre><code>Todos = can.Control({\n  \"{Todo} updated\" : function(Todo, ev, todo) {...}\n})\n</code></pre>", "parents": ["canjs"]})