c({"name": "funcunit.getstarted", "type": "page", "comment": "<p>In this guide, we'll use [FuncUnit] to write functional tests for the jQuery UI \nautocomplete widget. We'll go over:</p>\n\n<ul>\n<li>Running a test in browser</li>\n<li>Writing a test</li>\n<li>Debugging a broken test</li>\n<li>Running tests via Selenium</li>\n<li>Running tests via PhantomJS</li>\n</ul>\n\n<h2>Running Autocomplete Tests</h2>\n\n<p>Open <em>funcunit/test/autosuggest/autosuggest.html</em> in a browser.  Type \"J\" in the input.  You'll see the following:</p>\n\n<p><img class='image_tag' src='funcunit/pages/images/autosuggest.png' /></p>\n\n<p>This page is a simple demo app, using jQueryUI [http://jqueryui.com/demos/autocomplete/ autocomplete]. It \nshows results when you start typing, then you can click a result (or use mouse navigation) to populate the input.</p>\n\n<p>There is a test already written.  Open <i>funcunit/test/autosuggest/autosuggest_test.js</i> in your IDE:</p>\n\n<pre><code class='javascript'>module(\"autosuggest\",{\n  setup: function() {\n    S.open('autosuggest.html')\n  }\n});\n\ntest(\"results appear\",function(){\n  S('input').visible().click().type(\"Java\")\n\n  // wait until we have some results\n  S('.ui-menu-item').visible(function(){\n    equal( S('.ui-menu-item').size(), 2, \"there are 2 results\")\n  })\n});</code></pre>\n\n<p>As you can probably tell, the [s S method] is an alias for jQuery (*).  This test:</p>\n\n<ol>\n<li>Opens autosuggest.html</li>\n<li>Grabs the input element, clicks it, and types \"Java\"</li>\n<li>Grabs the element that is populated with results, waits for it to be visible</li>\n<li>Asserts that there are 2 results shown</li>\n</ol>\n\n<p>(*) Actually its a [http://api.jquery.com/jQuery.sub/ copy] of jQuery that performs queries in \nthe application window by default, and sometimes caches its selector to run asynchronously.</p>\n\n<p>To run this test, open <i>funcunit/test/autosuggest/funcunit.html</i> in any browser (turn off your popup blocker).  The test will open and run.  The results are shown in the QUnit page:</p>\n\n<p><img class='image_tag' src='funcunit/pages/images/qunit.png' /></p>\n\n<h2>Writing an Autocomplete Test</h2>\n\n<p>Next we'll add a test for selecting a result with the keyboard.  FuncUnit's [apifuncunit API] consists of:</p>\n\n<ul>\n<li>[funcunit.finding The S Method] - Perform a query in the application window</li>\n<li>[funcunit.actions Actions] - Simulate user actions like [FuncUnit.prototype.click click],  [FuncUnit.prototype.type type],  [FuncUnit.prototype.drag drag]</li>\n<li>[funcunit.waits Waits] - Wait for a condition in your page to be met.  Fail the test if the condition isn't met before a timeout.</li>\n<li>[funcunit.getters Assertions &amp; getters] - Synchronously check a condition in your page.</li>\n</ul>\n\n<p>The setup and assertion methods are part of the [http://docs.jquery.com/Qunit QUnit] API.</p>\n\n<p>Our test should do the following:</p>\n\n<ol>\n<li>Type \"JavaS\" in the input.</li>\n<li>Wait for a result to be visible.</li>\n<li>Select the input and press the down and enter keys to select the first item.</li>\n<li>Wait for the input to show \"JavaScript\".</li>\n</ol>\n\n<p>Add the following under the first test:</p>\n\n<pre><code class='javascript'>test(\"keyboard navigation\",function(){\n  S('input').visible().click().type(\"JavaS\")\n\n  S('.ui-menu-item').visible()\n  S('input').type('[down][enter]')\n    .val(\"JavaScript\")\n});</code></pre>\n\n<p>A few important notes about this test:</p>\n\n<ol>\n<li>We have no assertions. This is ok. Most FuncUnit tests don't need them. If the wait conditions aren't met before a timeout, the test will fail.  If the test completes, this feature is working.</li>\n<li>The click, visible, and val methods are actually doing asynchronous things. FuncUnit lets you write tests with this linear syntax by queueing the actual methods and running them one by one. This is to prevent your tests from being an unreadable mess of nested functions like:</li>\n</ol>\n\n<pre><code class='javascript'>S('.input').visible(function(){\n  S('.input').click(function(){\n    S('input').type(\"JavaS\")\n  })\n})</code></pre>\n\n<p>Reload the funcunit.html page and see your new test run and pass.</p>\n\n<h2>Debugging tests</h2>\n\n<p>Now change .val(\"JavaScript\") to .text(\"C#\").  Reload the page and watch it timeout and fail.</p>\n\n<p><img class='image_tag' src='funcunit/pages/images/broken.png' /></p>\n\n<p>In this case, the error message shown is a good indication for why the test is broken. But often we need \nmore visibility to debug a test.</p>\n\n<p>Your first debugging instinct might be \"Let's add a breakpoint!\".  But, as noted, this \ncode is running asynchronously.  When .val() runs, its adding a method to \nFuncUnit.queue, not actually doing the check.  When its this wait condition's turn to \nrun, $(\"input\").val() === \"JavaScript\" is checked repeatedly until its true or a timeout is reached.  </p>\n\n<p>We can replace the string value with a checker function and use console.log to see what's going on. When \nprevious queued methods finish, this function will run on repeat. Change that line to:</p>\n\n<pre><code class='javascript'>  .val(function(val){\n    console.log(val, this)\n    if(val === \"C#\") return true;\n  });</code></pre>\n\n<p>\"this\" in your wait method is the element that .text is being run against. The console will show the following:</p>\n\n<p><img class='image_tag' src='funcunit/pages/images/console.png' /></p>\n\n<p>Using this technique, you can inspect the state of your app at various points throughout the test. Undo \nthis breaking change before moving on to the next part.</p>\n\n<h2>Running in Selenium</h2>\n\n<p>Next we'll run this same test via the browser automation tool Selenium. Open a \ncommand prompt to the JMVC directory and run the following:</p>\n\n<pre><code class='javascript'>./js funcunit/run selenium funcunit/test/autosuggest/funcunit.html</code></pre>\n\n<p>On windows, just use \"js\" instead of ./js. This will open the test page in \nFirefox, run the same test, and report the results on the command line:</p>\n\n<p><img class='image_tag' src='funcunit/pages/images/commandline.png' /></p>\n\n<p>You can configure this step to run in any browser via the [integrations settings.js file].</p>\n\n<h2>Running in PhantomJS</h2>\n\n<p>Running in Selenium is great, but physically opening a browser can be too slow for quick \nregression testing.  [http://www.phantomjs.org/ PhantomJS] is a headless version of WebKit, which can run the same \ntests from the commandline much faster without opening any visual browser windows. To run \nthis step, first you must [funcunit.phantomjs PhantomJS]. Then run:</p>\n\n<pre><code class='javascript'>./js funcunit/open/phantomjs funcunit/test/autosuggest/funcunit.html</code></pre>\n\n<p>Phantom opens your page, runs the same test, and reports results on the commandline. \nThis step can be easily integrated in your build process via [funcunit.jenkins Jenkins] or [funcunit.maven Maven].</p>\n\n<h2>Conclusion</h2>\n\n<p>Hopefully, this guide illustrates how FuncUnit provides the holy grail of testing: easy, familiar syntax, in browser running for \neasy debugging, and simple automation.  </p>\n\n<p>FuncUnit will transform your development lifecycle, give your developers confidence, and improve quality.</p>\n\n<p>That's it! If you want to learn more, read about FuncUnit's [FuncUnit API] and [funcunit.integrations integrations] \nor check out some [funcunit.demos demos].</p>", "title": "Get Started with FuncUnit", "parents": ["tutorials"], "order": 6, "src": "tutorials/funcunit.md", "children": []})