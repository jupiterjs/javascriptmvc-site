c({"name": "steal.packages", "type": "function", "parents": ["steal"], "comment": "<p><code>steal.packages( packageIds... )</code> defines modules for deferred downloading.</p>\n\n<p>This is used by the build system to build collections of modules that will be downloaded\nafter initial page load.</p>\n\n<p>For example, an application that wants to progressively load the contents and\ndependencies of <em>login/login.js</em>, <em>filemanager/filemanager.js</em>, and <em>contacts/contacts.js</em>,\nwhile immediately loading the current users's data might look like:</p>\n\n<pre><code>steal.packages('login','filemanager','contacts')\nsteal('models/user', function(User){\n\n  // get the current User\n  User.findOne({id: \"current\"}, \n\n    // success - they logged in\n    function(user){\n      if(window.location.hash == \"#filemanager\"){\n        steal('filemanager')  \n      }\n    }, \n    // error - they are logged out\n    function(){\n      steal('login', function(){\n        new Login(document.body);\n        // preload filemanager\n\n      })  \n    })\n})\n\n\n    steal.packages('tasks','dashboard','fileman');\n</code></pre>", "src": {"query": "", "fragment": "", "path": "steal/steal.js", "dir": {"prototype": {}}, "filename": {"prototype": {}}, "ext": {"prototype": {}}, "domain": {"prototype": {}}, "isCrossDomain": {"prototype": {}}, "isRelativeToDomain": {"prototype": {}}, "hash": {"prototype": {}}, "search": {"prototype": {}}, "add": {"prototype": {}}, "join": {"prototype": {}}, "normalize": {"prototype": {}}, "isRelative": {"prototype": {}}, "pathTo": {"prototype": {}}, "mapJoin": {"prototype": {}}, "addJS": {"prototype": {}}, "toString": {"prototype": {}}, "insertMapping": {"prototype": {}}}, "line": 2316, "children": []})