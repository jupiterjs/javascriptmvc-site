c({"name": "can.Construct.prototype.init", "type": "function", "parents": ["can.Construct.prototype"], "comment": "<p>If a prototype <code>init</code> method is provided, it gets called after [can.Construct::setup] when a new instance\nis created. The <code>init</code> method is where your constructor code should go. Typically,\nyou will find it saving the arguments passed to the constructor function for later use. </p>\n\n<h2>Examples</h2>\n\n<p>The following creates a Person constructor with a first and last name property:</p>\n\n<pre><code>var Person = can.Construct({\n  init : function(first, last){\n    this.first = first;\n    this.last = last;\n  }\n})\n\nvar justin = new Person(\"Justin\",\"Meyer\");\njustin.first //-&gt; \"Justin\"\njustin.last  //-&gt; \"Meyer\"\n</code></pre>\n\n<p>The following extends person to create a Programmer constructor</p>\n\n<pre><code>var Programmer = Person({\n  init : function(first, last, lang){\n    // call base functionality\n    Person.prototype.init.call(this, first, last);\n\n    // save the lang\n    this.lang = lang\n  },\n  greet : function(){\n    return \"I am \" + this.first + \" \" + this.last + \". \" +\n           \"I write \" + this.lang + \".\";\n  }\n})\n\nvar brian = new Programmer(\"Brian\",\"Moschel\",\"ECMAScript\")\nbrian.greet() //-&gt; \"I am Brian Moschel.\\\n              //    I write ECMAScript.\"\n</code></pre>\n\n<h2>Notes</h2>\n\n<p>[can.Construct::setup] is able to modify the arguments passed to init.</p>\n\n<p>It doesn't matter what init returns because the <code>new</code> keyword always\nreturns the new object.</p>", "src": {"query": "", "fragment": "", "path": "can/construct/construct.js", "dir": {"prototype": {}}, "filename": {"prototype": {}}, "ext": {"prototype": {}}, "domain": {"prototype": {}}, "isCrossDomain": {"prototype": {}}, "isRelativeToDomain": {"prototype": {}}, "hash": {"prototype": {}}, "search": {"prototype": {}}, "add": {"prototype": {}}, "join": {"prototype": {}}, "normalize": {"prototype": {}}, "isRelative": {"prototype": {}}, "pathTo": {"prototype": {}}, "mapJoin": {"prototype": {}}, "addJS": {"prototype": {}}, "toString": {"prototype": {}}, "insertMapping": {"prototype": {}}}, "line": 359, "children": []})