c({"name": "can.fixture.rand", "params": {"arr": {"description": "<p>An array of items to select from.\nIf a number is provided, a random number is returned.\nIf min and max are not provided, a random number of items are selected\nfrom this array.</p>", "type": "Array|Number", "optional": false, "order": 0, "name": "arr"}, "min": {"description": "<p>If only min is provided, min items\nare selected.</p>", "type": "Number", "optional": true, "order": 1, "name": "min"}, "max": {"description": "<p>If min and max are provided, a random number of\nitems between min and max (inclusive) is selected.</p>", "type": "Number", "optional": true, "order": 2, "name": "max"}}, "ret": {"type": "undefined", "description": ""}, "type": "function", "comment": "<p><code>can.fixture.rand</code> creates random integers or random arrays of\nother arrays.</p>\n\n<h2>Examples</h2>\n\n<pre><code>var rand = can.fixture.rand;\n\n// get a random integer between 0 and 10 (inclusive)\nrand(11);\n\n// get a random number between -5 and 5 (inclusive)\nrand(-5, 6);\n\n// pick a random item from an array\nrand([\"j\",\"m\",\"v\",\"c\"],1)[0]\n\n// pick a random number of items from an array\nrand([\"j\",\"m\",\"v\",\"c\"])\n\n// pick 2 items from an array\nrand([\"j\",\"m\",\"v\",\"c\"],2)\n\n// pick between 2 and 3 items at random\nrand([\"j\",\"m\",\"v\",\"c\"],2,3)\n</code></pre>", "parents": ["can.fixture"], "src": {"query": "", "fragment": "", "path": "can/util/fixture/fixture.js", "dir": {"prototype": {}}, "filename": {"prototype": {}}, "ext": {"prototype": {}}, "domain": {"prototype": {}}, "isCrossDomain": {"prototype": {}}, "isRelativeToDomain": {"prototype": {}}, "hash": {"prototype": {}}, "search": {"prototype": {}}, "add": {"prototype": {}}, "join": {"prototype": {}}, "normalize": {"prototype": {}}, "isRelative": {"prototype": {}}, "pathTo": {"prototype": {}}, "mapJoin": {"prototype": {}}, "addJS": {"prototype": {}}, "toString": {"prototype": {}}, "insertMapping": {"prototype": {}}}, "line": 784, "children": []})