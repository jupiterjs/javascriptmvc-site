c({"name": "routes", "type": "attribute", "comment": "<p>A list of routes recognized by the router indixed by the url used to add it.\nEach route is an object with these members:</p>\n\n<ul>\n<li><p>test - A regular expression that will match the route when variable values \nare present; i.e. for :page/:type the <code>RegExp</code> is /([\\w.]<em>)/([\\w.]</em>)/ which\nwill match for any value of :page and :type (word chars or period).</p></li>\n<li><p>route - The original URL, same as the index for this entry in routes.</p></li>\n<li><p>names - An array of all the variable names in this route</p></li>\n<li><p>defaults - Default values provided for the variables or an empty object.</p></li>\n<li><p>length - The number of parts in the URL separated by '/'.</p></li>\n</ul>", "attribute_type": "@type Object", "hide": true, "src": {"query": "", "fragment": "", "path": "can/route/route.js", "dir": {"prototype": {}}, "filename": {"prototype": {}}, "ext": {"prototype": {}}, "domain": {"prototype": {}}, "isCrossDomain": {"prototype": {}}, "isRelativeToDomain": {"prototype": {}}, "hash": {"prototype": {}}, "search": {"prototype": {}}, "add": {"prototype": {}}, "join": {"prototype": {}}, "normalize": {"prototype": {}}, "isRelative": {"prototype": {}}, "pathTo": {"prototype": {}}, "mapJoin": {"prototype": {}}, "addJS": {"prototype": {}}, "toString": {"prototype": {}}, "insertMapping": {"prototype": {}}}, "line": 260, "children": []})