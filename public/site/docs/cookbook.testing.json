c({"name": "cookbook.testing", "type": "page", "comment": "<p>JavaScriptMVC puts a tremendous emphasis on \ntesting. It uses [FuncUnit] to easily write \ntests that can be run in the browser or automated. FuncUnit\nintegrates:</p>\n\n<ul>\n<li>QUnit - Assertions and testing structure</li>\n<li>Syn - Synthetic user events like clicking and typing</li>\n<li>Selenium / PhantomJS - Browser automation</li>\n</ul>\n\n<p>When you scaffolded recipe, it created tests and test pages for you. This \nguide will show you how to:</p>\n\n<ul>\n<li>Run tests.</li>\n<li>Understand the unit tests.</li>\n<li>Run functional tests.</li>\n<li>Understand the functional tests.</li>\n<li>Test isTasty functionality.</li>\n</ul>\n\n<h2>Run Tests</h2>\n\n<p>To run all of <strong>cookbook's</strong> tests, open\n<code>cookbook/test.html</code> in a browser. You should\nsee something like [//cookbook/test.html this].</p>\n\n<p>To run those same tests with [funcunit.selenium Selenium], run:</p>\n\n<pre><code>&gt; ./js funcunit/open/selenium cookbook/test.html\n</code></pre>\n\n<p>You should see something like:</p>\n\n<p><img class='image_tag' src='tutorials/getstarted/selenium-run.png' /></p>\n\n<div class='whisper'>\n    If Selenium is unable to open your browsers, it's likely you have them in an\n    unusual location.  Read the Other Browsers section in [funcunit.selenium Selenium] \n    docs for information on how to configure browsers so selenium can find them.\n</div>\n\n<p>Continue to [building.cookbook Building Cookbook] or continuen reading to learn how\nthis code works.</p>\n\n<h2>Tiered testing</h2>\n\n<p>If an application should be built of small, isolated modules that are glued together, its tests should reflect that.</p>\n\n<p>Cookbook's modules are each designed to be built and tested independently. For example, the <code>cookbook/recipe/create</code> module has its own tests and test page. Open [//cookbook/recipe/create/test.html cookbook/recipe/create/test.html]\nand it will run the tests in  <code>cookbook/recipe/create/create_test.js</code>.</p>\n\n<p>To test the \"glue\", <code>cookbook_test.js</code> loads all modules' tests \nand provides an integration test, verifying the application as a whole works as expected.</p>\n\n<p>The following goes through:</p>\n\n<ul>\n<li>cookbook/models/recipe_test.js</li>\n<li>cookbook/recipe/create/create_test.js</li>\n<li>cookbook/recipe/list/list_test.js</li>\n<li>cookbook/cookbook_test.js</li>\n</ul>\n\n<h2>recipe_test.js</h2>\n\n<p><code>cookbook/models/recipe_test.js</code> unit tests the \n<code>cookbook/models/recipe</code>, module which is aliased as Recipe. It starts \nby loading the <code>Recipe</code> model, QUnit, and the fixtures\nused to simulate the server:</p>\n\n<pre><code>steal( \"./recipe.js\", \n    \"funcunit/qunit\", \n    \"cookbook/models/fixtures\", \n    function( Recipe ){\n</code></pre>\n\n<p>Next it specifies which module the following tests belong to:</p>\n\n<pre><code>module(\"cookbook/models/recipe\");\n</code></pre>\n\n<p>Then, it defines a <code>findAll</code> test: </p>\n\n<pre><code>test(\"findAll\", function(){\n    expect(4);\n    stop();\n    Recipe.findAll({}, function(recipes){\n        ok(recipes)\n        ok(recipes.length)\n        ok(recipes[0].name)\n        ok(recipes[0].description)\n        start();\n    });\n});\n</code></pre>\n\n<p>The <code>findAll</code> test calls <code>Recipe.findAll</code> and\nattempts to verify that it returns recipes with\na name and description.</p>\n\n<p>Because <code>Recipe.findAll</code> is asynchronous, this\ntest calls QUnit's <code>stop</code> and <code>start</code> methods\nto signal when the test is complete.</p>\n\n<p><code>recipe_test.js</code> goes on to test the remainder of \n<code>Recipe</code>'s CRUD methods: create, update, destroy.</p>\n\n<h2>create_test.js</h2>\n\n<p><code>cookbook/recipe/create/create_test.js</code> tests \nthe <code>cookbook/recipe/create</code> module aliased as\nRecipeCreate.  It starts by loading funcunit, the \nRecipeCreate control, the Recipe model and\nthe recipeStore fixture:</p>\n\n<pre><code>steal('funcunit', \n    './create.js',\n    'cookbook/models/recipe.js',\n    'cookbook/models/fixtures', \n    function (S, RecipeCreate, Recipe, recipeStore ) {\n</code></pre>\n\n<p>Next, it defines the module, with setup and teardown \ncode that runs before and after every test:</p>\n\n<pre><code>module(\"cookbook/recipe/create\", {\n    setup: function(){\n        $(\"#qunit-test-area\")\n                  .append(\"&lt;form id='create'&gt;&lt;/form&gt;\");\n        new RecipeCreate(\"#create\");\n    },\n    teardown: function(){\n        $(\"#qunit-test-area\").empty();\n        recipeStore.reset();\n    }\n});\n</code></pre>\n\n<p><code>setup</code> creates a <em>form</em> element and creates a new <code>RecipeCreate</code> instance</p>\n\n<p>on it.  <code>teardown</code> removes the element and [can.fixture.store.reset resets] the\n<code>recipeStore</code> to contain the original set of recipes.</p>\n\n<p><code>create_test.js</code> tests that RecipeCreate can create a recipe:</p>\n\n<pre><code>test(\"create recipes\", function () {\n       ...\n});\n</code></pre>\n\n<p>We are going to create an <strong>Ice Water</strong> recipe, so we\nlisten to a recipe being created and check it's contents like:</p>\n\n<pre><code>stop();\nRecipe.bind(\"created\",function(ev, recipe){\n    ok(true, \"Ice Water added\");\n\n    equals(recipe.name, \n        \"Ice Water\", \n        \"name set correctly\");\n\n    equals(recipe.description, \n        \"Pour water in a glass. Add ice cubes.\", \n        \"description set correctly\" );\n\n    start();\n    Recipe.unbind(\"created\",arguments.callee);\n})\n</code></pre>\n\n<p>As this test is asynchronous, it calls QUnit's stop and start. After\nlistening to Recipes being created, the test creates\na recipe by simulating a user filling in the recipe form and clicking submit:</p>\n\n<pre><code>S(\"[name=name]\").type(\"Ice Water\");\nS(\"[name=description]\").type(\"Pour water in a glass. \"+\n                             \"Add ice cubes.\");\n\nS(\"[type=submit]\").click();\n</code></pre>\n\n<p>Then, it verifies the submit button's value is \"Creating\":</p>\n\n<pre><code>S(\"[type=submit]\").val(\"Creating...\",\n                       \"button text changed while created\");\n</code></pre>\n\n<p>Finally, when the value is changed back to \"Create\", the \ntest checks that the form has been reset: </p>\n\n<pre><code>S(\"[type=submit]\").val(\"Create\", function(){\n    ok(true, \"button text changed back after create\" );\n    equals(S(\"[name=name]\").val(), \"\", \"form reset\");\n    equals(S(\"[name=description]\").val(), \"\", \"form reset\");\n});\n</code></pre>\n\n<h2>list_test.js</h2>\n\n<p><code>cookbook/recipe/list/list_test.js</code> tests the <code>cookbook/recipe/list</code>\nmodule aliased as RecipeList. It starts by loading funcunit, the \nRecipeList control, the Recipe model and\nthe recipeStore fixture:</p>\n\n<pre><code>steal('funcunit', \n    './list.js',\n    'cookbook/models/recipe.js',\n    'cookbook/models/fixtures', \n    function (S, RecipeCreate, Recipe, recipeStore ) {\n</code></pre>\n\n<p>Next, it defines the module it is testing, with setup and teardown \ncode that runs before and after every test:</p>\n\n<pre><code>module(\"cookbook/recipe/list\", {\n    setup: function(){\n        $(\"#qunit-test-area\").append(\"&lt;div id='recipes'&gt;&lt;/div&gt;\");\n        this.list = new RecipeList(\"#recipes\");\n    },\n    teardown: function(){\n        $(\"#qunit-test-area\").empty();\n        recipeStore.reset();\n    }\n});\n</code></pre>\n\n<p><code>setup</code> creates a <em>div</em> element and creates a new <code>RecipeList</code> \ninstance. That list will be accessible within each test as <code>this.list</code>. \n<code>teardown</code> removes the element and [can.fixture.store.reset resets] \nthe <code>recipeStore</code> to contain the original set of recipes.</p>\n\n<p>Then, <code>list_test.js</code> tests that RecipeList displays all\nthe recipes that are loaded on the server:</p>\n\n<pre><code>test(\"lists all recipes\", function(){\n    stop();\n\n    Recipe.findAll({}, function(recipes){\n\n        S(\".recipe\").size(recipes.length,function(){\n            ok(true, \"All recipes listed\");\n\n            start();\n        })\n    })\n});\n</code></pre>\n\n<p>And it tests that created recipes are added to the list of recipes\nby creating a recipe and making sure a corresponding element shows \nup on the page:</p>\n\n<pre><code>test(\"lists created recipes\", function(){\n\n    new Recipe({\n        name: \"Grilled Cheese\",\n        description: \"grill cheese in bread\"\n    }).save();\n\n    S('h3:contains(Grilled Cheese X)')\n                  .exists(\"Lists created recipe\");\n})\n</code></pre>\n\n<p>To test deleting a recipe, <code>list_test.js</code> creates a recipe then\nclicks its destroy link and makes sure the element has been removed:</p>\n\n<pre><code>test(\"delete recipes\", function(){\n    new Recipe({\n        name: \"Ice Water\",\n        description: \"mix ice and water\"\n    }).save();\n\n    // wait until grilled cheese has been added\n    S('h3:contains(Ice Water X)').exists();\n\n    S.confirm(true);\n    S('h3:last a').click();\n\n    S('h3:contains(Ice Water)')\n        .missing(\"Grilled Cheese Removed\");\n\n});\n</code></pre>\n\n<h2>cookbook_test.js</h2>\n\n<p><code>cookbook/cookbook_test.js</code> loads all other tests\nand tests the <code>cookbook</code> module. It starts\nby loading FuncUnit and all the other tests:</p>\n\n<pre><code>steal(\n    'funcunit',\n    './models/recipe_test.js',\n    'cookbook/recipe/create/create_test.js',\n    'cookbook/recipe/list/list_test.js',\n    function (S) {\n</code></pre>\n\n<p>Next it defines which module it's testing:</p>\n\n<pre><code>module(\"cookbook\", {\n    setup : function () {\n        S.open(\"//cookbook/index.html\");\n    }\n});\n</code></pre>\n\n<p><code>setup</code> uses FuncUnit to open the application's page. Any\nFuncUnit commands, for example <code>S(\"h1\").text()</code>, will\noperate within that page instead of the \ntesting window. This is ideal for integration and functional tests.</p>\n\n<p><code>cookbook_test.js</code> then tests if the page contains\nJavaScriptMVC's welcome text:</p>\n\n<pre><code>test(\"welcome test\", function () {\n    equals( S(\"h1\").text(), \n            \"Welcome to JavaScriptMVC!\", \n            \"welcome text\" );\n});\n</code></pre>\n\n<p>Finally, it tests the integration between RecipeCreate and \nRecipeList by creating a recipe and making sure it is \nlisted on the page:</p>\n\n<pre><code>test(\"creating a recipes adds it to the list \", function () {\n\n    S(\"[name=name]\").type(\"Ice Water\");\n    S(\"[name=description]\").type(\"Pour water in a glass. \"+\n                                 \"Add ice cubes.\");\n\n    S(\"[type=submit]\").click();\n\n    S(\"h3:contains(Ice Water)\").exists();\n    S(\"p:contains(Pour water in a glass. Add ice cubes.)\")\n      .exists()\n});\n</code></pre>\n\n<p>Continue to [building.cookbook Building Cookbook].</p>", "title": "Testing Cookbook", "parents": ["getstarted"], "order": 1, "src": "tutorials/getstarted/testing.md", "children": []})