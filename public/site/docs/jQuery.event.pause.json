c({"name": "jQuery.event.pause", "children": ["jQuery.fn.triggerAsync", "jQuery.Event.prototype.pause", "jQuery.Event.prototype.resume"], "type": "page", "comment": "<p><code>jQuery.event.pause</code> adds the ability to pause and  resume events.</p>\n\n<pre><code>$('#todos').on('show', function(ev){\n  ev.pause();\n\n  $(this).load('todos.html', function(){\n    ev.resume();\n  });\n})\n</code></pre>\n\n<p>Calling <code>event.pause()</code> works similar to\n<a href=\"http://api.jquery.com/event.stopImmediatePropagation/\">event.stopImmediatePropagation()</a> and\nstops calling other event handlers for the  event.\nWhen <code>event.resume()</code> is called, it will continue calling events on event handlers\nafter the 'paused' event handler.</p>\n\n<p>Pause-able events complement the [jQuery.event.default default]\nevent plugin, providing the ability to easy create widgets with\nan asynchronous API.  </p>\n\n<h2>Limitations</h2>\n\n<p>The element and event handler that the <code>pause</code> is within can not be removed before \nresume is called.</p>\n\n<h2>Example</h2>\n\n<p>The following example implements a <code>tabs</code> widget using <a href=\"http://canjs.us\">CanJS</a> which uses <code>jQuery.fn.triggerAsync</code> to hide the tab:</p>\n\n<pre><code>can.Control(\"Tabs\", {\n  init : function (el) {\n    $(el).children(\"li:first\").addClass('active');\n    var tab = this.tab;\n    this.element.children(\"li:gt(0)\").each(function () {\n      tab($(this)).hide()\n    })\n  },\n  tab : function (li) {\n    return $(li.find(\"a\").attr(\"href\").match(/#.*/)[0])\n  },\n  \"li click\" : function (el, ev) {\n    ev.preventDefault();\n    var active = this.element.find('.active')\n    old = this.tab(active),\n        cur = this.tab(el);\n    old.triggerAsync('hide', function () {\n      active.removeClass('active')\n      old.slideUp(function () {\n        el.addClass('active')\n        cur.slideDown()\n      });\n    })\n  }\n})\n</code></pre>\n\n<p>Each tab panel contains a form to input data and has a <code>Dirtybit</code> control attached to it which keeps track if the form has been saved or not. When the form data changes and you go to another tab The <code>Saver</code> widget will pause the <code>hide</code> event and show a modal that allows you to save the form, or cancel to stay in the current tab. Saving the data will send a POST Ajax request and resume the event when it returns:</p>\n\n<pre><code>can.Control(\"Saver\", {\n}, {\n  \" hide\" : function (el, ev) {\n    if (el.hasClass('dirty')) {\n      ev.pause()\n      new Modal('#modal', {\n        yes : function () {\n          var save = $('&lt;span&gt;Saving&lt;/span&gt;').appendTo(el);\n          $.post(\"/update\", el.serialize(), function () {\n            save.remove();\n            el.trigger('set');\n            ev.resume();\n          })\n        },\n        no : function () {\n          ev.resume();\n        },\n        cancel : function () {\n          ev.preventDefault();\n          ev.resume();\n        }\n      })\n    }\n  }\n});\n</code></pre>\n\n<div class='demo_wrapper' data-demo-src='jquery/event/pause/pause.html'></div>", "parents": ["jquerypp"], "src": "jquery/event/pause/pause.md"})