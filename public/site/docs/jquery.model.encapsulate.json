c({"name": "jquery.model.encapsulate", "type": "page", "comment": "<p>Models encapsulate your application's raw data.  This promotes reuse and provide a \nstandard interface for widgets to talk to services.</p>\n\n<p>The majority of the time, the raw data comes from \nservices your server provides.  For example, \nif you make a request to:</p>\n\n<pre><code>GET /contacts.json</code></pre>\n\n<p>The server might return something like:</p>\n\n<pre><code>[{\n  'id': 1,\n  'name' : 'Justin Meyer',\n  'birthday': '1982-10-20'\n},\n{\n  'id': 2,\n  'name' : 'Brian Moschel',\n  'birthday': '1983-11-10'\n}]</code></pre>\n\n<p>In most jQuery code, you'll see something like the following to retrieve contacts\ndata:</p>\n\n<pre><code>$.get('/contacts.json',\n      {type: 'tasty'}, \n      successCallback,\n      'json')\n</code></pre>\n\n<p>Instead, model encapsulates (wraps) this request so you call it like:</p>\n\n<pre><code>Contact.findAll({type: 'old'}, successCallback);\n</code></pre>\n\n<p>And instead of raw data, findAll returns contact instances that let you do things like:</p>\n\n<pre><code class='javascript'>// destroy the contact\ncontact.destroy() \n\n// update the contact\ncontact.update({name: \"Jeremy\"})\n\n// create a contact\nnew Contact({name: \"Alex\"}).save();</code></pre>\n\n<h2>Encapsulation Demo</h2>\n\n<p>The Grid demo shows using two different models with the same widget.</p>\n\n<div class='demo_wrapper' data-demo-src='jquery/model/demo-encapsulate.html'></div>\n\n<h2>How to Encapsulate</h2>\n\n<p>Think of models as a contract for creating, reading, updating, and deleting data. </p>\n\n<p>By filling out a model, you can pass that model to a widget and the widget will use \nthe model as a proxy for your data.  </p>\n\n<p>The following chart shows the methods most models provide:</p>\n\n<table>\n    <tr>\n        <td>Create</td><td><pre>Contact.create(attrs, success, error)</pre></td>\n    </tr>\n    <tr>\n        <td>Read</td><td><pre>Contact.findAll(params,success,error)\nContact.findOne(params, success, error)</pre></td>\n    </tr>\n    <tr>\n        <td>Update</td><td><pre>Contact.update(id, attrs, success, error)</pre></td>\n    </tr>\n    <tr>\n        <td>Delete</td><td><pre>Contact.destroy(id, success, error)</pre></td>\n    </tr>\n</table>\n\n<p>By filling out these methods, you get the benefits of encapsulation, \nAND all the other magic Model provides.  </p>\n\n<p>There are two ways to fill out these methods:</p>\n\n<ul>\n<li>providing templated service urls</li>\n<li>implementing the method</li>\n</ul>\n\n<h2>Using Templated Service URLS</h2>\n\n<p>If your server is REST-ish, you can simply provide\nurls to your services.  </p>\n\n<p>The following shows filling out a \nTask model's urls.  For each method it shows calling the function,\nhow the service request is made, and what the server's response\nshould look like:</p>\n\n<pre><code>$.Model(\"Task\",{\n\n  // Task.findAll({foo: \"bar\"})\n  // -&gt; GET /tasks.json?foo=bar\n  // &lt;- [{id: 1, name: \"foo\"},{ ... }]\n  findAll : \"/tasks.json\",    \n\n  // Task.findOne({id: 5})\n  // -&gt; GET /tasks/5.json\n  findOne : \"/tasks/{id}.json\", \n\n  // new Task({name: 'justin'}).save()\n  // -&gt; POST /tasks.json id=5\n  // &lt;- {id : 5}\n  create : \"/tasks.json\",\n\n  // task.update({name: 'justin'})\n  // -&gt; PUT /tasks/5.json name=justin\n  // &lt;- {}\n  update : \"/tasks/{id}.json\",\n\n  // task.destroy()\n  // -&gt; DESTROY /tasks/5.json\n  // &lt;- {}\n  destroy : \"/tasks/{id}.json\"\n},{})\n</code></pre>\n\n<p>You can change the HTTP request type by putting a GET, POST, DELETE, PUT like:</p>\n\n<pre><code>$.Model(\"Todo\",{\n  destroy: \"POST /task/delete/{id}.json\n},{})\n</code></pre>\n\n<p><b>Note:</b> Even if your server doesn't respond with service data\nin the same way, it's likely that $.Model will be able to figure it out. If not,\nyou can probably \noverwrite [jQuery.Model.static.models models] \nor [jQuery.Model.static.model model]. If that doesn't work, you can\nalways implement it yourself.</p>\n\n<h2>Implement Service Methods</h2>\n\n<p>If providing a url doesn't work for you, you\nmight need to fill out the\nservice method yourself. Before doing this, it's good\nto have an understanding of jQuery's Ajax converters and\ndeferreds. </p>\n\n<p>Lets see how we might fill out the\n<code>Contact.findAll</code> function to work with JSONP:</p>\n\n<pre><code class='javascript'>$.Model('Contact',\n{\n  findAll : function(params, success, error){\n\n    // do the ajax request\n    return $.get('/contacts.jsonp',\n      params, \n      success,\n      'jsonp contact.models');\n  }\n},\n{\n  // Prototype properties of Contact.\n  // We'll learn about this soon!\n});</code></pre>\n\n<p>If we wanted to make a list of contacts, we could do it like:</p>\n\n<pre><code class='javascript'>Contact.findAll({},function(contacts){\n  var html = [];\n  for(var i =0; i < contacts.length; i++){\n    html.push('&lt;li>'+contacts[i].name + '&lt;/li>')\n  }\n  $('#contacts').html( html.join('') );\n});</code></pre>\n\n<p>Models encapsulate your application's raw data.  This promotes reuse and provide a \nstandard interface for widgets to talk to services.</p>\n\n<p>The majority of the time, the raw data comes from \nservices your server provides.  For example, \nif you make a request to:</p>\n\n<pre><code>GET /contacts.json</code></pre>\n\n<p>The server might return something like:</p>\n\n<pre><code>[{\n  'id': 1,\n  'name' : 'Justin Meyer',\n  'birthday': '1982-10-20'\n},\n{\n  'id': 2,\n  'name' : 'Brian Moschel',\n  'birthday': '1983-11-10'\n}]</code></pre>\n\n<p>In most jQuery code, you'll see something like the following to retrieve contacts\ndata:</p>\n\n<pre><code>$.get('/contacts.json',\n      {type: 'tasty'}, \n      successCallback,\n      'json')\n</code></pre>\n\n<p>Instead, model encapsulates (wraps) this request so you call it like:</p>\n\n<pre><code>Contact.findAll({type: 'old'}, successCallback);\n</code></pre>\n\n<p>And instead of raw data, findAll returns contact instances that let you do things like:</p>\n\n<pre><code class='javascript'>// destroy the contact\ncontact.destroy() \n\n// update the contact\ncontact.update({name: \"Jeremy\"})\n\n// create a contact\nnew Contact({name: \"Alex\"}).save();</code></pre>\n\n<h2>Encapsulation Demo</h2>\n\n<p>The Grid demo shows using two different models with the same widget.</p>\n\n<div class='demo_wrapper' data-demo-src='jquery/model/demo-encapsulate.html'></div>\n\n<h2>How to Encapsulate</h2>\n\n<p>Think of models as a contract for creating, reading, updating, and deleting data. </p>\n\n<p>By filling out a model, you can pass that model to a widget and the widget will use \nthe model as a proxy for your data.  </p>\n\n<p>The following chart shows the methods most models provide:</p>\n\n<table>\n    <tr>\n        <td>Create</td><td><pre>Contact.create(attrs, success, error)</pre></td>\n    </tr>\n    <tr>\n        <td>Read</td><td><pre>Contact.findAll(params,success,error)\nContact.findOne(params, success, error)</pre></td>\n    </tr>\n    <tr>\n        <td>Update</td><td><pre>Contact.update(id, attrs, success, error)</pre></td>\n    </tr>\n    <tr>\n        <td>Delete</td><td><pre>Contact.destroy(id, success, error)</pre></td>\n    </tr>\n</table>\n\n<p>By filling out these methods, you get the benefits of encapsulation, \nAND all the other magic Model provides.  </p>\n\n<p>There are two ways to fill out these methods:</p>\n\n<ul>\n<li>providing templated service urls</li>\n<li>implementing the method</li>\n</ul>\n\n<h2>Using Templated Service URLS</h2>\n\n<p>If your server is REST-ish, you can simply provide\nurls to your services.  </p>\n\n<p>The following shows filling out a \nTask model's urls.  For each method it shows calling the function,\nhow the service request is made, and what the server's response\nshould look like:</p>\n\n<pre><code>$.Model(\"Task\",{\n\n  // Task.findAll({foo: \"bar\"})\n  // -&gt; GET /tasks.json?foo=bar\n  // &lt;- [{id: 1, name: \"foo\"},{ ... }]\n  findAll : \"/tasks.json\",    \n\n  // Task.findOne({id: 5})\n  // -&gt; GET /tasks/5.json\n  findOne : \"/tasks/{id}.json\", \n\n  // new Task({name: 'justin'}).save()\n  // -&gt; POST /tasks.json id=5\n  // &lt;- {id : 5}\n  create : \"/tasks.json\",\n\n  // task.update({name: 'justin'})\n  // -&gt; PUT /tasks/5.json name=justin\n  // &lt;- {}\n  update : \"/tasks/{id}.json\",\n\n  // task.destroy()\n  // -&gt; DESTROY /tasks/5.json\n  // &lt;- {}\n  destroy : \"/tasks/{id}.json\"\n},{})\n</code></pre>\n\n<p>You can change the HTTP request type by putting a GET, POST, DELETE, PUT like:</p>\n\n<pre><code>$.Model(\"Todo\",{\n  destroy: \"POST /task/delete/{id}.json\n},{})\n</code></pre>\n\n<p><b>Note:</b> Even if your server doesn't respond with service data\nin the same way, it's likely that $.Model will be able to figure it out. If not,\nyou can probably \noverwrite [jQuery.Model.static.models models] \nor [jQuery.Model.static.model model]. If that doesn't work, you can\nalways implement it yourself.</p>\n\n<h2>Implement Service Methods</h2>\n\n<p>If providing a url doesn't work for you, you\nmight need to fill out the\nservice method yourself. Before doing this, it's good\nto have an understanding of jQuery's Ajax converters and\ndeferreds. </p>\n\n<p>Lets see how we might fill out the\n<code>Contact.findAll</code> function to work with JSONP:</p>\n\n<pre><code class='javascript'>$.Model('Contact',\n{\n  findAll : function(params, success, error){\n\n    // do the ajax request\n    return $.get('/contacts.jsonp',\n      params, \n      success,\n      'jsonp contact.models');\n  }\n},\n{\n  // Prototype properties of Contact.\n  // We'll learn about this soon!\n});</code></pre>\n\n<p>If we wanted to make a list of contacts, we could do it like:</p>\n\n<pre><code class='javascript'>Contact.findAll({},function(contacts){\n  var html = [];\n  for(var i =0; i < contacts.length; i++){\n    html.push('&lt;li>'+contacts[i].name + '&lt;/li>')\n  }\n  $('#contacts').html( html.join('') );\n});</code></pre>", "title": "Service Encapsulation", "parents": ["jQuery.Model", "jQuery.Model"], "src": "can/model/pages/encapsulate.md", "children": []})