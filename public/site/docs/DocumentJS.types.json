c({"name": "DocumentJS.types", "type": "attribute", "comment": "<p>Type directives represent every possible javascript construct \nyou might want to document.</p>\n\n<h2>How to create your own type directive</h2>\n\n<p>All you have to do is create a file describing what your new directive tag looks like and does, \nand just drop it into the \"tags/types\" directory - it's that easy.</p>\n\n<p>A common documentation need in JavaScript projects is to document classes with non-standard syntax. \nPopular frameworks handle class creation using the following pattern:</p>\n\n<pre><code class='javascript'>/* \n * we want to document this as being a class \n */\nvar Person = makeClass(\n{\n  initialize: function(name) {\n      this.name = name;\n  },\n  say: function(message) {\n      return this.name + \" says: \" + message;\n  }\n});</code></pre> \n\n<p>Documentjs is flexible enough to let you do this with minimal effort. \nAll you have to do is to add a new type to the existing types folder (<strong>documentjs/types</strong>).  Let's name it <strong>make_class.js</strong>:</p>\n\n<pre><code class='javascript'>DocumentJS.Type(\"MakeClass\",\n/**\n * @Static\n */\n{\n    codeMatch: /(\\w+)\\s*[:=]\\s*makeClass\\(([^\\)]*)/),\n    /*\n     * Parses the code to get the class data.\n     * @param {String} code\n     * @return {Object} class data\n     */\n     code: function( code ) {\n         var parts = code.match(this.codeMatch);\n             if ( parts ) {\n                 return {\n                     name: parts[2],\n                     inherits: parts[1].replace(\"$.\", \"jQuery.\")\n                     type: \"class\"\n                 }\n             }\n     }\n}</code></pre>\n\n<p>There's one final step you must follow to make your custom type work: add it to the list of \nloaded types in <strong>documentjs/types/types.js</strong>.</p>\n\n<pre><code class='javascript'> ...\n'//documentjs/types/function', '//documentjs/types/page', '//documentjs/types/prototype',\n'//documentjs/types/script', '//documentjs/types/static', '//documentjs/types/make_class');</code></pre>\n\n<p>And that's it! Now you can write your code using your favorite framework \nand know that all your classes will be documented correctly for you.</p>", "parents": ["DocumentJS"], "src": {"query": "", "fragment": "", "path": "documentjs/types/types.js", "dir": {"prototype": {}}, "filename": {"prototype": {}}, "ext": {"prototype": {}}, "domain": {"prototype": {}}, "isCrossDomain": {"prototype": {}}, "isRelativeToDomain": {"prototype": {}}, "hash": {"prototype": {}}, "search": {"prototype": {}}, "add": {"prototype": {}}, "join": {"prototype": {}}, "normalize": {"prototype": {}}, "isRelative": {"prototype": {}}, "pathTo": {"prototype": {}}, "mapJoin": {"prototype": {}}, "addJS": {"prototype": {}}, "toString": {"prototype": {}}, "insertMapping": {"prototype": {}}}, "line": 0, "children": ["DocumentJS.types.add", "DocumentJS.types.attribute", "DocumentJS.types.class", "DocumentJS.types.function", "DocumentJS.types.page", "DocumentJS.types.prototype", "DocumentJS.types.static"]})