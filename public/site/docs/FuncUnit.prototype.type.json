c({"name": "FuncUnit.prototype.type", "params": {"text": {"description": "<p>the text you want to type</p>", "type": "String", "optional": false, "order": 0, "name": "text"}, "success": {"description": "<p>a callback that is run after typing, but before the next action.</p>", "type": "Function", "optional": true, "order": 1, "name": "success"}}, "ret": {"description": "<p>returns the funcUnit object for chaining.</p>", "type": "FuncUnit"}, "type": "function", "parents": ["FuncUnit.prototype"], "comment": "<p>Types text into an element.  This makes use of [Syn.type] and works in \na very similar way.</p>\n\n<h3>Quick Examples</h3>\n\n<pre><code class='javascript'>//types hello world\nS('#bar').type('hello world')\n\n//submits a form by typing \\r\nS(\"input[name=age]\").type(\"27\\r\")\n\n//types FuncUnit, then deletes the Unit\nS('#foo').type(\"FuncUnit\\b\\b\\b\\b\")\n\n//types JavaScriptMVC, then removes the MVC\nS('#zar').type(\"JavaScriptMVC[left][left][left]\"+\n                     \"[delete][delete][delete]\")\n\n//types JavaScriptMVC, then selects the MVC and\n//deletes it\nS('#zar').type(\"JavaScriptMVC[shift]\"+\n               \"[left][left][left]\"+\n               \"[shift-up][delete]\")</code></pre>\n\n<h2>Characters</h2>\n\n<p>For a list of the characters you can type, check [Syn.keycodes].</p>", "src": {"query": "", "fragment": "", "path": "funcunit/browser/actions.js", "dir": {"prototype": {}}, "filename": {"prototype": {}}, "ext": {"prototype": {}}, "domain": {"prototype": {}}, "isCrossDomain": {"prototype": {}}, "isRelativeToDomain": {"prototype": {}}, "hash": {"prototype": {}}, "search": {"prototype": {}}, "add": {"prototype": {}}, "join": {"prototype": {}}, "normalize": {"prototype": {}}, "isRelative": {"prototype": {}}, "pathTo": {"prototype": {}}, "mapJoin": {"prototype": {}}, "addJS": {"prototype": {}}, "toString": {"prototype": {}}, "insertMapping": {"prototype": {}}}, "line": 90, "children": []})