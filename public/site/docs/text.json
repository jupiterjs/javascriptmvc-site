c({"name": "text", "type": "attribute", "comment": "<p><p><p><p><p><p><p>var text = text.replace(/\n        ^[ ]{0,3}[(.+)]:  // id = $1  attacklab: g<em>tab</em>width - 1\n          [ \\t]*\n          \\n?               // maybe <em>one</em> newline\n          [ \\t]*\n        <?(\\S+?)>?          // url = $2\n          [ \\t]*\n          \\n?               // maybe one newline\n          [ \\t]*\n        (?:\n          (\\n<em>)             // any lines skipped = $3 attacklab: lookbehind removed\n          [\"(]\n          (.+?)             // title = $4\n          [\")]\n          [ \\t]</em>\n        )?                  // title is optional\n        (?:\\n+|$)\n      /gm,\n      function(){...});</p>var text = text.replace(/\n(                        // save in $1\n    ^                   // start of line  (with /m)\n    &lt;($block<em>tags</em>a)   // start tag = $2\n    \\b                  // word break\n                        // attacklab: hack around khtml/pcre bug...\n    [^\\r]<em>?\\n           // any number of lines, minimally matching\n    </\\2>               // the matching end tag\n    [ \\t]</em>              // trailing spaces/tabs\n    (?=\\n+)             // followed by a newline\n)                        // attacklab: there are sentinel newlines at end of document\n/gm,function(){...}};</p>var text = text.replace(/\n(                        // save in $1\n    ^                   // start of line  (with /m)\n    &lt;($block<em>tags</em>b)   // start tag = $2\n    \\b                  // word break\n                        // attacklab: hack around khtml/pcre bug...\n    [^\\r]<em>?             // any number of lines, minimally matching\n    .</em></\\2>             // the matching end tag\n    [ \\t]*              // trailing spaces/tabs\n    (?=\\n+)             // followed by a newline\n)                        // attacklab: there are sentinel newlines at end of document\n/gm,function(){...}};</p>text = text.replace(/\n(                        // save in $1\n    \\n\\n                // Starting after a blank line\n    [ ]{0,3}\n    (&lt;(hr)              // start tag = $2\n    \\b                  // word break\n    ([^&lt;>])<em>?           // \n    \\/?>)               // the matching end tag\n    [ \\t]</em>\n    (?=\\n{2,})          // followed by a blank line\n)\n/g,hashElement);</p>text = text.replace(/\n(                        // save in $1\n    \\n\\n                // Starting after a blank line\n    [ ]{0,3}            // attacklab: g<em>tab</em>width - 1\n    <!\n    (--[^\\r]*?--\\s*)+\n    >\n    [ \\t]*\n    (?=\\n{2,})          // followed by a blank line\n)\n/g,hashElement);</p>text = text.replace(/\n(?:\n    \\n\\n                // Starting after a blank line\n)\n(                        // save in $1\n    [ ]{0,3}            // attacklab: g<em>tab</em>width - 1\n    (?:\n        &lt;([?%])         // $2\n        [^\\r]<em>?\n        \\2>\n    )\n    [ \\t]</em>\n    (?=\\n{2,})          // followed by a blank line\n)\n/g,hashElement);</p>text = text.replace(/\n(                            // wrap whole match in $1\n    [\n    (\n        (?:\n            [[^]]<em>]      // allow brackets nested one level\n            |\n            [^[]           // or anything else\n        )</em>\n    )\n    ]</p>\n\n<pre><code>[ ]?                    // one optional space\n(?:\\n[ ]*)?             // one optional newline followed by spaces\n\n\\[\n(.*?)                   // id = $3\n\\]\n</code></pre>\n\n<p><p><p><p>)()()()()                    // pad remaining backreferences\n/g,<em>DoAnchors</em>callback);</p>text = text.replace(/\n    (                       // wrap whole match in $1\n        [\n        (\n            (?:\n                [[^]]<em>]  // allow brackets nested one level\n            |\n            [^[]]         // or anything else\n        )\n    )\n    ]\n    (                      // literal paren\n    [ \\t]</em>\n    ()                      // no id, so leave $3 empty\n    <?(.<em>?)>?               // href = $4\n    [ \\t]</em>\n    (                       // $5\n        (['\"])              // quote char = $6\n        (.<em>?)               // Title = $7\n        \\6                  // matching quote\n        [ \\t]</em>              // ignore any spaces/tabs between closing quote and )\n    )?                      // title is optional\n    )\n)\n/g,writeAnchorTag);</p>text = text.replace(/\n(                            // wrap whole match in $1\n    [\n    ([^[]]+)              // link text = $2; can't contain '[' or ']'\n    ]\n)()()()()()                    // pad rest of backreferences\n/g, writeAnchorTag);</p>text = text.replace(/\n(                        // wrap whole match in $1\n    ![\n    (.*?)               // alt text = $2\n    ]</p>\n\n<pre><code>[ ]?                // one optional space\n(?:\\n[ ]*)?         // one optional newline followed by spaces\n\n\\[\n(.*?)               // id = $3\n\\]\n</code></pre>\n\n<p><p><p><p><p>)()()()()                // pad rest of backreferences\n/g,writeImageTag);</p>text = text.replace(/\n(                        // wrap whole match in $1\n    ![\n    (.<em>?)               // alt text = $2\n    ]\n    \\s?                 // One optional whitespace character\n    (                  // literal paren\n    [ \\t]</em>\n    ()                  // no id, so leave $3 empty\n    <?(\\S+?)>?          // src url = $4\n    [ \\t]*\n    (                   // $5\n        (['\"])          // quote char = $6\n        (.<em>?)           // title = $7\n        \\6              // matching quote\n        [ \\t]</em>\n    )?                  // title is optional\n)\n)\n/g,writeImageTag);</p>text = text.replace(/\n    ^(#{1,6})              // $1 = string of #'s\n    [ \\t]*\n    (.+?)                   // $2 = Header text\n    [ \\t]*\n    #*                     // optional closing #'s (not counted)\n    \\n+\n/gm, function() {...});</p>text = text.replace(/\n    (^|[^])                   // Character before opening <code>can't be a backslash\n    (</code>+)                        // $2 = Opening run of <code>\n    (                           // $3 = The code block\n        [^\\r]*?\n        [^</code>]                    // attacklab: work around lack of lookbehind\n    )\n    \\2                          // Matching closer\n    (?!`)\n/gm, function(){...});</p> Item\n            //   1. Subitem\n            //            special char: *\n            //---\n            return text;\n        }</p>\n\n<pre><code>    var _DoItalicsAndBold = function( text ) {\n\n        // &lt;strong&gt; must go first:\n        text = text.replace(/(\\*\\*|__)(?=\\S)([^\\r]*?\\S[*_]*)\\1/g, \"&lt;strong&gt;$2&lt;/strong&gt;\");\n\n        text = text.replace(/(\\*|_)(?=\\S)([^\\r]*?\\S)\\1/g, \"&lt;em&gt;$2&lt;/em&gt;\");\n\n        return text;\n    }\n\n\n    var _DoBlockQuotes = function( text ) {\n</code></pre>\n\n<p><p>/*\n        text = text.replace(/\n        (                               // Wrap whole match in $1\n            (\n                ^[ \\t]<em>>[ \\t]?          // '>' at the start of a line\n                .+\\n                    // rest of the first line\n                (.+\\n)</em>                 // subsequent consecutive lines\n                \\n*                     // blanks\n            )+\n        )\n        /gm, function(){...});</p>text = text.replace(/\n    &lt;\n    (?:mailto:)?\n    (\n        [-.\\w]+\n        \\@\n        [-a-z0-9]+(.[-a-z0-9]+)*.[a-z]+\n    )\n    >\n/gi, <em>DoAutoLinks</em>callback());</p>", "src": {"query": "", "fragment": "", "path": "documentjs/showdown.js", "dir": {"prototype": {}}, "filename": {"prototype": {}}, "ext": {"prototype": {}}, "domain": {"prototype": {}}, "isCrossDomain": {"prototype": {}}, "isRelativeToDomain": {"prototype": {}}, "hash": {"prototype": {}}, "search": {"prototype": {}}, "add": {"prototype": {}}, "join": {"prototype": {}}, "normalize": {"prototype": {}}, "isRelative": {"prototype": {}}, "pathTo": {"prototype": {}}, "mapJoin": {"prototype": {}}, "addJS": {"prototype": {}}, "toString": {"prototype": {}}, "insertMapping": {"prototype": {}}}, "line": 1078, "children": []})