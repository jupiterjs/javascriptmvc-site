c({"name": "jQuery.fn.controls", "params": {"control": {"order": 0, "description": "<p>(optional) if exists the control instance(s) with that constructor function or type will be returned.</p>", "name": "control", "type": "Object", "optional": false}}, "ret": {"description": "<p>an array of control instance(s).</p>", "type": "Array"}, "type": "function", "comment": "<p>When the widget is initialized, the plugin control creates an array \nof control instance(s) with the DOM element it was initialized on using \n[can.data] method.</p>\n\n<p>The <code>controls</code> method allows you to get the control instance(s) for any element.  </p>\n\n<pre><code>//- Inits the widgets\n$('.widgets:eq(0)').my_box();\n$('.widgets:eq(1)').my_clock();\n\n&lt;div class=\"widgets my_box\" /&gt;\n&lt;div class=\"widgets my_clock\" /&gt;\n\n$('.widgets').controls() //-&gt; [ MyBox, MyClock ]\n</code></pre>\n\n<p>Additionally, you can invoke it passing the name of a control\nto fetch a specific instance(s).</p>\n\n<pre><code>//- Inits the widgets\n$('.widgets:eq(0)').my_box();\n$('.widgets:eq(1)').my_clock();\n\n&lt;div class=\"widgets my_box\" /&gt;\n&lt;div class=\"widgets my_clock\" /&gt;\n\n$('.widgets').controls('MyBox') //-&gt; [ MyBox ]\n</code></pre>", "parents": ["can.Control.plugin"], "src": {"query": "", "fragment": "", "path": "can/control/plugin/plugin.js", "dir": {"prototype": {}}, "filename": {"prototype": {}}, "ext": {"prototype": {}}, "domain": {"prototype": {}}, "isCrossDomain": {"prototype": {}}, "isRelativeToDomain": {"prototype": {}}, "hash": {"prototype": {}}, "search": {"prototype": {}}, "add": {"prototype": {}}, "join": {"prototype": {}}, "normalize": {"prototype": {}}, "isRelative": {"prototype": {}}, "pathTo": {"prototype": {}}, "mapJoin": {"prototype": {}}, "addJS": {"prototype": {}}, "toString": {"prototype": {}}, "insertMapping": {"prototype": {}}}, "line": 58, "children": []})