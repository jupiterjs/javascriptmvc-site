c({"name": "can.Construct.super", "type": "page", "comment": "<p>The <strong>super</strong> provides a <code>this._super</code> reference in functions that points to the base function.  For example,\nthe following creates a <code>Vehicle</code> constructor and <code>Car</code> constructor that\ninherits from it.  <code>Car</code>'s <code>init</code> function calls <code>Vehicle</code>'s base <code>init</code> function. </p>\n\n<pre><code>var Vehicle = can.Construct({\n  init: function(wheels){\n    this.wheels=wheels;\n  }\n});\n\nvar Car = can.Construct({\n  init: function(speed){\n    this._super(4);\n    this.speed = speed;\n  }\n})\n</code></pre>\n\n<p><code>this._super</code> also works from static properties.  The following example creates methods that can be\nraised to the first and second power:</p>\n\n<pre><code>First = can.Construct({\n    raise: function(n) { return n;}\n},{})\n\nSecond = First({\n    raise: function(n) { return this._super(n)*n;}\n},{})\n\nFirst.raise(2)  // -&gt; 2\nSecond.raise(2) // -&gt; 4\n</code></pre>\n\n<p>If you want to pass all arguments to <code>_super</code> use\n<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Function/apply\">apply</a>:</p>\n\n<pre><code>var EvenBetterTodo = BetterTodo({\n    init : function(text, status) {\n        this._super.apply(this, arguments);\n        this.isEvenbetter = true;\n    }\n});\n</code></pre>", "parents": ["can.Construct"], "plugin": "can/construct/super", "test": "can/construct/super/qunit.html", "download": "http://donejs.com/can/dist/can.construct.super.js", "src": "can/construct/super/super.md", "children": []})