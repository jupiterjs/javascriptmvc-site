c({"name": "xhr", "type": "attribute", "comment": "<p>Use can.fixture.xhr to create an object that looks like an xhr object.</p>\n\n<h2>Example</h2>\n\n<p>The following example shows how the -restCreate fixture uses xhr to return\na simulated xhr object:</p>\n\n<pre><code class='javascript'>\"-restCreate\" : function( settings, cbType ) {\n  switch(cbType){\n    case \"success\":\n      return [\n        {id: parseInt(Math.random()*1000)},\n        \"success\",\n        can.fixture.xhr()];\n    case \"complete\":\n      return [\n        can.fixture.xhr({\n          getResponseHeader: function() { \n            return settings.url+\"/\"+parseInt(Math.random()*1000);\n          }\n        }),\n        \"success\"];\n  }\n}</code></pre>", "hide": true, "params": {"xhr": {"order": 0, "description": "<p>properties that you want to overwrite</p>", "name": "xhr", "type": "Object", "optional": true}}, "ret": {"description": "<p>an object that looks like a successful XHR object.</p>", "type": "Object"}, "src": {"query": "", "fragment": "", "path": "can/util/fixture/fixture.js", "dir": {"prototype": {}}, "filename": {"prototype": {}}, "ext": {"prototype": {}}, "domain": {"prototype": {}}, "isCrossDomain": {"prototype": {}}, "isRelativeToDomain": {"prototype": {}}, "hash": {"prototype": {}}, "search": {"prototype": {}}, "add": {"prototype": {}}, "join": {"prototype": {}}, "normalize": {"prototype": {}}, "isRelative": {"prototype": {}}, "pathTo": {"prototype": {}}, "mapJoin": {"prototype": {}}, "addJS": {"prototype": {}}, "toString": {"prototype": {}}, "insertMapping": {"prototype": {}}}, "line": 851, "children": []})