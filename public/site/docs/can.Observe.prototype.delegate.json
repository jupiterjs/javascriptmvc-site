c({"name": "can.Observe.prototype.delegate", "params": {"selector": {"description": "<p>The attributes you want to listen for changes in.</p>\n\n<p>Selector should be the property or \n  property names of the element you are searching.  Examples:</p>\n\n<pre><code>\"name\" - listens to the \"name\" property changing\n\"name, address\" - listens to \"name\" or \"address\" changing\n\"name address\" - listens to \"name\" or \"address\" changing\n\"address.*\" - listens to property directly in address\n\"address.**\" - listens to any property change in address\n\"foo=bar\" - listens when foo is \"bar\"\n</code></pre>", "type": "String", "optional": false, "order": 0, "name": "selector"}, "event": {"description": "<p>The event name.  One of (\"set\",\"add\",\"remove\",\"change\")</p>", "type": "String", "optional": false, "order": 1, "name": "event"}, "handler(ev,newVal,oldVal,prop)": {"order": 2, "description": "<p>The callback handler \ncalled with:</p>\n\n<ul>\n<li>newVal - the new value set on the observe</li>\n<li>oldVal - the old value set on the observe</li>\n<li>prop - the prop name that was changed</li>\n</ul>", "name": "handler(ev,newVal,oldVal,prop)", "type": "Function", "optional": false}}, "ret": {"description": "<p>the delegate for chaining</p>", "type": "jQuery.Delegate"}, "type": "function", "comment": "<p><code>delegate( selector, event, handler(ev,newVal,oldVal,from) )</code> listen for changes \nin a child attribute from the parent. The child attribute\ndoes not have to exist.</p>\n\n<pre><code>// create an observable\nvar observe = can.Observe({\n  foo : {\n    bar : \"Hello World\"\n  }\n})\n\n//listen to changes on a property\nobserve.delegate(\"foo.bar\",\"change\", function(ev, prop, how, newVal, oldVal){\n  // foo.bar has been added, set, or removed\n  this //-&gt; \n});\n\n// change the property\nobserve.attr('foo.bar',\"Goodbye Cruel World\")\n</code></pre>\n\n<h2>Types of events</h2>\n\n<p>Delegate lets you listen to add, set, remove, and change events on property.</p>\n\n<p><strong>add</strong></p>\n\n<p>An add event is fired when a new property has been added.</p>\n\n<pre><code>var o = new can.Control({});\no.delegate(\"name\",\"add\", function(ev, value){\n  // called once\n  can.$('#name').show()\n})\no.attr('name',\"Justin\")\no.attr('name',\"Brian\");\n</code></pre>\n\n<p>Listening to add events is useful for 'setup' functionality (in this case\nshowing the <code>#name</code> element.</p>\n\n<p><strong>set</strong></p>\n\n<p>Set events are fired when a property takes on a new value.  set events are\nalways fired after an add.</p>\n\n<pre><code>o.delegate(\"name\",\"set\", function(ev, value){\n  // called twice\n  can.$('#name').text(value)\n})\no.attr('name',\"Justin\")\no.attr('name',\"Brian\");\n</code></pre>\n\n<p><strong>remove</strong></p>\n\n<p>Remove events are fired after a property is removed.</p>\n\n<pre><code>o.delegate(\"name\",\"remove\", function(ev){\n  // called once\n  $('#name').text(value)\n})\no.attr('name',\"Justin\");\no.removeAttr('name');\n</code></pre>\n\n<h2>Wildcards - matching multiple properties</h2>\n\n<p>Sometimes, you want to know when any property within some part \nof an observe has changed. Delegate lets you use wildcards to \nmatch any property name.  The following listens for any change\non an attribute of the params attribute:</p>\n\n<pre><code>var o = can.Control({\n  options : {\n    limit : 100,\n    offset: 0,\n    params : {\n      parentId: 5\n    }\n  }\n})\no.delegate('options.*','change', function(){\n  alert('1');\n})\no.delegate('options.**','change', function(){\n  alert('2');\n})\n\n// alerts 1\n// alerts 2\no.attr('options.offset',100)\n\n// alerts 2\no.attr('options.params.parentId',6);\n</code></pre>\n\n<p>Using a single wildcard (<code><em></code>) matches single level\nproperties.  Using a double wildcard (<code></em>*</code>) matches\nany deep property.</p>\n\n<h2>Listening on multiple properties and values</h2>\n\n<p>Delegate lets you listen on multiple values at once.  The following listens\nfor first and last name changes:</p>\n\n<pre><code>var o = new can.Observe({\n  name : {first: \"Justin\", last: \"Meyer\"}\n})\n\no.bind(\"name.first,name.last\", \n       \"set\",\n       function(ev,newVal,oldVal,from){\n\n})\n</code></pre>\n\n<h2>Listening when properties are a particular value</h2>\n\n<p>Delegate lets you listen when a property is <strong>set</strong> to a specific value:</p>\n\n<pre><code>var o = new can.Observe({\n  name : \"Justin\"\n})\n\no.bind(\"name=Brian\", \n       \"set\",\n       function(ev,newVal,oldVal,from){\n\n})\n</code></pre>", "parents": ["can.Observe.delegate"], "plugin": "can/observe/delegate", "src": {"query": "", "fragment": "", "path": "can/observe/delegate/delegate.js", "dir": {"prototype": {}}, "filename": {"prototype": {}}, "ext": {"prototype": {}}, "domain": {"prototype": {}}, "isCrossDomain": {"prototype": {}}, "isRelativeToDomain": {"prototype": {}}, "hash": {"prototype": {}}, "search": {"prototype": {}}, "add": {"prototype": {}}, "join": {"prototype": {}}, "normalize": {"prototype": {}}, "isRelative": {"prototype": {}}, "pathTo": {"prototype": {}}, "mapJoin": {"prototype": {}}, "addJS": {"prototype": {}}, "toString": {"prototype": {}}, "insertMapping": {"prototype": {}}}, "line": 133, "children": []})