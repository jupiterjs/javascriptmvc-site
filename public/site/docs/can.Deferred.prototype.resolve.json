c({"name": "can.Deferred.prototype.resolve", "type": "function", "parents": ["can.Deferred.prototype"], "comment": "<p><code>deferred.resolve( args )</code> resolves a Deferred object and calls the done callbacks with the given arguments.</p>\n\n<pre><code>var def = can.Deferred();\ndef.resolve({ animals: [ 'pig', 'cow' ] })\n</code></pre>", "params": {"arguments": {"order": 0, "description": "<p>Optional arguments that are passed to the done callbacks.</p>", "name": "arguments", "type": "Object", "optional": false}}, "src": {"query": "", "fragment": "", "path": "can/util/can.js", "dir": {"prototype": {}}, "filename": {"prototype": {}}, "ext": {"prototype": {}}, "domain": {"prototype": {}}, "isCrossDomain": {"prototype": {}}, "isRelativeToDomain": {"prototype": {}}, "hash": {"prototype": {}}, "search": {"prototype": {}}, "add": {"prototype": {}}, "join": {"prototype": {}}, "normalize": {"prototype": {}}, "isRelative": {"prototype": {}}, "pathTo": {"prototype": {}}, "mapJoin": {"prototype": {}}, "addJS": {"prototype": {}}, "toString": {"prototype": {}}, "insertMapping": {"prototype": {}}}, "line": 596, "children": []})