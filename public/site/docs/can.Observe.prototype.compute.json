c({"name": "can.Observe.prototype.compute", "params": {"prop": {"description": "", "type": "", "optional": false, "order": 0, "name": "prop"}, "property": {"order": 1, "description": "", "name": "property", "type": "prop The name of the", "optional": false}}, "ret": {"description": "<p>A can.compute instance</p>", "type": "can.compute"}, "type": "function", "parents": ["can.Observe.prototype"], "comment": "<p><code>compute(prop)</code> returns a [can.compute] bound to the given property:</p>\n\n<pre><code> var obs = new can.Observe({\n     name : 'David'\n });\n\n var name = obs.compute('name');\n\n name.bind('change', function(ev, newName, oldName) {\n     console.log('Name changed from ' + oldName + ' to ' + newName);\n });\n\n name() // -&gt; \"David\"\n\n obs.attr('name', 'Curtis');\n name() // -&gt; \"Curtis\"\n\n name(\"Justin\");\n name() // -&gt; \"Justin\"\n obs.attr('name') // -&gt; Justin\n</code></pre>", "src": {"query": "", "fragment": "", "path": "can/observe/observe.js", "dir": {"prototype": {}}, "filename": {"prototype": {}}, "ext": {"prototype": {}}, "domain": {"prototype": {}}, "isCrossDomain": {"prototype": {}}, "isRelativeToDomain": {"prototype": {}}, "hash": {"prototype": {}}, "search": {"prototype": {}}, "add": {"prototype": {}}, "join": {"prototype": {}}, "normalize": {"prototype": {}}, "isRelative": {"prototype": {}}, "pathTo": {"prototype": {}}, "mapJoin": {"prototype": {}}, "addJS": {"prototype": {}}, "toString": {"prototype": {}}, "insertMapping": {"prototype": {}}}, "line": 861, "children": []})