c({"name": "can.Control.plugin", "children": ["can.Control.plugin.static.pluginName", "jQuery.fn.controls", "jQuery.fn.control", "can.Control.prototype.update"], "type": "page", "comment": "<p>The <code>can.Control.plugin</code> extension is a plugin for creating and accessing \ncontrols with jQuery helper methods.  It uses the control's [can.Construct.fullName fullName] \nor a static [can.Control.plugin.static.pluginName pluginName] attribute for the name of the control.</p>\n\n<p>For example, the following plugin:</p>\n\n<pre><code>var Tabs = can.Control({\n  pluginName : 'tabs'\n},{\n  init : function(element, options, arg1){ },\n  update : function(options) {}\n})\n</code></pre>\n\n<p>Can now be created directly on the jQuery collection like:</p>\n\n<pre><code>$(\".tabs\").tabs();\n</code></pre>\n\n<p><strong>Note:</strong> This plugin only supports jQuery.</p>\n\n<h2>Invoking Methods</h2>\n\n<p>You can invoke methods on a control instance after its created through a few\ndifferent approaches.  </p>\n\n<p>Once a controller is initialized on a DOM element, you can invoke a method by calling\nthe plugin with the method name followed by the parameters for that method.\nWhen calling a method and it returns a value other than <code>undefined</code>, this value will\nbe returned. Otherwise the method call will return the jQuery object (for chaining).</p>\n\n<pre><code>var MyTodo = can.Control({\n  pluginName : 'my_todo'\n}, {\n  addTask: function(name, task){\n    this.element.append(name + \": \" + task)\n  },\n\n  getTasks : function() {\n    return this.element.text();\n  }\n});\n\n// Initialize MyTodo\n$('.my_todo').my_todo();\n\n// Calls addTask, returns the jQuery element\n$('.my_todo').my_todo(\"addTask\", 'Brian', 'Sweep garage') // -&gt; jQuery\n// Calls getTasks, returns the element text\n$('.my_todo').my_todo(\"getTasks\") // -&gt; Brian: Sweep garage\n</code></pre>\n\n<p>You can also retrieve the control instance and invoke the method directly.</p>\n\n<pre><code>var control = $('.my_todo').control();\ncontrol.addTask('Brian', 'Sweep garage');\n</code></pre>\n\n<p>For more information on this, see [jQuery.fn.control] or [jQuery.fn.controls].</p>\n\n<h2>Demo</h2>\n\n<p>The following demo shows creating a plugin widget and then updating the widget's <code>times</code> variable\nfor each time the button was clicked.</p>\n\n<div class='demo_wrapper' data-demo-src='can/control/plugin/plugin.html'></div>", "parents": ["can.Control"], "plugin": "can/control/plugin", "test": "can/control/plugin/qunit.html", "download": "http://donejs.com/can/dist/can.control.plugin.js", "src": "can/control/plugin/plugin.md"})