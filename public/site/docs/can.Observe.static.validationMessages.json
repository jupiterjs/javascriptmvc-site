c({"name": "can.Observe.static.validationMessages", "type": "attribute", "comment": "<p><code>validationMessages</code> has the default validation error messages that will be returned by the builtin\nvalidation methods. These can be overwritten by assigning new messages\nto <code>can.Observe.validationMessages</code> in your application setup.</p>\n\n<p>The following messages (with defaults) are available:</p>\n\n<ul>\n<li>format - \"is invalid\"</li>\n<li>inclusion - \"is not a valid option (perhaps out of range)\"</li>\n<li>lengthShort - \"is too short\"</li>\n<li>lengthLong - \"is too long\"</li>\n<li>presence - \"can't be empty\"</li>\n<li>range - \"is out of range\"</li>\n</ul>\n\n<p>It is important to steal can/observe/validations before \noverwriting the messages, otherwise the changes will\nbe lost once steal loads it later.</p>\n\n<h2>Example</h2>\n\n<pre><code>can.Observe.validationMessages.format = \"is invalid dummy!\"\n</code></pre>", "parents": ["can.Observe.validations"], "src": {"query": "", "fragment": "", "path": "can/observe/validations/validations.js", "dir": {"prototype": {}}, "filename": {"prototype": {}}, "ext": {"prototype": {}}, "domain": {"prototype": {}}, "isCrossDomain": {"prototype": {}}, "isRelativeToDomain": {"prototype": {}}, "hash": {"prototype": {}}, "search": {"prototype": {}}, "add": {"prototype": {}}, "join": {"prototype": {}}, "normalize": {"prototype": {}}, "isRelative": {"prototype": {}}, "pathTo": {"prototype": {}}, "mapJoin": {"prototype": {}}, "addJS": {"prototype": {}}, "toString": {"prototype": {}}, "insertMapping": {"prototype": {}}}, "line": 124, "children": []})