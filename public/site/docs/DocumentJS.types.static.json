c({"name": "DocumentJS.types.static", "type": "class", "comment": "<p>Sets the following functions and attributes to be added to Class or Constructor static (class) functions.</p>\n\n<h3>Example</h3>\n\n<pre><code class='javascript'>$.Model.extend('Cookbook.Models.Recipe',\n/* @Static */\n{\n /**\n  * Retrieves recipes data from your backend services.\n  * @param {Object} params params that might refine your results.\n  * @param {Function} success a callback function that returns wrapped recipe objects.\n  * @param {Function} error a callback function for an error in the ajax request.\n  */\n  findAll : function(params, success, error){\n     $.ajax({\n         url: '/recipe',\n         type: 'get',\n         dataType: 'json',\n         data: params,\n         success: this.callback(['wrapMany',success]),\n         error: error,\n         fixture: \"//cookbook/fixtures/recipes.json.get\" //calculates the fixture path from the url and type.\n     })\n   },\n...</code></pre> ", "tags": ["documentation"], "parents": ["DocumentJS.types"], "src": {"query": "", "fragment": "", "path": "documentjs/types/static.js", "dir": {"prototype": {}}, "filename": {"prototype": {}}, "ext": {"prototype": {}}, "domain": {"prototype": {}}, "isCrossDomain": {"prototype": {}}, "isRelativeToDomain": {"prototype": {}}, "hash": {"prototype": {}}, "search": {"prototype": {}}, "add": {"prototype": {}}, "join": {"prototype": {}}, "normalize": {"prototype": {}}, "isRelative": {"prototype": {}}, "pathTo": {"prototype": {}}, "mapJoin": {"prototype": {}}, "addJS": {"prototype": {}}, "toString": {"prototype": {}}, "insertMapping": {"prototype": {}}}, "line": 1, "children": ["DocumentJS.types.static.static"]})