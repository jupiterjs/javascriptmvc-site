c({"name": "can.Observe.delegate", "children": ["can.Observe.prototype.delegate", "can.Observe.prototype.undelegate"], "type": "page", "comment": "<p>The <strong>delegate</strong> plugin allows you to listen to more specific event changes on \n[can.Observe Observes].  It allows you to specify:</p>\n\n<ul>\n<li>the <strong>attribute</strong> or <strong>attributes</strong> - that you want to listen to and optionally the <strong>value</strong> you want it to match</li>\n<li>the <strong>type</strong> of event (add,set,remove,change)</li>\n</ul>\n\n<p>Listen to specific event changes with \n<code>[can.Observe::delegate delegate](selector, event, handler(ev,newVal,oldVal,from))</code> :</p>\n\n<pre><code>// create an observable\nvar observe = new can.Observe({\n  name : {\n    first : \"Justin Meyer\"\n  }\n})\n  var handler;\n//listen to changes on a property\nobserve.delegate(\"name.first\",\"set\", \n  handler = function(ev, newVal, oldVal, prop){\n\n  this   //-&gt; \"Justin\"\n  ev.currentTarget //-&gt; observe\n  newVal //-&gt; \"Justin Meyer\"\n  oldVal //-&gt; \"Justin\"\n  prop   //-&gt; \"name.first\"\n});\n\n// change the property\nobserve.attr('name.first',\"Justin\")\n</code></pre>\n\n<p>Delegate will listen on the object until you \ncall <code>[can.Observe::undelegate undelegate](selector, event, handler)</code> to remove the event handler.</p>\n\n<pre><code>observe.undelegate(\"name.first\",\"set\", handler );\n</code></pre>", "parents": ["can.Observe"], "plugin": "can/observe/delegate", "test": "can/observe/delegate/qunit.html", "download": "http://donejs.com/can/dist/can.observe.delegate.js", "src": "can/observe/delegate/delegate.md"})