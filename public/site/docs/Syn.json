c({"name": "Syn", "type": "class", "comment": "<p>Syn is used to simulate user actions.  It creates synthetic events and\nperforms their default behaviors.</p>\n\n<h2>Basic Use</h2>\n\n<p>The following clicks an input element with <code>id='description'</code>\nand then types <code>'Hello World'</code>.</p>\n\n<pre><code class='javascript'>     Syn.click({},'description')\n     .type(\"Hello World\")</code></pre><h2>User Actions and Events</h2>\n\n<p>Syn is typically used to simulate user actions as opposed to triggering events. Typing characters\nis an example of a user action.  The keypress that represents an <code>'a'</code>\ncharacter being typed is an example of an event. \n</p>\n\n\n<p>\n  While triggering events is supported, it's much more useful to simulate actual user behavior.  The \n  following actions are supported by Syn:\n</p>\n\n\n<ul>\n  <li><code>[Syn.prototype.click click]</code> - a mousedown, focus, mouseup, and click.</li>\n  <li><code>[Syn.prototype.dblclick dblclick]</code> - two <code>click!</code> events followed by a <code>dblclick</code>.</li>\n  <li><code>[Syn.prototype.key key]</code> - types a single character (keydown, keypress, keyup).</li>\n  <li><code>[Syn.prototype.type type]</code> - types multiple characters into an element.</li>\n  <li><code>[Syn.prototype.move move]</code> - moves the mouse from one position to another (triggering mouseover / mouseouts).</li>\n  <li><code>[Syn.prototype.drag drag]</code> - a mousedown, followed by mousemoves, and a mouseup.</li>\n</ul>\n\nAll actions run asynchronously.  \nClick on the links above for more \ninformation on how to use the specific action.\n<h2>Asynchronous Callbacks</h2>\nActions don't complete immediately. This is almost \nentirely because <code>focus()</code> \ndoesn't run immediately in IE.\nIf you provide a callback function to Syn, it will \nbe called after the action is completed.\n<br/>The following checks that \"Hello World\" was entered correctly: \n\n<pre><code class='javascript'>     Syn.click({},'description')\n     .type(\"Hello World\", function(){\n\n     ok(\"Hello World\" == document.getElementById('description').value)  \n     })</code></pre>     <h2>Asynchronous Chaining</h2>\n     <p>You might have noticed the [Syn.prototype.then then] method.  It provides chaining\n     so you can do a sequence of events with a single (final) callback.\n     </p><p>\n     If an element isn't provided to then, it uses the previous Syn's element.\n     </p>\n     The following does a lot of stuff before checking the result:\n\n<pre><code class='javascript'>     Syn.type('ice water','title')\n     .type('ice and water','description')\n     .click({},'create')\n     .drag({to: 'favorites'},'newRecipe',\n     function(){\n     ok($('#newRecipe').parents('#favorites').length);\n     })</code></pre>     \n\n<pre><code> &lt;h2&gt;jQuery Helper&lt;/h2&gt;\n If jQuery is present, Syn adds a triggerSyn helper you can use like:\n</code></pre>\n\n<p><pre><code class='javascript'>     $(\"#description\").triggerSyn(\"type\",\"Hello World\");</code></pre><h2>Key Event Recording</h2></p>\n\n<p>Every browser has very different rules for dispatching key events.  \nAs there is no way to feature detect how a browser handles key events,\nsynthetic uses a description of how the browser behaves generated\nby a recording application.  </p>\n<p>\nIf you want to support a browser not currently supported, you can\nrecord that browser's key event description and add it to\n<code>Syn.key.browsers</code> by it's navigator agent.\n</p>\n\n<p><pre><code class='javascript'>     Syn.key.browsers[\"Envjs\\ Resig/20070309 PilotFish/1.2.0.10\\1.6\"] = {\n     'prevent':\n     {\"keyup\":[],\"keydown\":[\"char\",\"keypress\"],\"keypress\":[\"char\"]},\n     'character':\n     { ... }\n     }</code></pre><h2>Limitations</h2>\nSyn fully supports IE 6+, FF 3+, Chrome, Safari, Opera 10+.\nWith FF 1+, drag / move events are only partially supported. They will\nnot trigger mouseover / mouseout events.<br/>\nSafari crashes when a mousedown is triggered on a select.  Syn will not \ncreate this event.</p>\n\n<h2>Contributing to Syn</h2>\n\n<p>Have we missed something? We happily accept patches.  The following are \nimportant objects and properties of Syn:</p>\n\n<ul>\n    <li><code>Syn.create</code> - contains methods to setup, convert options, and create an event of a specific type.</li>\n <li><code>Syn.defaults</code> - default behavior by event type (except for keys).</li>\n <li><code>Syn.key.defaults</code> - default behavior by key.</li>\n <li><code>Syn.keycodes</code> - supported keys you can type.</li>\n</ul>\n\n<h2>Roll Your Own Functional Test Framework</h2>\n\n<p>Syn is really the foundation of JavaScriptMVC's functional testing framework - [FuncUnit].\n  But, we've purposely made Syn work without any dependencies in the hopes that other frameworks or \n  testing solutions can use it as well.\n</p>", "download": "funcunit/dist/syn.js", "test": "funcunit/synthetic/qunit.html", "construct": "<p>Creates a synthetic event on the element.</p>", "ret": {"description": "<p>Syn</p>", "type": undefined}, "params": {"type": {"order": 0, "description": "", "name": "type", "type": "Object", "optional": false}, "options": {"order": 1, "description": "", "name": "options", "type": "Object", "optional": false}, "element": {"order": 2, "description": "", "name": "element", "type": "Object", "optional": false}, "callback": {"order": 3, "description": "", "name": "callback", "type": "Object", "optional": false}}, "src": {"query": "", "fragment": "", "path": "funcunit/syn/drag/drag.js", "dir": {"prototype": {}}, "filename": {"prototype": {}}, "ext": {"prototype": {}}, "domain": {"prototype": {}}, "isCrossDomain": {"prototype": {}}, "isRelativeToDomain": {"prototype": {}}, "hash": {"prototype": {}}, "search": {"prototype": {}}, "add": {"prototype": {}}, "join": {"prototype": {}}, "normalize": {"prototype": {}}, "isRelative": {"prototype": {}}, "pathTo": {"prototype": {}}, "mapJoin": {"prototype": {}}, "addJS": {"prototype": {}}, "toString": {"prototype": {}}, "insertMapping": {"prototype": {}}}, "line": 201, "children": ["Syn.static", "Syn.prototype", "Syn.keycodes", "Syn.options", "Syn.key", "Syn.type", "Syn.move", "Syn.drag"]})