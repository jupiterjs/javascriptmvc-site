c({"name": "jQuery.Drag.prototype.ghost", "params": {"parent": {"description": "<p>the parent element of the newly created ghost element. If not provided the \nghost element is added after the moving element.</p>", "type": "HTMLElement", "optional": true, "order": 0, "name": "parent"}}, "ret": {"description": "<p>the ghost element to do whatever you want with it.</p>", "type": "jQuery.fn"}, "type": "function", "parents": ["jQuery.Drag.prototype"], "comment": "<p><code>drag.ghost( [parent] )</code> clones the element and uses it as the \nmoving element, leaving the original dragged element in place.  The <code>parent</code> option can\nbe used to specify where the ghost element should be temporarily added into the \nDOM.  This method should be called in \"draginit\".</p>\n\n<pre><code>$(\"#todos\").on(\".handle\", \"draginit\", function( ev, drag ) {\n  drag.ghost();\n})\n</code></pre>", "src": {"query": "", "fragment": "", "path": "jquery/event/drag/drag.js", "dir": {"prototype": {}}, "filename": {"prototype": {}}, "ext": {"prototype": {}}, "domain": {"prototype": {}}, "isCrossDomain": {"prototype": {}}, "isRelativeToDomain": {"prototype": {}}, "hash": {"prototype": {}}, "search": {"prototype": {}}, "add": {"prototype": {}}, "join": {"prototype": {}}, "normalize": {"prototype": {}}, "isRelative": {"prototype": {}}, "pathTo": {"prototype": {}}, "mapJoin": {"prototype": {}}, "addJS": {"prototype": {}}, "toString": {"prototype": {}}, "insertMapping": {"prototype": {}}}, "line": 457, "children": []})