c({"name": "observe", "type": "page", "comment": "<h2>3.1 Backlog - Deferreds</h2>\n\n<p>jQuery 1.6 brought Deferred support.  They are a great feature\nthat promise to make a lot of asynchronous functionality \neasier to write and manage. But, many people struggle \nwith uses other than 'waiting for a bunch of Ajax requests to complete'. For 3.1, we \nidentified an extremely common, but annoying, practice that becomes\na one-liner with deferreds: loading data and a template and rendering the\nresult into an element.</p>\n\n<h2>Templates Consume Deferreds</h2>\n\n<p>Here's what that looks like in 3.1:</p>\n\n<pre><code>$('#todos').html('temps/todos.ejs', $.get('/todos',{},'json') );\n</code></pre>\n\n<p>This will make two parallel ajax requests.  One request \nis made for the template at <code>temps/todos.ejs</code> which might look like:</p>\n\n<pre><code>&lt;% for(var i =0; i< this.length; i++) { %>\n  &lt;li>&lt;%= this[i].name %>&lt;/li>\n&lt;% } %>\n</code></pre>\n\n<p>The second request loads <code>/todos</code> which might look like:</p>\n\n<pre><code>[\n    {\"id\" : 1, \"name\": \"Take out the Trash\"},\n    {\"id\" : 2, \"name\": \"Do the Laundry\"}\n]\n</code></pre>\n\n<p>When both have been loaded, the template is rendered with the todos data and\nthe result set as the <code>#todos</code> element's innerHTML.  </p>\n\n<p>This is fab fast! The AJAX and template request are made in parallel and rendered\nwhen both are complete.  I am too lazy to write \nout what this would look like before deferreds.  Actually, I'm not too lazy:</p>\n\n<pre><code>var template,\n    data,\n    done = function(){ \n       if( template &amp;&amp; data ) { \n         var html = new EJS({text: template})\n                                .render(data);\n         $('#todos').html( html )\n       }\n    }\n$.get('temps/todos.ejs', function(text){\n  template = text;\n  done();\n},'text')\n$.get('/todos',{}, function(json){\n  data = json\n  done();\n},'json')\n</code></pre>\n\n<h2>Models Return Deferreds</h2>\n\n<p>Model AJAX functions now return deferreds.  Creating models like:</p>\n\n<pre><code>$.Model('User',{\n  findAll: '/users'\n},{});\n\n$.Model('Todo',{\n  findAll: '/todos'\n},{})\n</code></pre>\n\n<p>Lets you request todos and users and get back a deferred that can be \nused in functions that accept deferreds like $.when:</p>\n\n<pre><code>$.when( User.findAll(), \n        Todo.findAll() )\n</code></pre>\n\n<p>Or $.View:</p>\n\n<pre><code>$('#content').html('temps/content.ejs',{\n  users : User.findAll(),\n  todos: Todo.findAll()\n})\n</code></pre>\n\n<h2>Conclusion</h2>\n\n<p>Despite using templates, this is \nstill 'waiting for a bunch of Ajax requests to complete'.  Does \nanyone have other good uses for deferreds?</p>", "src": "jquery/lang/observe/observe.md", "children": []})