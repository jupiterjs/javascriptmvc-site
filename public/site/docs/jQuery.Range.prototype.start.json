c({"name": "jQuery.Range.prototype.start", "type": "attribute", "parents": ["jQuery.Range.prototype"], "comment": "<p><code>range.start([start])</code> gets or sets the start of the range.</p>\n\n<p>If a value is not provided, start returns the range's starting container and offset like:</p>\n\n<pre><code>$('#foo').range().start()\n//-&gt; {container: fooElement, offset: 0 }\n</code></pre>\n\n<p>If a set value is provided, it can set the range.  The start of the range is set differently\ndepending on the type of set value:</p>\n\n<ul>\n<li><p><strong>Object</strong> - an object with the new starting container and offset like</p>\n\n<pre><code>$.Range().start({container:  $('#foo')[0], offset: 20})\n</code></pre></li>\n<li><p><strong>Number</strong> - the new offset value.  The container is kept the same.</p></li>\n<li><p><strong>String</strong> - adjusts the offset by converting the string offset to a number and adding it to the current\noffset.  For example, the following moves the offset forward four characters:</p>\n\n<pre><code>$('#foo').range().start(\"+4\")\n</code></pre></li>\n</ul>\n\n<p>Note that <code>start</code> can return a text node. To get the containing element use this:</p>\n\n<pre><code>var startNode = range.start().container;\nif( startNode.nodeType === Node.TEXT_NODE ||\n startNode.nodeType === Node.CDATA_SECTION_NODE ) {\n     startNode = startNode.parentNode;\n}\n$(startNode).addClass('highlight');\n</code></pre>", "params": {"set": {"order": 0, "description": "<p>a set value if setting the start of the range or nothing if reading it.</p>", "name": "set", "type": "Object|String|Number", "optional": true}}, "ret": {"description": "<p>if setting the start, the range is returned for chaining, otherwise, the\n  start offset and container are returned.</p>", "type": "jQuery.Range|Object"}, "src": {"query": "", "fragment": "", "path": "jquery/dom/range/range.js", "dir": {"prototype": {}}, "filename": {"prototype": {}}, "ext": {"prototype": {}}, "domain": {"prototype": {}}, "isCrossDomain": {"prototype": {}}, "isRelativeToDomain": {"prototype": {}}, "hash": {"prototype": {}}, "search": {"prototype": {}}, "add": {"prototype": {}}, "join": {"prototype": {}}, "normalize": {"prototype": {}}, "isRelative": {"prototype": {}}, "pathTo": {"prototype": {}}, "mapJoin": {"prototype": {}}, "addJS": {"prototype": {}}, "toString": {"prototype": {}}, "insertMapping": {"prototype": {}}}, "line": 267, "children": []})