c({"name": "can.Observe.prototype.isDirty", "params": {"checkAssociations": {"description": "<p>Whether nested objects should be checked or\nnot. Defaults to false.</p>", "type": "Boolean", "optional": true, "order": 0, "name": "checkAssociations"}}, "ret": {"description": "<p>true if there are changes,\n  false if not or there is no backup</p>", "type": "Boolean"}, "type": "function", "comment": "<p><code>observe.isDirty([checkAssociations])</code> returns if the observe has changed since the last\n[can.Observe.prototype.backup] call. If there is no backup it will return false. If you pass\ntrue, <em>isDirty</em> also checks if any child properties or [can.Model] associations have changed.</p>\n\n<pre><code>  var recipe = new can.Observe({\n      name : 'Pancakes',\n      ingredients : [{\n          name : \"eggs\",\n          amount : '1'\n      }, {\n          name : \"flour\",\n          amount : '1 cup'\n      }, {\n          name : \"milk\",\n          amount : '1 1/4 cup'\n      }]\n  });\n\n  recipe.backup();\n  // Change the attribute of a nested property\n  recipe.attr('ingredients.0.amount', '2');\n  recipe.isDirty() // -&gt; false\n  recipe.isDirty(true) // -&gt; true\n  recipe.attr('name', 'Eggcakes');\n  recipe.isDirty() // -&gt; true\n</code></pre>", "plugin": "can/observe/backup", "parents": ["can.Observe.backup"], "src": {"query": "", "fragment": "", "path": "can/observe/backup/backup.js", "dir": {"prototype": {}}, "filename": {"prototype": {}}, "ext": {"prototype": {}}, "domain": {"prototype": {}}, "isCrossDomain": {"prototype": {}}, "isRelativeToDomain": {"prototype": {}}, "hash": {"prototype": {}}, "search": {"prototype": {}}, "add": {"prototype": {}}, "join": {"prototype": {}}, "normalize": {"prototype": {}}, "isRelative": {"prototype": {}}, "pathTo": {"prototype": {}}, "mapJoin": {"prototype": {}}, "addJS": {"prototype": {}}, "toString": {"prototype": {}}, "insertMapping": {"prototype": {}}}, "line": 46, "children": []})