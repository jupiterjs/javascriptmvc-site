c({"name": "steal.config.types", "params": {"types": {"description": "", "type": "", "optional": false, "order": 0, "name": "types"}, "type": {"order": 1, "description": "<p>A string that defines the new type being defined and\nthe type being converted to, separated by a space, like \"coffee js\".</p>\n\n<p>There can be more than two steps used in conversion, such as \"ejs view js\".\nThis will define a method that converts .ejs files to .view files.  There\nshould be another converter for \"view js\" that makes this final conversion\nto JS.</p>", "name": "type", "type": "String", "optional": false}, "cb( options, original, success, error )": {"order": 2, "description": "<p>a callback\nfunction that converts the new file type to a basic type.  This method\nneeds to do two things: 1) save the text of the converted file in\noptions.text and 2) call success() when the conversion is done (it can work\nasynchronously).</p>\n\n<ul>\n<li><strong>options</strong> - the steal options for this file, including path information</li>\n<li><strong>original</strong> - the original argument passed to steal, which might be a\npath or a function</li>\n<li><strong>success</strong> - a method to call when the file is converted and processed\nsuccessfully</li>\n<li><strong>error</strong> - a method called if the conversion fails or the file doesn't\nexist</li>\n</ul>", "name": "cb( options, original, success, error )", "type": "Function", "optional": false}}, "ret": {"type": "undefined", "description": ""}, "type": "function", "parents": ["steal.config"], "comment": "<p>Registers a type.  You define the type of the file, the basic type it\nconverts to, and a conversion function where you convert the original file\nto JS or CSS.  This is modeled after the\n[http://api.jquery.com/extending-ajax/#Converters AJAX converters] in jQuery.</p>\n\n<p>Types are designed to make it simple to switch between steal's development\nand production modes.  In development mode, the types are converted\nin the browser to allow devs to see changes as they work.  When the app is\nbuilt, these converter functions are run by the build process,\nand the processed text is inserted into the production script, optimized for\nperformance.</p>\n\n<p>Here's an example converting files of type .foo to JavaScript.  Foo is a\nfake language that saves global variables defined like.  A .foo file might\nlook like this:</p>\n\n<pre><code>REQUIRED FOO\n</code></pre>\n\n<p>To define this type, you'd call steal.type like this:</p>\n\n<pre><code>steal.config(\"types\",{\"foo js\": function(options, success, error){\n  var parts = options.text.split(\" \")\n  options.text = parts[0]+\"='\"+parts[1]+\"'\";\n  success();\n}});\n</code></pre>\n\n<p>The method we provide is called with the text of .foo files in options.text.\nWe parse the file, create JavaScript and put it in options.text.  Couldn't\nbe simpler.</p>\n\n<p>Here's an example,\nconverting [http://jashkenas.github.com/coffee-script/ coffeescript]\nto JavaScript:</p>\n\n<pre><code>steal.type(\"coffee js\", function(options, original, success, error){\n  options.text = CoffeeScript.compile(options.text);\n  success();\n});\n</code></pre>\n\n<p>In this example, any time steal encounters a file with extension .coffee,\nit will call the given converter method.  CoffeeScript.compile takes the\ntext of the file, converts it from coffeescript to javascript, and saves\nthe JavaScript text in options.text.</p>\n\n<p>Similarly, languages on top of CSS, like [http://lesscss.org/ LESS], can\nbe converted to CSS:</p>\n\n<pre><code>steal.type(\"less css\", function(options, original, success, error){\n  new (less.Parser)({\n    optimization: less.optimization,\n    paths: []\n  }).parse(options.text, function (e, root) {\n    options.text = root.toCSS();\n    success();\n  });\n});\n</code></pre>\n\n<p>This simple type system could be used to convert any file type to be used\nin your JavaScript app.  For example, [http://fdik.org/yml/ yml] could be\nused for configuration.  jQueryMX uses steal.type to support JS templates,\nsuch as EJS, TMPL, and others.</p>", "src": {"query": "", "fragment": "", "path": "steal/steal.js", "dir": {"prototype": {}}, "filename": {"prototype": {}}, "ext": {"prototype": {}}, "domain": {"prototype": {}}, "isCrossDomain": {"prototype": {}}, "isRelativeToDomain": {"prototype": {}}, "hash": {"prototype": {}}, "search": {"prototype": {}}, "add": {"prototype": {}}, "join": {"prototype": {}}, "normalize": {"prototype": {}}, "isRelative": {"prototype": {}}, "pathTo": {"prototype": {}}, "mapJoin": {"prototype": {}}, "addJS": {"prototype": {}}, "toString": {"prototype": {}}, "insertMapping": {"prototype": {}}}, "line": 799, "children": []})