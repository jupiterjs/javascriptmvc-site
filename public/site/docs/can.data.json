c({"name": "can.data", "type": "function", "comment": "<p><code>can.data</code> enables the associatation of arbitrary data with DOM nodes and JavaScript objects.</p>\n\n<h3>Setting Data</h3>\n\n<pre><code>can.data( can.$('#elm'), key, value )\n</code></pre>\n\n<ul>\n<li><strong>wrappedNodeList</strong> node list to associate data to.</li>\n<li><strong>key</strong> string name of the association.</li>\n<li><strong>value</strong> tdata value; it can be any Javascript type including Array or Object.</li>\n</ul>\n\n<h3>Accessing Data</h3>\n\n<pre><code>can.data( can.$('#elm'), key )\n</code></pre>\n\n<ul>\n<li><strong>wrappedNodeList</strong> node list to retrieve association data from.</li>\n<li><strong>key</strong> string name of the association.</li>\n</ul>\n\n<p>Due to the way browsers security restrictions with plugins and external code, \nthe <em>data</em> method cannot be used on <code>object</code> (unless it's a Flash plugin), <code>applet</code> or <code>embed</code> elements.</p>", "parents": ["can.util"], "params": {"wrapped": {"order": 0, "description": "<p>The wrapped node list to associate data with</p>", "name": "wrapped", "type": "NodeList", "optional": false}, "key": {"order": 1, "description": "<p>The data property to access</p>", "name": "key", "type": "String", "optional": false}, "value": {"order": 2, "description": "<p>The data value to store</p>", "name": "value", "type": "Object", "optional": true}}, "ret": {"description": "<p>The value for the given key</p>", "type": "Object"}, "src": {"query": "", "fragment": "", "path": "can/util/can.js", "dir": {"prototype": {}}, "filename": {"prototype": {}}, "ext": {"prototype": {}}, "domain": {"prototype": {}}, "isCrossDomain": {"prototype": {}}, "isRelativeToDomain": {"prototype": {}}, "hash": {"prototype": {}}, "search": {"prototype": {}}, "add": {"prototype": {}}, "join": {"prototype": {}}, "normalize": {"prototype": {}}, "isRelative": {"prototype": {}}, "pathTo": {"prototype": {}}, "mapJoin": {"prototype": {}}, "addJS": {"prototype": {}}, "toString": {"prototype": {}}, "insertMapping": {"prototype": {}}}, "line": 384, "children": []})