c({"name": "steal.id", "type": "function", "parents": ["steal"], "comment": "<p>Given a resource id passed to <code>steal( resourceID, currentWorkingId )</code>, this function converts it to the \nfinal, unique id. This function can be overwritten \nto change how unique ids are defined, for example, to be more AMD-like.</p>\n\n<p>The following are the default rules.</p>\n\n<p>Given an ID:</p>\n\n<ol>\n<li>Check the id has an extension like <em>.js</em> or <em>.customext</em>. If it doesn't:\n<ol><li>Check if the id is relative, meaning it starts with <em>../</em> or <em>./</em>. If it is not, add \n\"/\" plus everything after the last \"/\". So <code>foo/bar</code> becomes <code>foo/bar/bar</code></li>\n<li>Add .js to the id.</li></ol></li>\n<li>Check if the id is relative, meaning it starts with <em>../</em> or <em>./</em>. If it is relative,\nset the id to the id joined from the currentWorkingId.</li>\n<li>Check the </li>\n</ol>\n\n<p><code>steal.id()</code></p>", "params": {"id": {"order": 0, "description": "", "name": "id", "type": "String", "optional": false}, "currentWorkingId": {"order": 1, "description": "", "name": "currentWorkingId", "type": "String", "optional": false}, "type": {"order": 2, "description": "", "name": "type", "type": "String", "optional": true, "default": "js"}}, "src": {"query": "", "fragment": "", "path": "steal/steal.js", "dir": {"prototype": {}}, "filename": {"prototype": {}}, "ext": {"prototype": {}}, "domain": {"prototype": {}}, "isCrossDomain": {"prototype": {}}, "isRelativeToDomain": {"prototype": {}}, "hash": {"prototype": {}}, "search": {"prototype": {}}, "add": {"prototype": {}}, "join": {"prototype": {}}, "normalize": {"prototype": {}}, "isRelative": {"prototype": {}}, "pathTo": {"prototype": {}}, "mapJoin": {"prototype": {}}, "addJS": {"prototype": {}}, "toString": {"prototype": {}}, "insertMapping": {"prototype": {}}}, "line": 1835, "children": []})