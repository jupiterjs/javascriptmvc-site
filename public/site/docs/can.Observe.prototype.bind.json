c({"name": "can.Observe.prototype.bind", "type": "function", "parents": ["can.Observe.prototype"], "comment": "<p><code>bind( eventType, handler )</code> Listens to changes on a can.Observe.</p>\n\n<p>When attributes of an observe change, two types of events are produced</p>\n\n<ul>\n<li>\"change\" events - a generic event so you can listen to any property changes</li>\n<li>ATTR_NAME events - bind to specific attribute changes</li>\n</ul>\n\n<p>Example:</p>\n\n<pre><code>o = new can.Observe({ name: 'Payal' });\no.bind( 'change', function( ev, attr, how, newVal, oldVal ) {\n\n}).bind( 'name', function( ev, newVal, oldVal ) {\n\n});\n\no.attr( 'name', 'Justin' ); \n</code></pre>\n\n<h2>Change Events</h2>\n\n<p>A <code>'change'</code> event is triggered on the observe.  These events come\nin three flavors:</p>\n\n<ul>\n<li><code>add</code> - a attribute is added</li>\n<li><code>set</code> - an existing attribute's value is changed</li>\n<li><code>remove</code> - an attribute is removed</li>\n</ul>\n\n<p>The change event is fired with:</p>\n\n<ul>\n<li>the attribute changed</li>\n<li>how it was changed</li>\n<li>the newValue of the attribute</li>\n<li>the oldValue of the attribute</li>\n</ul>\n\n<p>Example:</p>\n\n<pre><code>o = new can.Observe({ name: 'Payal' });\no.bind( 'change', function( ev, attr, how, newVal, oldVal ) {\n  // ev    -&gt; {type: 'change'}\n  // attr  -&gt; \"name\"\n  // how   -&gt; \"add\"\n  // newVal-&gt; \"Justin\"\n  // oldVal-&gt; \"Payal\"\n});\n\no.attr( 'name', 'Justin' );\n</code></pre>\n\n<h2>ATTR_NAME events</h2>\n\n<p>When a attribute value is changed, an event with the name of the attribute\nis triggered on the observable with the new value and old value as \nparameters. For example:</p>\n\n<pre><code>o = new can.Observe({ name: 'Payal' });\no.bind( 'name', function( ev, newVal, oldVal ) {\n  // ev    -&gt; {type : \"name\"}\n  // newVal-&gt; \"Justin\"\n  // oldVal-&gt; \"Payal\"\n});\n\no.attr( 'name', 'Justin' );\n</code></pre>", "params": {"eventType": {"order": 0, "description": "<p>the event name.  Currently,\nonly <code>'change'</code>  and <code>ATTR_NAME</code> events are supported. </p>", "name": "eventType", "type": "String", "optional": false}, "handler(event, attr, how, newVal, oldVal)": {"order": 1, "description": "<p>A \ncallback function where</p>\n\n<ul>\n<li>event - the event</li>\n<li>attr - the name of the attribute changed</li>\n<li>how - how the attribute was changed (add, set, remove)</li>\n<li>newVal - the new value of the attribute</li>\n<li>oldVal - the old value of the attribute</li>\n</ul>", "name": "handler(event, attr, how, newVal, oldVal)", "type": "Function", "optional": false}}, "ret": {"description": "<p>the observe for chaining.</p>", "type": "can.Observe"}, "src": {"query": "", "fragment": "", "path": "can/observe/observe.js", "dir": {"prototype": {}}, "filename": {"prototype": {}}, "ext": {"prototype": {}}, "domain": {"prototype": {}}, "isCrossDomain": {"prototype": {}}, "isRelativeToDomain": {"prototype": {}}, "hash": {"prototype": {}}, "search": {"prototype": {}}, "add": {"prototype": {}}, "join": {"prototype": {}}, "normalize": {"prototype": {}}, "isRelative": {"prototype": {}}, "pathTo": {"prototype": {}}, "mapJoin": {"prototype": {}}, "addJS": {"prototype": {}}, "toString": {"prototype": {}}, "insertMapping": {"prototype": {}}}, "line": 681, "children": []})