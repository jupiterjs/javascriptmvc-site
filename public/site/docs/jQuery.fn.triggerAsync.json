c({"name": "jQuery.fn.triggerAsync", "params": {"type": {"description": "<p>The type of event</p>", "type": "String", "optional": false, "order": 0, "name": "type"}, "data": {"description": "<p>The data for the event</p>", "type": "Object", "optional": false, "order": 1, "name": "data"}, "success": {"description": "<p>a callback function which occurs upon success</p>", "type": "Function", "optional": false, "order": 2, "name": "success"}, "prevented": {"description": "<p>a callback function which occurs if preventDefault was called</p>", "type": "Function", "optional": false, "order": 3, "name": "prevented"}}, "ret": {"type": "undefined", "description": ""}, "type": "function", "comment": "<p><code>jQuery.fn.triggerAsync(type, [data], [success], [prevented]</code> triggers an event and calls success\nwhen the event has finished propagating through the DOM and no other handler\ncalled <code>event.preventDefault()</code> or returned <code>false</code>.</p>\n\n<pre><code>$('#panel').triggerAsync('show', function() {\n   $('#panel').show();\n});\n</code></pre>\n\n<p>You can also provide a callback that gets called if <code>event.preventDefault()</code> was called on the event:</p>\n\n<pre><code>$('panel').triggerAsync('show', function(){\n    $('#panel').show();\n},function(){ \n    $('#other').addClass('error');\n});\n</code></pre>", "parents": ["jQuery.event.pause"], "plugin": "jquery/event/default", "src": {"query": "", "fragment": "", "path": "jquery/event/default/default.js", "dir": {"prototype": {}}, "filename": {"prototype": {}}, "ext": {"prototype": {}}, "domain": {"prototype": {}}, "isCrossDomain": {"prototype": {}}, "isRelativeToDomain": {"prototype": {}}, "hash": {"prototype": {}}, "search": {"prototype": {}}, "add": {"prototype": {}}, "join": {"prototype": {}}, "normalize": {"prototype": {}}, "isRelative": {"prototype": {}}, "pathTo": {"prototype": {}}, "mapJoin": {"prototype": {}}, "addJS": {"prototype": {}}, "toString": {"prototype": {}}, "insertMapping": {"prototype": {}}}, "line": 0, "children": []})