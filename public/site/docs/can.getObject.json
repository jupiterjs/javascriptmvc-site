c({"name": "can.getObject", "params": {"name": {"description": "<p>the name of the object to look for</p>", "type": "String", "optional": false, "order": 0, "name": "name"}, "roots": {"description": "<p>an array of root objects to look for the \n  name.  If roots is not provided, the window is used.</p>", "type": "Array", "optional": true, "order": 1, "name": "roots"}, "add": {"description": "<p>true to add missing objects to \n the path. false to remove found properties. undefined to \n not modify the root object</p>", "type": "Boolean", "optional": true, "order": 2, "name": "add"}}, "ret": {"description": "<p>The object.</p>", "type": "Object"}, "type": "function", "comment": "<p>Gets an object from a string.  It can also modify objects on the\n'object path' by removing or adding properties.</p>\n\n<pre><code>Foo = {Bar: {Zar: {\"Ted\"}}}\ncan.getObject(\"Foo.Bar.Zar\") //-&gt; \"Ted\"\n</code></pre>", "parents": ["can.util"], "src": {"query": "", "fragment": "", "path": "can/util/string/string.js", "dir": {"prototype": {}}, "filename": {"prototype": {}}, "ext": {"prototype": {}}, "domain": {"prototype": {}}, "isCrossDomain": {"prototype": {}}, "isRelativeToDomain": {"prototype": {}}, "hash": {"prototype": {}}, "search": {"prototype": {}}, "add": {"prototype": {}}, "join": {"prototype": {}}, "normalize": {"prototype": {}}, "isRelative": {"prototype": {}}, "pathTo": {"prototype": {}}, "mapJoin": {"prototype": {}}, "addJS": {"prototype": {}}, "toString": {"prototype": {}}, "insertMapping": {"prototype": {}}}, "line": 51, "children": []})