c({"name": "can.Construct.static.extend", "params": {"fullName": {"description": "<p>the classes name (used for classes w/ introspection)</p>", "type": "String", "optional": true, "order": 0, "name": "fullName"}, "klass": {"description": "<p>the new classes static/class functions</p>", "type": "Object", "optional": true, "order": 1, "name": "klass"}, "proto": {"description": "<p>the new classes prototype functions</p>", "type": "Object", "optional": true, "order": 2, "name": "proto"}}, "ret": {"description": "<p>returns the new class</p>", "type": "can.Construct"}, "type": "function", "parents": ["can.Construct.static"], "comment": "<p>Extends a class with new static and prototype functions.  There are a variety of ways\nto use extend:</p>\n\n<pre><code>// with className, static and prototype functions\ncan.Construct('Task',{ STATIC },{ PROTOTYPE })\n// with just classname and prototype functions\ncan.Construct('Task',{ PROTOTYPE })\n// with just a className\ncan.Construct('Task')\n</code></pre>\n\n<p>You no longer have to use <code>.extend</code>.  Instead, you can pass those options directly to\ncan.Construct (and any inheriting classes):</p>\n\n<pre><code>// with className, static and prototype functions\ncan.Construct('Task',{ STATIC },{ PROTOTYPE })\n// with just classname and prototype functions\ncan.Construct('Task',{ PROTOTYPE })\n// with just a className\ncan.Construct('Task')\n</code></pre>", "hide": true, "src": {"query": "", "fragment": "", "path": "can/construct/construct.js", "dir": {"prototype": {}}, "filename": {"prototype": {}}, "ext": {"prototype": {}}, "domain": {"prototype": {}}, "isCrossDomain": {"prototype": {}}, "isRelativeToDomain": {"prototype": {}}, "hash": {"prototype": {}}, "search": {"prototype": {}}, "add": {"prototype": {}}, "join": {"prototype": {}}, "normalize": {"prototype": {}}, "isRelative": {"prototype": {}}, "pathTo": {"prototype": {}}, "mapJoin": {"prototype": {}}, "addJS": {"prototype": {}}, "toString": {"prototype": {}}, "insertMapping": {"prototype": {}}}, "line": 154, "children": []})