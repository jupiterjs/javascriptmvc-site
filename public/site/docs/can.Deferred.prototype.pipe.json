c({"name": "can.Deferred.prototype.pipe", "type": "function", "parents": ["can.Deferred.prototype"], "comment": "<p><code>deferred.pipe(done, fail)</code> is a utility to filter Deferred(s).</p>\n\n<pre><code>var def = can.Deferred(),\n    filtered = def.pipe(function(val) {\n        return val + \" is awesome!\";\n    });\n\ndef.resolve('Can');\n\nfiltered.done(function(value) {\n    alert(value); // Alerts: 'Can is awesome!'\n});\n</code></pre>", "params": {"doneCallbacks": {"order": 0, "description": "<p>A function called when the Deferred is resolved.</p>", "name": "doneCallbacks", "type": "Object", "optional": false}, "failCallbacks": {"order": 1, "description": "<p>A function called when the Deferred is rejected.</p>", "name": "failCallbacks", "type": "Object", "optional": false}}, "src": {"query": "", "fragment": "", "path": "can/util/can.js", "dir": {"prototype": {}}, "filename": {"prototype": {}}, "ext": {"prototype": {}}, "domain": {"prototype": {}}, "isCrossDomain": {"prototype": {}}, "isRelativeToDomain": {"prototype": {}}, "hash": {"prototype": {}}, "search": {"prototype": {}}, "add": {"prototype": {}}, "join": {"prototype": {}}, "normalize": {"prototype": {}}, "isRelative": {"prototype": {}}, "pathTo": {"prototype": {}}, "mapJoin": {"prototype": {}}, "addJS": {"prototype": {}}, "toString": {"prototype": {}}, "insertMapping": {"prototype": {}}}, "line": 479, "children": []})