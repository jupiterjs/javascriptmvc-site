c({"name": "can.Observe.prototype.each", "params": {"handler( attrName, value )": {"order": 0, "description": "<p>A function that will get \ncalled back with the name and value of each attribute on the observe.</p>\n\n<p>Returning <code>false</code> breaks the looping. The following will never\nlog 3:</p>\n\n<pre><code>new Observe({ a: 1, b: 2, c: 3 })\n  .each( function( value, name ) {\n    console.log(value);\n    if ( name == 2 ) {\n      return false;\n    }\n  });\n</code></pre>", "name": "handler( attrName, value )", "type": "function", "optional": false}}, "ret": {"description": "<p>the original observable.</p>", "type": "can.Observe"}, "type": "function", "parents": ["can.Observe.prototype"], "comment": "<p>Iterates through each attribute, calling handler \nwith each attribute name and value.</p>\n\n<pre><code>new Observe({ foo: 'bar' })\n  .each( function( value, name ) {\n    equals( name, 'foo' );\n    equals( value,'bar' );\n  });\n</code></pre>", "src": {"query": "", "fragment": "", "path": "can/observe/observe.js", "dir": {"prototype": {}}, "filename": {"prototype": {}}, "ext": {"prototype": {}}, "domain": {"prototype": {}}, "isCrossDomain": {"prototype": {}}, "isRelativeToDomain": {"prototype": {}}, "hash": {"prototype": {}}, "search": {"prototype": {}}, "add": {"prototype": {}}, "join": {"prototype": {}}, "normalize": {"prototype": {}}, "isRelative": {"prototype": {}}, "pathTo": {"prototype": {}}, "mapJoin": {"prototype": {}}, "addJS": {"prototype": {}}, "toString": {"prototype": {}}, "insertMapping": {"prototype": {}}}, "line": 517, "children": []})