c({"name": "can.view.render", "params": {"view": {"description": "<p>the path of the view template or a view object</p>", "type": "String|Object", "optional": false, "order": 0, "name": "view"}, "data": {"description": "<p>the object passed to a template</p>", "type": "Object", "optional": true, "order": 1, "name": "data"}, "helpers": {"description": "<p>additional helper methods to be passed to the view template</p>", "type": "Object", "optional": true, "order": 2, "name": "helpers"}, "callback": {"description": "<p>function executed after template has been processed</p>", "type": "Function", "optional": true, "order": 3, "name": "callback"}, "returns": {"order": 4, "description": "<p>a string of processed text or a deferred\nthat resolves to the processed text or a renderer function when no data are passed.</p>", "name": "returns", "type": "String|Object|Function", "optional": false}}, "ret": {"type": "undefined", "description": ""}, "type": "function", "parents": ["can.view"], "comment": "<p><code>can.view.render(view, [data], [helpers], callback)</code> returns the rendered markup produced by the corresponding template\nengine as String. If you pass a deferred object in as data, render returns\na deferred resolving to the rendered markup.</p>\n\n<p><code>can.view.render</code> is commonly used for sub-templates.</p>\n\n<h2>Example</h2>\n\n<p><em>welcome.ejs</em> looks like:</p>\n\n<pre><code>&lt;h1&gt;Hello &lt;%= hello %&gt;&lt;/h1&gt;\n</code></pre>\n\n<p>Render it to a string like:</p>\n\n<pre><code>can.view.render(\"welcome.ejs\",{hello: \"world\"})\n  //-&gt; &lt;h1&gt;Hello world&lt;/h1&gt;\n</code></pre>\n\n<h2>Use as a Subtemplate</h2>\n\n<p>If you have a template like:</p>\n\n<pre><code>&lt;ul&gt;\n  &lt;% list(items, function(item){ %&gt;\n    &lt;%== can.view.render(\"item.ejs\",item) %&gt;\n  &lt;% }) %&gt;\n&lt;/ul&gt;\n</code></pre>\n\n<h2>Using renderer functions</h2>\n\n<p>If you only pass the view path, `can.view will return a renderer function that can be called with\nthe data to render:</p>\n\n<pre><code>var renderer = can.view.render(\"welcome.ejs\");\n// Do some more things\nrenderer({hello: \"world\"}) // -&gt; Document Fragment\n</code></pre>", "src": {"query": "", "fragment": "", "path": "can/view/view.js", "dir": {"prototype": {}}, "filename": {"prototype": {}}, "ext": {"prototype": {}}, "domain": {"prototype": {}}, "isCrossDomain": {"prototype": {}}, "isRelativeToDomain": {"prototype": {}}, "hash": {"prototype": {}}, "search": {"prototype": {}}, "add": {"prototype": {}}, "join": {"prototype": {}}, "normalize": {"prototype": {}}, "isRelative": {"prototype": {}}, "pathTo": {"prototype": {}}, "mapJoin": {"prototype": {}}, "addJS": {"prototype": {}}, "toString": {"prototype": {}}, "insertMapping": {"prototype": {}}}, "line": 285, "children": []})