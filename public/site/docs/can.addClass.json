c({"name": "can.addClass", "type": "function", "comment": "<p><code>can.addClass( nodelist, className )</code> adds the specified class(es) to\nnodelist's HTMLElements.  It does NOT replace any existing class(es)\nalready defined.</p>\n\n<pre><code>// Before\n&lt;div id=\"foo\" class=\"monkey\" /&gt;\n\ncan.addClass(can.$(\"#foo\"),\"bar\")\n\n// After\n&lt;div id=\"foo\" class=\"monkey bar\" /&gt;\n</code></pre>\n\n<p>You can also pass multiple class(es) and it will add them to the existing\nset also.</p>\n\n<pre><code>// Before\n&lt;div id=\"foo\" class=\"monkey\" /&gt;\n\ncan.addClass(can.$(\"#foo\"),\"bar man\")\n\n// After\n&lt;div id=\"foo\" class=\"monkey bar man\" /&gt;\n</code></pre>\n\n<p>This works similarly to [http://api.jquery.com/addClass/ jQuery.fn.addClass].</p>", "parents": ["can.util"], "params": {"class": {"order": 0, "description": "<p>name to add to the wrapped node list</p>", "name": "class", "type": "String", "optional": false}}, "src": {"query": "", "fragment": "", "path": "can/util/can.js", "dir": {"prototype": {}}, "filename": {"prototype": {}}, "ext": {"prototype": {}}, "domain": {"prototype": {}}, "isCrossDomain": {"prototype": {}}, "isRelativeToDomain": {"prototype": {}}, "hash": {"prototype": {}}, "search": {"prototype": {}}, "add": {"prototype": {}}, "join": {"prototype": {}}, "normalize": {"prototype": {}}, "isRelative": {"prototype": {}}, "pathTo": {"prototype": {}}, "mapJoin": {"prototype": {}}, "addJS": {"prototype": {}}, "toString": {"prototype": {}}, "insertMapping": {"prototype": {}}}, "line": 414, "children": []})